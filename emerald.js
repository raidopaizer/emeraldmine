
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '../emerald.data';
    var REMOTE_PACKAGE_BASE = 'emerald.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'cave', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_../emerald.data');

    };
    Module['addRunDependency']('datafile_../emerald.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 28754, "filename": "/cave/emerald_mine_1.S"}, {"audio": 0, "start": 28754, "crunched": 0, "end": 60046, "filename": "/cave/emeraldclub_2.S"}], "remote_package_size": 60046, "package_uuid": "2e8f537e-43af-46d5-ac7a-8207450c115b"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 165440;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([2,0,0,0,2,0,0,0,255,255,255,255,255,255,255,255,38,0,0,0,87,0,0,0,39,0,0,0,68,0,0,0,40,0,0,0,83,0,0,0,37,0,0,0,65,0,0,0,17,0,0,0,13,0,0,0,27,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,118,97,100,223,49,0,0,222,50,0,0,103,50,0,0,114,50,0,0,123,50,0,0,53,50,0,0,68,50,0,0,83,50,0,0,93,50,0,0,255,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,172,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,125,0,0,0,47,130,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,87,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,9,0,0,5,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,125,0,0,0,55,130,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,24,0,29,0,14,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,34,0,59,0,60,0,61,0,62,0,73,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,149,0,160,0,172,0,181,0,191,0,201,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,0,1,1,1,2,1,11,1,12,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,28,1,30,1,32,1,34,1,36,1,37,1,38,1,39,1,40,1,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,41,1,43,1,45,1,47,1,48,1,49,1,50,1,65,1,66,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,127,1,128,1,129,1,130,1,131,1,132,1,133,1,134,1,135,1,136,1,137,1,138,1,139,1,140,1,141,1,142,1,143,1,144,1,145,1,146,1,147,1,148,1,149,1,0,0,38,0,39,0,40,0,21,0,30,0,41,0,22,0,96,0,42,0,17,0,120,0,1,0,8,0,12,0,4,0,61,0,62,0,63,0,64,0,97,0,98,0,56,0,131,0,132,0,130,0,39,0,38,0,0,0,0,0,0,0,0,0,40,0,40,0,39,0,39,0,21,0,21,0,133,0,133,0,30,0,32,0,34,0,36,0,31,0,33,0,35,0,37,0,41,0,41,0,38,0,38,0,22,0,24,0,26,0,28,0,23,0,25,0,27,0,29,0,96,0,96,0,0,0,96,0,40,0,41,0,39,0,38,0,97,0,42,0,42,0,42,0,98,0,17,0,19,0,20,0,18,0,120,0,0,0,0,0,0,0,119,0,119,0,119,0,120,0,120,0,120,0,119,0,40,0,114,0,114,0,57,0,58,0,59,0,60,0,101,0,130,0,131,0,132,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,133,0,53,0,52,0,12,0,60,0,133,0,51,0,50,0,49,0,48,0,133,0,133,0,133,0,133,0,133,0,0,0,8,0,1,0,12,0,4,0,61,0,62,0,63,0,64,0,69,0,70,0,71,0,72,0,116,0,77,0,78,0,79,0,80,0,97,0,98,0,119,0,102,0,103,0,104,0,105,0,3,0,92,0,93,0,94,0,95,0,129,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,115,0,56,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,3,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,150,0,146,0,151,0,152,0,153,0,134,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,40,0,40,0,39,0,39,0,21,0,21,0,133,0,133,0,30,0,32,0,34,0,36,0,31,0,33,0,35,0,37,0,41,0,41,0,38,0,38,0,22,0,24,0,26,0,28,0,23,0,25,0,27,0,29,0,96,0,96,0,0,0,96,0,40,0,41,0,39,0,38,0,97,0,42,0,42,0,42,0,98,0,17,0,19,0,20,0,18,0,120,0,0,0,0,0,0,0,119,0,119,0,119,0,120,0,120,0,120,0,119,0,40,0,122,0,121,0,57,0,58,0,59,0,60,0,101,0,130,0,131,0,132,0,85,0,3,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,133,0,133,0,133,0,133,0,133,0,53,0,52,0,13,0,60,0,133,0,51,0,50,0,49,0,48,0,133,0,133,0,133,0,133,0,133,0,0,0,9,0,1,0,13,0,5,0,61,0,62,0,63,0,64,0,69,0,70,0,71,0,72,0,116,0,77,0,78,0,79,0,80,0,97,0,98,0,119,0,102,0,103,0,104,0,105,0,114,0,88,0,89,0,90,0,91,0,129,0,154,0,115,0,114,0,114,0,114,0,114,0,114,0,114,0,133,0,141,0,142,0,143,0,138,0,148,0,147,0,149,0,56,0,14,0,139,0,140,0,12,0,8,0,135,0,137,0,136,0,127,0,124,0,125,0,126,0,123,0,2,0,3,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,150,0,146,0,151,0,152,0,153,0,134,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,40,0,40,0,39,0,39,0,21,0,21,0,133,0,133,0,30,0,32,0,34,0,36,0,31,0,33,0,35,0,37,0,41,0,41,0,38,0,38,0,22,0,24,0,26,0,28,0,23,0,25,0,27,0,29,0,96,0,96,0,0,0,96,0,40,0,41,0,39,0,38,0,97,0,42,0,42,0,42,0,98,0,17,0,19,0,20,0,18,0,120,0,0,0,0,0,0,0,119,0,119,0,119,0,120,0,120,0,120,0,119,0,40,0,122,0,121,0,57,0,58,0,59,0,60,0,101,0,130,0,131,0,132,0,85,0,3,0,43,0,43,0,55,0,54,0,86,0,87,0,16,0,133,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,55,0,54,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,133,0,133,0,133,0,133,0,133,0,53,0,52,0,13,0,133,0,133,0,51,0,50,0,49,0,48,0,133,0,133,0,133,0,133,0,133,0,0,0,9,0,1,0,13,0,5,0,61,0,62,0,63,0,64,0,69,0,70,0,71,0,72,0,116,0,77,0,78,0,79,0,80,0,97,0,98,0,119,0,102,0,103,0,104,0,105,0,114,0,88,0,89,0,90,0,91,0,129,0,154,0,115,0,117,0,118,0,114,0,115,0,99,0,99,0,133,0,141,0,142,0,143,0,138,0,148,0,147,0,149,0,56,0,14,0,139,0,140,0,12,0,8,0,135,0,137,0,136,0,127,0,124,0,125,0,126,0,123,0,2,0,3,0,65,0,66,0,67,0,68,0,73,0,74,0,75,0,76,0,100,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,150,0,146,0,151,0,152,0,153,0,134,0,81,0,82,0,83,0,84,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,96,0,96,0,80,0,80,0,96,0,96,0,112,0,192,18,208,18,224,18,240,18,0,19,16,19,32,19,64,0,112,0,96,0,96,0,80,0,80,0,64,0,64,0,48,0,48,0,48,0,32,0,32,0,32,0,16,0,16,0,16,0,48,0,48,0,32,0,32,0,32,0,16,0,16,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,47,192,47,176,47,176,47,160,47,160,47,0,0,0,0,240,47,240,47,224,47,224,47,208,47,208,47,0,0,0,0,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,64,51,0,48,0,48,0,48,0,48,0,48,0,48,0,48,0,48,16,48,16,48,16,48,16,48,16,48,16,48,16,48,16,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,32,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,64,48,64,48,64,48,64,48,64,48,64,48,64,48,64,48,80,48,80,48,80,48,80,48,80,48,80,48,80,48,80,48,96,48,96,48,96,48,96,48,96,48,96,48,96,48,96,48,112,48,112,48,112,48,112,48,112,48,112,48,112,48,112,48,0,44,0,44,0,44,0,44,0,44,0,44,0,44,0,44,112,44,96,44,80,44,64,44,48,44,32,44,16,44,0,0,224,44,208,44,192,44,176,44,160,44,144,44,128,44,0,0,80,45,64,45,48,45,32,45,16,45,0,45,240,44,0,0,192,45,176,45,160,45,144,45,128,45,112,45,96,45,0,0,208,45,208,45,208,45,208,45,208,45,208,45,208,45,208,45,64,46,48,46,32,46,16,46,0,46,240,45,224,45,0,0,176,46,160,46,144,46,128,46,112,46,96,46,80,46,0,0,32,47,16,47,0,47,240,46,224,46,208,46,192,46,0,0,144,47,128,47,112,47,96,47,80,47,64,47,48,47,0,0,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,16,18,32,18,48,18,64,18,80,18,96,18,112,18,0,18,128,18,160,18,192,18,224,18,0,19,32,19,64,19,0,18,144,18,176,18,208,18,240,18,16,19,48,19,80,19,0,0,64,20,96,20,128,20,160,20,192,20,224,20,0,21,0,18,80,20,112,20,144,20,176,20,208,20,240,20,16,21,0,0,48,20,16,20,240,19,208,19,176,19,144,19,112,19,0,18,32,20,0,20,224,19,192,19,160,19,128,19,96,19,0,0,240,21,208,21,176,21,144,21,112,21,80,21,48,21,0,18,224,21,192,21,160,21,128,21,96,21,64,21,32,21,0,0,80,19,48,19,16,19,240,18,208,18,176,18,144,18,0,18,64,19,32,19,0,19,224,18,192,18,160,18,128,18,0,0,16,21,240,20,208,20,176,20,144,20,112,20,80,20,0,18,0,21,224,20,192,20,160,20,128,20,96,20,64,20,0,0,96,19,128,19,160,19,192,19,224,19,0,20,32,20,0,18,112,19,144,19,176,19,208,19,240,19,16,20,48,20,0,0,32,21,64,21,96,21,128,21,160,21,192,21,224,21,0,18,48,21,80,21,112,21,144,21,176,21,208,21,240,21,0,0,128,13,144,13,160,13,176,13,176,13,160,13,144,13,128,13,128,13,144,13,160,13,176,13,176,13,160,13,144,13,128,13,128,13,144,13,160,13,176,13,176,13,160,13,144,13,128,13,128,13,144,13,160,13,176,13,176,13,160,13,144,13,128,13,192,13,224,13,0,14,32,14,64,14,96,14,128,14,128,13,208,13,240,13,16,14,48,14,80,14,112,14,144,14,0,0,112,15,80,15,48,15,16,15,240,14,208,14,176,14,128,13,96,15,64,15,32,15,0,15,224,14,192,14,160,14,0,0,144,14,112,14,80,14,48,14,16,14,240,13,208,13,128,13,128,14,96,14,64,14,32,14,0,14,224,13,192,13,0,0,160,14,192,14,224,14,0,15,32,15,64,15,96,15,128,13,176,14,208,14,240,14,16,15,48,15,80,15,112,15,0,0,142,15,140,15,138,15,136,15,134,15,132,15,130,15,112,0,174,15,172,15,170,15,168,15,166,15,164,15,162,15,112,0,192,15,208,15,224,15,240,15,240,15,224,15,208,15,192,15,192,15,208,15,224,15,240,15,240,15,224,15,208,15,192,15,0,16,32,16,64,16,96,16,128,16,160,16,192,16,192,15,16,16,48,16,80,16,112,16,144,16,176,16,208,16,0,0,176,17,144,17,112,17,80,17,48,17,16,17,240,16,192,15,160,17,128,17,96,17,64,17,32,17,0,17,224,16,0,0,208,16,176,16,144,16,112,16,80,16,48,16,16,16,192,15,192,16,160,16,128,16,96,16,64,16,32,16,0,16,0,0,224,16,0,17,32,17,64,17,96,17,128,17,160,17,192,15,240,16,16,17,48,17,80,17,112,17,144,17,176,17,0,0,206,17,204,17,202,17,200,17,198,17,196,17,194,17,112,0,238,17,236,17,234,17,232,17,230,17,228,17,226,17,112,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,144,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,160,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,176,0,192,0,224,0,0,1,32,1,64,1,96,1,128,1,128,0,208,0,240,0,16,1,48,1,80,1,112,1,144,1,0,0,112,2,80,2,48,2,16,2,240,1,208,1,176,1,144,0,96,2,64,2,32,2,0,2,224,1,192,1,160,1,0,0,80,3,48,3,16,3,240,2,208,2,176,2,144,2,160,0,64,3,32,3,0,3,224,2,192,2,160,2,128,2,0,0,96,3,128,3,160,3,192,3,224,3,0,4,32,4,176,0,112,3,144,3,176,3,208,3,240,3,16,4,48,4,0,0,144,5,160,5,176,5,192,5,208,5,224,5,240,5,128,0,64,4,80,4,96,4,112,4,128,4,144,4,160,4,144,0,176,4,192,4,208,4,224,4,240,4,0,5,16,5,160,0,32,5,48,5,64,5,80,5,96,5,112,5,128,5,176,0,160,4,144,4,128,4,112,4,96,4,80,4,64,4,128,0,16,5,0,5,240,4,224,4,208,4,192,4,176,4,144,0,128,5,112,5,96,5,80,5,64,5,48,5,32,5,160,0,240,5,224,5,208,5,192,5,176,5,160,5,144,5,176,0,14,6,12,6,10,6,8,6,6,6,4,6,2,6,112,0,46,6,44,6,42,6,40,6,38,6,36,6,34,6,112,0,78,6,76,6,74,6,72,6,70,6,68,6,66,6,112,0,110,6,108,6,106,6,104,6,102,6,100,6,98,6,112,0,142,6,140,6,138,6,136,6,134,6,132,6,130,6,112,0,174,6,172,6,170,6,168,6,166,6,164,6,162,6,112,0,206,6,204,6,202,6,200,6,198,6,196,6,194,6,112,0,238,6,236,6,234,6,232,6,230,6,228,6,226,6,112,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,16,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,32,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,48,7,64,7,96,7,128,7,160,7,192,7,224,7,0,8,0,7,80,7,112,7,144,7,176,7,208,7,240,7,16,8,0,0,240,8,208,8,176,8,144,8,112,8,80,8,48,8,16,7,224,8,192,8,160,8,128,8,96,8,64,8,32,8,0,0,208,9,176,9,144,9,112,9,80,9,48,9,16,9,32,7,192,9,160,9,128,9,96,9,64,9,32,9,0,9,0,0,224,9,0,10,32,10,64,10,96,10,128,10,160,10,48,7,240,9,16,10,48,10,80,10,112,10,144,10,176,10,0,0,16,12,32,12,48,12,64,12,80,12,96,12,112,12,0,7,192,10,208,10,224,10,240,10,0,11,16,11,32,11,16,7,48,11,64,11,80,11,96,11,112,11,128,11,144,11,32,7,160,11,176,11,192,11,208,11,224,11,240,11,0,12,48,7,32,11,16,11,0,11,240,10,224,10,208,10,192,10,0,7,144,11,128,11,112,11,96,11,80,11,64,11,48,11,16,7,0,12,240,11,224,11,208,11,192,11,176,11,160,11,32,7,112,12,96,12,80,12,64,12,48,12,32,12,16,12,48,7,142,12,140,12,138,12,136,12,134,12,132,12,130,12,112,0,174,12,172,12,170,12,168,12,166,12,164,12,162,12,112,0,206,12,204,12,202,12,200,12,198,12,196,12,194,12,112,0,238,12,236,12,234,12,232,12,230,12,228,12,226,12,112,0,14,13,12,13,10,13,8,13,6,13,4,13,2,13,112,0,46,13,44,13,42,13,40,13,38,13,36,13,34,13,112,0,78,13,76,13,74,13,72,13,70,13,68,13,66,13,112,0,110,13,108,13,106,13,104,13,102,13,100,13,98,13,112,0,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,144,28,112,28,80,28,48,28,16,28,240,27,208,27,128,27,128,28,96,28,64,28,32,28,0,28,224,27,192,27,0,0,112,29,80,29,48,29,16,29,240,28,208,28,176,28,128,27,96,29,64,29,32,29,0,29,224,28,192,28,160,28,0,0,160,28,192,28,224,28,0,29,32,29,64,29,96,29,128,27,176,28,208,28,240,28,16,29,48,29,80,29,112,29,0,0,128,27,144,27,160,27,176,27,176,27,160,27,144,27,128,27,224,29,208,29,192,29,176,29,160,29,144,29,128,29,0,0,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,0,31,224,30,192,30,160,30,128,30,96,30,64,30,240,29,240,30,208,30,176,30,144,30,112,30,80,30,48,30,0,0,224,31,192,31,160,31,128,31,96,31,64,31,32,31,240,29,208,31,176,31,144,31,112,31,80,31,48,31,16,31,0,0,16,31,48,31,80,31,112,31,144,31,176,31,208,31,240,29,32,31,64,31,96,31,128,31,160,31,192,31,224,31,0,0,240,29,0,30,16,30,32,30,32,30,16,30,0,30,240,29,80,32,64,32,48,32,32,32,16,32,0,32,240,31,0,0,96,32,112,32,128,32,144,32,160,32,176,32,192,32,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,30,22,28,22,26,22,24,22,22,22,20,22,18,22,16,22,14,22,12,22,10,22,8,22,6,22,4,22,2,22,0,0,0,23,224,22,192,22,160,22,128,22,96,22,64,22,16,22,240,22,208,22,176,22,144,22,112,22,80,22,48,22,0,0,48,22,80,22,112,22,144,22,176,22,208,22,240,22,16,22,64,22,96,22,128,22,160,22,192,22,224,22,0,23,0,0,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,240,35,208,35,176,35,144,35,112,35,80,35,48,35,16,35,224,35,192,35,160,35,128,35,96,35,64,35,32,35,0,0,208,36,176,36,144,36,112,36,80,36,48,36,16,36,16,35,192,36,160,36,128,36,96,36,64,36,32,36,0,36,0,0,0,36,32,36,64,36,96,36,128,36,160,36,192,36,16,35,16,36,48,36,80,36,112,36,144,36,176,36,208,36,0,0,64,37,48,37,32,37,16,37,0,37,240,36,224,36,112,0,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,176,33,144,33,112,33,80,33,48,33,16,33,240,32,208,32,160,33,128,33,96,33,64,33,32,33,0,33,224,32,0,0,144,34,112,34,80,34,48,34,16,34,240,33,208,33,208,32,128,34,96,34,64,34,32,34,0,34,224,33,192,33,0,0,192,33,224,33,0,34,32,34,64,34,96,34,128,34,208,32,208,33,240,33,16,34,48,34,80,34,112,34,144,34,0,0,160,34,176,34,192,34,208,34,224,34,240,34,0,35,128,27,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,240,23,208,23,176,23,144,23,112,23,80,23,48,23,16,23,224,23,192,23,160,23,128,23,96,23,64,23,32,23,0,0,208,24,176,24,144,24,112,24,80,24,48,24,16,24,16,23,192,24,160,24,128,24,96,24,64,24,32,24,0,24,0,0,224,24,0,25,32,25,64,25,96,25,128,25,160,25,16,23,240,24,16,25,48,25,80,25,112,25,144,25,176,25,0,0,144,26,112,26,80,26,48,26,16,26,240,25,208,25,16,23,128,26,96,26,64,26,32,26,0,26,224,25,192,25,0,0,160,26,192,26,224,26,0,27,32,27,64,27,96,27,16,23,176,26,208,26,240,26,16,27,48,27,80,27,112,27,0,0,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,128,27,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,240,29,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,22,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,16,35,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,208,32,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,16,23,96,50,96,50,96,50,96,50,96,50,96,50,96,50,96,50,96,50,96,50,96,50,0,0,0,0,0,0,0,0,0,0,160,50,160,50,160,50,160,50,160,50,160,50,160,50,160,50,144,50,144,50,144,50,144,50,144,50,144,50,144,50,144,50,128,50,128,50,128,50,128,50,128,50,128,50,128,50,128,50,112,50,112,50,112,50,112,50,112,50,112,50,112,50,112,50,128,49,128,49,128,49,128,49,128,49,128,49,128,49,128,49,144,49,144,49,144,49,144,49,144,49,144,49,144,49,144,49,160,49,160,49,160,49,160,49,160,49,160,49,160,49,160,49,176,49,176,49,176,49,176,49,176,49,176,49,176,49,176,49,192,49,192,49,192,49,192,49,192,49,192,49,192,49,192,49,208,49,208,49,208,49,208,49,208,49,208,49,208,49,208,49,224,49,224,49,224,49,224,49,224,49,224,49,224,49,224,49,240,49,240,49,240,49,240,49,240,49,240,49,240,49,240,49,0,49,0,49,0,49,0,49,0,49,0,49,0,49,0,49,16,49,16,49,16,49,16,49,16,49,16,49,16,49,16,49,32,49,32,49,32,49,32,49,32,49,32,49,32,49,32,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,49,64,49,64,49,64,49,64,49,64,49,64,49,64,49,64,49,80,49,80,49,80,49,80,49,80,49,80,49,80,49,80,49,96,49,96,49,96,49,96,49,96,49,96,49,96,49,96,49,112,49,112,49,112,49,112,49,112,49,112,49,112,49,112,49,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,160,51,80,37,80,37,80,37,80,37,80,37,80,37,80,37,80,37,96,37,128,37,160,37,192,37,224,37,0,38,32,38,80,37,112,37,144,37,176,37,208,37,240,37,16,38,48,38,0,0,16,39,240,38,208,38,176,38,144,38,112,38,80,38,80,37,0,39,224,38,192,38,160,38,128,38,96,38,64,38,0,0,48,38,16,38,240,37,208,37,176,37,144,37,112,37,80,37,32,38,0,38,224,37,192,37,160,37,128,37,96,37,0,0,64,38,96,38,128,38,160,38,192,38,224,38,0,39,80,37,80,38,112,38,144,38,176,38,208,38,240,38,16,39,0,0,0,42,0,42,0,42,0,42,0,42,0,42,0,42,0,42,128,42,128,42,128,42,128,42,128,42,128,42,128,42,128,42,16,42,32,42,48,42,64,42,80,42,96,42,112,42,128,42,144,42,160,42,176,42,192,42,208,42,224,42,240,42,0,42,128,41,128,41,128,41,128,41,128,41,128,41,128,41,128,41,144,41,144,41,144,41,144,41,144,41,144,41,144,41,144,41,160,41,160,41,160,41,160,41,160,41,160,41,160,41,160,41,176,41,176,41,176,41,176,41,176,41,176,41,176,41,176,41,192,41,192,41,192,41,192,41,192,41,192,41,192,41,192,41,208,41,208,41,208,41,208,41,208,41,208,41,208,41,208,41,224,41,224,41,224,41,224,41,224,41,224,41,224,41,224,41,240,41,240,41,240,41,240,41,240,41,240,41,240,41,240,41,16,41,32,41,48,41,64,41,80,41,96,41,112,41,32,39,240,40,208,40,176,40,144,40,112,40,80,40,48,40,16,40,240,39,208,39,176,39,144,39,112,39,80,39,48,39,0,0,0,41,224,40,192,40,160,40,128,40,96,40,64,40,32,40,0,40,224,39,192,39,160,39,128,39,96,39,64,39,32,39,128,48,128,48,128,48,128,48,128,48,128,48,128,48,128,48,144,48,160,48,176,48,192,48,208,48,224,48,240,48,128,48,240,50,240,50,240,50,240,50,240,50,240,50,240,50,240,50,0,51,0,51,0,51,0,51,240,50,240,50,240,50,240,50,32,51,32,51,32,51,32,51,32,51,32,51,32,51,32,51,16,51,16,51,16,51,16,51,16,51,16,51,16,51,16,51,176,50,176,50,176,50,176,50,176,50,176,50,176,50,176,50,176,50,192,50,208,50,224,50,224,50,208,50,192,50,176,50,176,51,176,51,176,51,176,51,176,51,176,51,176,51,176,51,192,51,192,51,192,51,192,51,192,51,192,51,192,51,192,51,208,51,208,51,208,51,208,51,208,51,208,51,208,51,208,51,224,51,224,51,224,51,224,51,224,51,224,51,224,51,224,51,240,51,240,51,240,51,240,51,240,51,240,51,240,51,240,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,51,128,51,128,51,128,51,128,51,128,51,128,51,128,51,0,44,0,44,0,44,0,44,0,44,0,44,0,44,0,44,144,51,144,51,144,51,144,51,144,51,144,51,144,51,144,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,51,112,51,112,51,112,51,112,51,112,51,112,51,112,51,80,51,80,51,80,51,80,51,80,51,80,51,80,51,80,51,96,51,96,51,96,51,96,51,96,51,96,51,96,51,96,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,16,22,15,22,15,22,14,22,14,22,13,22,13,22,12,22,12,22,11,22,11,22,10,22,10,22,9,22,9,22,8,22,8,22,7,22,7,22,6,22,6,22,5,22,5,22,4,22,4,22,3,22,3,22,2,22,2,22,1,22,1,22,0,0,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,48,51,31,22,31,22,30,22,29,22,29,22,28,22,27,22,27,22,26,22,25,22,24,22,23,22,22,22,20,22,18,22,16,22,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,128,43,128,43,128,43,128,43,128,43,128,43,128,43,128,43,16,43,32,43,48,43,64,43,80,43,96,43,112,43,0,43,144,43,160,43,176,43,192,43,208,43,224,43,240,43,128,43,0,52,0,52,0,52,0,52,0,52,0,52,0,52,0,52,16,52,16,52,16,52,16,52,16,52,16,52,16,52,16,52,32,52,32,52,32,52,32,52,32,52,32,52,32,52,32,52,48,52,48,52,48,52,48,52,48,52,48,52,48,52,48,52,64,52,64,52,64,52,64,52,64,52,64,52,64,52,64,52,80,52,80,52,80,52,80,52,80,52,80,52,80,52,80,52,0,50,0,50,0,50,0,50,0,50,0,50,0,50,0,50,16,50,16,50,16,50,32,50,32,50,32,50,48,50,48,50,48,50,64,50,64,50,64,50,80,50,80,50,80,50,64,50,64,50,64,50,48,50,48,50,48,50,32,50,32,50,32,50,16,41,16,41,16,41,16,41,16,41,16,41,16,41,16,41,160,52,160,52,160,52,160,52,160,52,160,52,160,52,160,52,176,52,176,52,176,52,176,52,176,52,176,52,176,52,176,52,192,52,192,52,192,52,192,52,192,52,192,52,192,52,192,52,208,52,208,52,208,52,208,52,208,52,208,52,208,52,208,52,224,52,224,52,224,52,224,52,224,52,224,52,224,52,224,52,240,52,240,52,240,52,240,52,240,52,240,52,240,52,240,52,0,53,0,53,0,53,0,53,0,53,0,53,0,53,0,53,16,53,16,53,16,53,16,53,16,53,16,53,16,53,16,53,96,52,96,52,96,52,96,52,96,52,96,52,96,52,96,52,112,52,112,52,112,52,112,52,112,52,112,52,112,52,112,52,128,52,128,52,128,52,128,52,128,52,128,52,128,52,128,52,144,52,144,52,144,52,144,52,144,52,144,52,144,52,144,52,32,53,32,53,32,53,32,53,32,53,32,53,32,53,32,53,48,53,48,53,48,53,48,53,48,53,48,53,48,53,48,53,64,53,64,53,64,53,64,53,64,53,64,53,64,53,64,53,80,53,80,53,80,53,80,53,80,53,80,53,80,53,80,53,96,53,96,53,96,53,96,53,96,53,96,53,96,53,96,53,112,53,112,53,112,53,112,53,112,53,112,53,112,53,112,53,128,53,128,53,128,53,128,53,128,53,128,53], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([128,53,128,53,144,53,144,53,144,53,144,53,144,53,144,53,144,53,144,53,160,53,160,53,160,53,160,53,160,53,160,53,160,53,160,53,176,53,176,53,176,53,176,53,176,53,176,53,176,53,176,53,192,53,192,53,192,53,192,53,192,53,192,53,192,53,192,53,208,53,208,53,208,53,208,53,208,53,208,53,208,53,208,53,224,53,224,53,224,53,224,53,224,53,224,53,224,53,224,53,240,53,240,53,240,53,240,53,240,53,240,53,240,53,240,53,0,54,0,54,0,54,0,54,0,54,0,54,0,54,0,54,16,54,16,54,16,54,16,54,16,54,16,54,16,54,16,54,32,54,32,54,32,54,32,54,32,54,32,54,32,54,32,54,48,54,48,54,48,54,48,54,48,54,48,54,48,54,48,54,64,54,64,54,64,54,64,54,64,54,64,54,64,54,64,54,80,54,80,54,80,54,80,54,80,54,80,54,80,54,80,54,96,54,96,54,96,54,96,54,96,54,96,54,96,54,96,54,112,54,112,54,112,54,112,54,112,54,112,54,112,54,112,54,128,54,128,54,128,54,128,54,128,54,128,54,128,54,128,54,144,54,144,54,144,54,144,54,144,54,144,54,144,54,144,54,160,54,160,54,160,54,160,54,160,54,160,54,160,54,160,54,176,54,176,54,176,54,176,54,176,54,176,54,176,54,176,54,192,54,192,54,192,54,192,54,192,54,192,54,192,54,192,54,208,54,208,54,208,54,208,54,208,54,208,54,208,54,208,54,224,54,224,54,224,54,224,54,224,54,224,54,224,54,224,54,240,54,240,54,240,54,240,54,240,54,240,54,240,54,240,54,0,55,0,55,0,55,0,55,0,55,0,55,0,55,0,55,16,55,16,55,16,55,16,55,16,55,16,55,16,55,16,55,32,55,32,55,32,55,32,55,32,55,32,55,32,55,32,55,48,55,48,55,48,55,48,55,48,55,48,55,48,55,48,55,64,55,64,55,64,55,64,55,64,55,64,55,64,55,64,55,80,55,80,55,80,55,80,55,80,55,80,55,80,55,80,55,96,55,96,55,96,55,96,55,96,55,96,55,96,55,96,55,112,55,112,55,112,55,112,55,112,55,112,55,112,55,112,55,128,55,128,55,128,55,128,55,128,55,128,55,128,55,128,55,144,55,144,55,144,55,144,55,144,55,144,55,144,55,144,55,160,55,160,55,160,55,160,55,160,55,160,55,160,55,160,55,176,55,176,55,176,55,176,55,176,55,176,55,176,55,176,55,192,55,192,55,192,55,192,55,192,55,192,55,192,55,192,55,208,55,208,55,208,55,208,55,208,55,208,55,208,55,208,55,224,55,224,55,224,55,224,55,224,55,224,55,224,55,224,55,240,55,240,55,240,55,240,55,240,55,240,55,240,55,240,55,0,56,0,56,0,56,0,56,0,56,0,56,0,56,0,56,16,56,16,56,16,56,16,56,16,56,16,56,16,56,16,56,32,56,32,56,32,56,32,56,32,56,32,56,32,56,32,56,48,56,48,56,48,56,48,56,48,56,48,56,48,56,48,56,64,56,64,56,64,56,64,56,64,56,64,56,64,56,64,56,80,56,80,56,80,56,80,56,80,56,80,56,80,56,80,56,96,56,96,56,96,56,96,56,96,56,96,56,96,56,96,56,112,56,112,56,112,56,112,56,112,56,112,56,112,56,112,56,128,56,128,56,128,56,128,56,128,56,128,56,128,56,128,56,144,56,144,56,144,56,144,56,144,56,144,56,144,56,144,56,160,56,160,56,160,56,160,56,160,56,160,56,160,56,160,56,176,56,176,56,176,56,176,56,176,56,176,56,176,56,176,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,56,192,56,192,56,192,56,192,56,192,56,192,56,192,56,80,60,80,60,80,60,80,60,80,60,80,60,80,60,80,60,80,58,96,58,112,58,128,58,144,58,160,58,176,58,192,58,224,61,240,61,0,62,16,62,32,62,48,62,64,62,80,62,208,58,224,58,240,58,0,59,16,59,32,59,48,59,64,59,96,62,112,62,128,62,144,62,160,62,176,62,192,62,208,62,80,59,96,59,112,59,128,59,144,59,160,59,176,59,192,59,224,62,240,62,0,63,16,63,32,63,48,63,64,63,80,63,208,59,224,59,240,59,0,60,16,60,32,60,48,60,64,60,96,63,112,63,128,63,144,63,160,63,176,63,192,63,208,63,16,57,32,57,48,57,64,57,80,57,64,57,48,57,32,57,160,60,176,60,192,60,208,60,224,60,208,60,192,60,176,60,96,57,112,57,128,57,144,57,160,57,144,57,128,57,112,57,240,60,0,61,16,61,32,61,48,61,32,61,16,61,0,61,176,57,192,57,208,57,224,57,240,57,224,57,208,57,192,57,64,61,80,61,96,61,112,61,128,61,112,61,96,61,80,61,0,58,16,58,32,58,48,58,64,58,48,58,32,58,16,58,144,61,160,61,176,61,192,61,208,61,192,61,176,61,160,61,208,56,208,56,208,56,208,56,208,56,208,56,208,56,208,56,96,60,96,60,96,60,96,60,96,60,96,60,96,60,96,60,224,56,224,56,224,56,224,56,224,56,224,56,224,56,224,56,112,60,112,60,112,60,112,60,112,60,112,60,112,60,112,60,240,56,240,56,240,56,240,56,240,56,240,56,240,56,240,56,128,60,128,60,128,60,128,60,128,60,128,60,128,60,128,60,0,57,0,57,0,57,0,57,0,57,0,57,0,57,0,57,144,60,144,60,144,60,144,60,144,60,144,60,144,60,144,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,65,144,65,160,65,176,65,192,65,208,65,224,65,240,65,0,66,16,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,240,63,0,64,16,64,32,64,48,64,64,64,80,64,96,64,112,64,128,64,144,64,160,64,176,64,192,64,208,64,224,64,240,64,0,65,16,65,32,65,48,65,64,65,80,65,96,65,112,65,0,0,0,0,0,0,0,0,0,0,0,0,224,63,240,63,0,64,16,64,32,64,48,64,64,64,80,64,96,64,112,64,128,64,144,64,160,64,176,64,192,64,208,64,224,64,240,64,0,65,16,65,32,65,48,65,64,65,80,65,96,65,112,65,0,0,0,0,0,0,0,0,0,0,115,99,114,101,101,110,80,105,120,109,97,112,0,111,98,106,101,99,116,80,105,120,109,97,112,0,115,99,111,114,101,80,105,120,109,97,112,0,115,112,114,105,116,101,80,105,120,109,97,112,0,99,116,120,0,119,104,105,116,101,0,114,101,100,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,99,116,105,111,110,58,32,37,100,10,0,109,101,110,117,95,111,112,116,105,111,110,58,32,37,100,10,0,32,116,105,109,101,32,37,48,52,100,32,32,32,100,105,97,109,111,110,100,115,32,37,48,52,100,32,32,32,115,99,111,114,101,32,37,48,52,100,32,0,32,32,32,32,114,101,108,97,120,32,32,32,32,0,32,32,102,111,114,103,101,116,32,105,116,32,32,0,102,105,110,100,32,116,104,101,32,101,120,105,116,0,32,32,32,32,32,120,49,49,32,101,109,101,114,97,108,100,32,109,105,110,101,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,107,108,97,117,115,32,104,101,105,110,122,32,118,111,108,107,101,114,32,119,101,114,116,105,99,104,0,32,32,110,111,32,111,110,101,32,105,110,99,32,32,114,117,112,112,101,108,119,97,114,101,32,32,0,32,32,32,32,32,100,97,118,105,100,32,116,114,105,116,115,99,104,101,114,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,112,108,97,121,32,109,105,110,101,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,99,104,97,110,103,101,32,110,97,109,101,115,32,32,32,32,32,32,32,0,32,32,32,32,32,99,104,97,110,103,101,32,107,101,121,98,111,97,114,100,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,113,117,105,116,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,115,105,110,103,108,101,32,112,108,97,121,101,114,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,116,101,97,109,119,111,114,107,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,37,45,50,100,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,110,111,32,99,97,118,101,115,32,102,111,117,110,100,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,108,101,118,101,108,32,37,45,52,100,32,32,32,32,32,32,32,0,32,32,112,108,97,121,101,100,32,32,32,32,32,115,99,111,114,101,32,32,32,119,111,110,32,32,0,32,32,32,32,37,52,100,32,32,37,56,100,32,32,37,52,100,32,32,0,101,109,101,114,97,108,100,0,119,43,98,0,37,115,91,37,115,93,32,37,115,58,32,37,115,10,0,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,99,97,118,101,32,102,105,108,101,0,46,101,109,99,114,99,0,37,115,37,115,0,99,97,118,101,0,110,111,110,101,0,47,100,101,118,47,105,110,112,117,116,47,106,115,48,0,47,100,101,118,47,105,110,112,117,116,47,106,115,49,0,47,100,101,118,47,106,111,121,48,0,47,100,101,118,47,106,111,121,49,0,47,100,101,118,47,97,117,100,105,111,0,47,100,101,118,47,100,115,112,0,100,101,102,97,117,108,116,0,114,0,37,115,91,37,115,93,32,37,115,58,32,37,115,58,32,37,115,10,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,99,111,110,102,105,103,32,102,105,108,101,0,61,13,10,0,13,10,0,97,117,100,105,111,0,106,111,121,115,116,105,99,107,0,107,101,121,98,111,97,114,100,0,110,97,109,101,0,115,101,108,101,99,116,0,102,105,108,101,0,119,0,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,99,111,110,102,105,103,32,102,105,108,101,0,99,97,118,101,61,37,115,10,0,97,117,100,105,111,61,37,115,10,0,106,111,121,115,116,105,99,107,61,37,115,10,0,107,101,121,98,111,97,114,100,61,37,115,10,0,110,97,109,101,61,37,115,10,0,115,101,108,101,99,116,61,37,100,10,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,99,111,110,102,105,103,32,102,105,108,101,0,102,97,105,108,101,100,32,116,111,32,102,108,117,115,104,32,99,111,110,102,105,103,32,102,105,108,101,0,47,0,42,46,42,0,37,115,37,115,37,115,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,99,97,118,101,32,100,105,114,101,99,116,111,114,121,0,114,98,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,99,97,118,101,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,99,97,118,101,0,102,97,105,108,101,100,32,116,111,32,117,110,99,111,109,112,114,101,115,115,32,99,97,118,101,0,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,116,101,109,112,111,114,97,114,121,32,99,97,118,101,32,102,105,108,101,0,102,97,105,108,101,100,32,116,111,32,99,108,111,115,101,32,99,97,118,101,0,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,108,101,118,101,108,0,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,108,101,118,101,108,0,88,49,49,32,69,109,101,114,97,108,100,32,77,105,110,101,32,194,169,32,68,97,118,105,100,32,84,114,105,116,115,99,104,101,114,10,0,69,77,83,99,114,105,112,116,101,110,32,112,111,114,116,32,98,121,32,83,116,101,102,102,101,115,116,10,0,45,100,58,103,58,105,102,99,58,97,58,106,58,0,10,117,115,97,103,101,58,32,101,109,101,114,97,108,100,32,91,111,112,116,105,111,110,115,93,10,0,9,45,100,32,91,97,114,103,93,32,32,32,32,100,105,115,112,108,97,121,10,0,9,45,103,32,91,97,114,103,93,32,32,32,32,103,101,111,109,101,116,114,121,10,0,9,45,105,32,32,32,32,32,32,32,32,32,32,105,110,115,116,97,108,108,32,99,111,108,111,117,114,109,97,112,10,0,9,45,102,32,32,32,32,32,32,32,32,32,32,102,117,108,108,32,115,99,114,101,101,110,10,0,9,45,99,32,91,46,46,46,93,32,32,32,32,112,97,116,104,115,32,116,111,32,115,101,97,114,99,104,32,102,111,114,32,99,97,118,101,115,10,0,9,45,97,32,91,46,46,46,93,32,32,32,32,97,117,100,105,111,32,100,101,118,105,99,101,115,10,0,9,45,106,32,91,46,46,46,93,32,32,32,32,106,111,121,115,116,105,99,107,32,100,101,118,105,99,101,115,10,0,91,46,46,46,93,32,105,115,32,97,32,108,105,115,116,32,111,102,32,111,110,101,32,111,114,32,109,111,114,101,32,97,114,103,117,109,101,110,116,115,10,0,37,115,58,32,117,110,101,120,112,101,99,116,101,100,32,108,105,115,116,32,111,102,32,97,114,103,117,109,101,110,116,115,32,45,45,32,37,99,10,0,37,115,58,32,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,10,0,83,101,101,100,58,32,37,100,10,0,79,112,101,110,105,110,103,32,70,105,108,101,10,0,79,112,101,110,105,110,103,32,68,105,115,112,108,97,121,10,0,79,112,101,110,105,110,103,32,75,101,121,98,111,97,114,100,10,0,79,112,101,110,105,110,103,32,74,111,121,115,116,105,99,107,10,0,79,112,101,110,105,110,103,32,65,117,100,105,111,10,0,79,112,101,110,105,110,103,32,83,99,114,101,101,110,10,0,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,115,116,97,116,101,0,101,110,100,32,111,102,32,102,105,108,101,0,110,111,116,32,97,32,100,101,102,108,97,116,101,100,32,103,122,105,112,32,102,105,108,101,0,110,97,109,101,32,116,111,111,32,108,111,110,103,0,99,111,109,109,101,110,116,32,116,111,111,32,108,111,110,103,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,98,97,100,32,104,101,97,100,101,114,32,116,114,101,101,0,98,97,100,32,116,114,101,101,32,99,111,100,101,0,98,97,100,32,116,114,101,101,32,108,101,110,103,116,104,0,98,97,100,32,99,104,97,114,97,99,116,101,114,32,116,114,101,101,0,98,97,100,32,115,116,114,105,110,103,32,116,114,101,101,0,42,42,42,32,66,85,71,58,32,102,105,120,101,100,32,99,104,97,114,97,99,116,101,114,32,116,114,101,101,0,42,42,42,32,66,85,71,58,32,102,105,120,101,100,32,115,116,114,105,110,103,32,116,114,101,101,0,98,97,100,32,98,108,111,99,107,32,116,121,112,101,0,98,97,100,32,115,116,114,105,110,103,32,108,101,110,103,116,104,32,99,111,100,101,0,98,97,100,32,115,116,114,105,110,103,32,112,111,105,110,116,101,114,32,99,111,100,101,0,98,97,100,32,115,116,114,105,110,103,32,112,111,105,110,116,101,114,0,98,97,100,32,99,104,101,99,107,115,117,109,0,98,97,100,32,102,105,108,101,32,108,101,110,103,116,104,0,42,42,42,32,66,85,71,58,32,104,117,102,102,109,97,110,32,116,97,98,108,101,0,104,117,102,102,109,97,110,32,116,114,101,101,32,111,118,101,114,102,108,111,119,0,104,117,102,102,109,97,110,32,116,114,101,101,32,117,110,100,101,114,102,108,111,119,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,58,32,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,114,119,97,0,47,116,109,112,47,116,109,112,102,105,108,101,95,88,88,88,88,88,88,0,119,43,0,88,88,88,88,88,88,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

  function _js_quit(){
  		window.location.href = "http://www.emeraldmines.net";
  	}

   

  function _js_fillRect(color, x, y, w, h){
  		window.js_log("fillRect", Array.prototype.slice.call(arguments).join(","));
  		var c = window.ctx;
  		c.fillStyle = Pointer_stringify(color);
  		c.fillRect(x,y,w,h);
  	}

  function _js_blit(source,srcX,srcY,srcW,srcH,destination,dstX,dstY,dstW,dstH){
  		window.js_log("blit", Array.prototype.slice.call(arguments).join(","));
  		window[Pointer_stringify(destination)].drawImage(window[Pointer_stringify(source) + "Canvas"],srcX,srcY,srcW,srcH,dstX,dstY,dstW,dstH);
  
  	}

  function ___wait() {}

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _js_drawMenu() {
  		//Sprites.drawMenu();
  	}

  function _js_drawGameScreen(x,y,w,h){
  		//window.js_log("drawGameScreen", Array.prototype.slice.call(arguments).join(","));
  
  		var c = window.ctx;
  		c.fillStyle = "black";
  		c.fillRect(0,0,w,h);
  
  		c.drawImage(window.screenPixmapCanvas,x,y,w,h,0,0,w,h);
  		c.drawImage(window.scorePixmapCanvas,0,0);
  	}

  function _js_createCanvas(canvasName,width,height){
  		console.log("create Canvas " + Pointer_stringify(canvasName),width,height);
  		var n = Pointer_stringify(canvasName);
  		var canvasName = n + "Canvas";
  		var canvas = document.createElement("canvas");
  		canvas.width = width;
  		canvas.height = height;
  
  		window[canvasName] = canvas;
  		window[n] = canvas.getContext("2d");
  		console.log(n + " created");
  
  		if (n == "objectPixmap"){
  			window[n].fillStyle = "rgba(0,0,0,0)";
  			window[n].fillRect(0,0,width,height);
  			Sprites.render();
  		}
  
  	}

  function _js_initScreen(w,h) {
  		console.log('initScreen: width: ' + w + ' height: ' + h);
  
  		var canvas = document.getElementById("canvas");
  		canvas.width = w;
  		canvas.height = h;
  
  		canvas.style.width = w + "px";
  		canvas.style.height = h + "px";
  
  		window.canvas = canvas;
  		window.ctx = canvas.getContext("2d");
  
  		window.js_counter =  {};
  		window.js_log = function(name,str){
  			/*
  				var c = window.js_counter[name] || 0;
  				if (c<100) console.log(name + " " + str);
  				c++;
  				window.js_counter[name] = c;
  			*/
  		};
  	}

  function ___lock() {}

  function ___unlock() {}

  function _js_playAudio(index){
  		Audio.playSample(index);
  	}

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

   

  function _js_clearRect(x,y,width,height){
  		window.js_log("clearRect", Array.prototype.slice.call(arguments).join(","));
  
  		var c = window.ctx;
  		c.fillStyle = "black";
  		c.fillRect(x,y,width,height);
  	}


  
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _js_initKeyboard(w,h) {
  		//console.log('init keyBoard');
  
  		window.keyBoardState = {};
  
  		document.addEventListener("keydown", function(e){
  			var keyCode = e.keyCode;
  			window.keyBoardState[keyCode] = 1;
  			//console.log("down " +  keyCode);
  		}, false);
  
  		document.addEventListener("keyup", function(e){
  			var keyCode = e.keyCode;
  			window.keyBoardState[keyCode] = 0;
  			//console.log("up " + keyCode);
  		}, false);
  
  	}

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

   

   

  function _js_getKey(keyCode){
  		//window.js_log("getKey", keyCode);
  		return window.keyBoardState[keyCode] || 0;
  	}

  function _js_menuClear() {
  		Sprites.drawMenu();
  	}

  function _js_printScore(str){
  		//window.js_log("printScore", Pointer_stringify(str));
  
  		var c = window.scorePixmap;
  		c.clearRect(0,0,640,16);
  		c.fillStyle = "rgba(0,0,0,0.5)";
  		c.fillRect(0,0,640,16);
  		c.font = '16px monospace';
  		c.fillStyle = "white";
  		var text = Pointer_stringify(str).toUpperCase();
  		c.fillText(text,140,13);
  	}

   

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "___syscall221": ___syscall221, "___syscall220": ___syscall220, "___lock": ___lock, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_js_quit": _js_quit, "_js_menuClear": _js_menuClear, "___syscall40": ___syscall40, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___wait": ___wait, "_clock_gettime": _clock_gettime, "_js_initScreen": _js_initScreen, "_js_blit": _js_blit, "___setErrNo": ___setErrNo, "_js_drawMenu": _js_drawMenu, "_emscripten_get_now": _emscripten_get_now, "___syscall195": ___syscall195, "_js_fillRect": _js_fillRect, "_js_getKey": _js_getKey, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_js_createCanvas": _js_createCanvas, "_js_printScore": _js_printScore, "_js_clearRect": _js_clearRect, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_js_playAudio": _js_playAudio, "___syscall10": ___syscall10, "_js_initKeyboard": _js_initKeyboard, "_js_drawGameScreen": _js_drawGameScreen, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___clock_gettime": ___clock_gettime, "_time": _time, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var ___syscall221=env.___syscall221;
  var ___syscall220=env.___syscall220;
  var ___lock=env.___lock;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _js_quit=env._js_quit;
  var _js_menuClear=env._js_menuClear;
  var ___syscall40=env.___syscall40;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___wait=env.___wait;
  var _clock_gettime=env._clock_gettime;
  var _js_initScreen=env._js_initScreen;
  var _js_blit=env._js_blit;
  var ___setErrNo=env.___setErrNo;
  var _js_drawMenu=env._js_drawMenu;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall195=env.___syscall195;
  var _js_fillRect=env._js_fillRect;
  var _js_getKey=env._js_getKey;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _js_createCanvas=env._js_createCanvas;
  var _js_printScore=env._js_printScore;
  var _js_clearRect=env._js_clearRect;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _js_playAudio=env._js_playAudio;
  var ___syscall10=env.___syscall10;
  var _js_initKeyboard=env._js_initKeyboard;
  var _js_drawGameScreen=env._js_drawGameScreen;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___clock_gettime=env.___clock_gettime;
  var _time=env._time;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _display_open() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2]|0;
 $1 = ($0*320)|0;
 $2 = HEAP32[3]|0;
 $3 = ($2*240)|0;
 _js_initScreen(($1|0),($3|0));
 return 0;
}
function _display_close() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _keyboard_open() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $2 = $0;
  $3 = ($2|0)<(2);
  if (!($3)) {
   break;
  }
  $1 = 0;
  while(1) {
   $4 = $1;
   $5 = ($4|0)<(6);
   if (!($5)) {
    break;
   }
   $6 = $1;
   $7 = (24 + ($6<<3)|0);
   $8 = $0;
   $9 = (($7) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $0;
   $12 = (16860 + (($11*24)|0)|0);
   $13 = $1;
   $14 = (($12) + ($13<<2)|0);
   HEAP32[$14>>2] = $10;
   $15 = $1;
   $16 = (($15) + 1)|0;
   $1 = $16;
  }
  $17 = $0;
  $18 = (($17) + 1)|0;
  $0 = $18;
 }
 _js_initKeyboard();
 STACKTOP = sp;return 0;
}
function _keyboard_read() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $3 = $0;
  $4 = ($3|0)<(2);
  if (!($4)) {
   break;
  }
  $1 = 0;
  while(1) {
   $5 = $1;
   $6 = ($5|0)<(6);
   $7 = $0;
   if (!($6)) {
    break;
   }
   $8 = (16860 + (($7*24)|0)|0);
   $9 = $1;
   $10 = (($8) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 511;
   $2 = $12;
   $13 = $2;
   $14 = (_js_getKey(($13|0))|0);
   $15 = $14&255;
   $16 = $0;
   $17 = (156118 + (($16*6)|0)|0);
   $18 = $1;
   $19 = (($17) + ($18)|0);
   HEAP8[$19>>0] = $15;
   $20 = $1;
   $21 = (($20) + 1)|0;
   $1 = $21;
  }
  $22 = (($7) + 1)|0;
  $0 = $22;
 }
 STACKTOP = sp;return;
}
function _keyboard_close() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _keyboard_to_keycode($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 512;
 $3 = $2;
 $4 = ($3|0)>=(512);
 $$ = $4 ? -1 : 512;
 $2 = $$;
 $5 = $2;
 STACKTOP = sp;return ($5|0);
}
function _joystick_open() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _joystick_close() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _audio_open() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _audio_write($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = ((($5)) + 44|0);
  $7 = $2;
  $8 = (($6) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = $2;
   _js_playAudio(($11|0));
  }
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 STACKTOP = sp;return;
}
function _audio_close() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _screen_open() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2]|0;
 $1 = ($0*656)|0;
 $2 = HEAP32[3]|0;
 $3 = ($2*496)|0;
 _js_createCanvas(((11756)|0),($1|0),($3|0));
 $4 = HEAP32[2]|0;
 $5 = ($4*544)|0;
 $6 = HEAP32[3]|0;
 $7 = $6<<9;
 _js_createCanvas(((11769)|0),($5|0),($7|0));
 $8 = HEAP32[2]|0;
 $9 = ($8*320)|0;
 $10 = HEAP32[3]|0;
 $11 = $10<<3;
 _js_createCanvas(((11782)|0),($9|0),($11|0));
 $12 = HEAP32[2]|0;
 $13 = $12<<4;
 $14 = HEAP32[3]|0;
 $15 = $14<<4;
 _js_createCanvas(((11794)|0),($13|0),($15|0));
 $16 = (_screen_write()|0);
 return ($16|0);
}
function _screen_write() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _screen_close() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _x11_game_clear() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2]|0;
 $1 = ($0*320)|0;
 $2 = HEAP32[3]|0;
 $3 = ($2*240)|0;
 _js_clearRect(0,0,($1|0),($3|0));
 return;
}
function _x11_game_scroll($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4|0) % 336)&-1;
 HEAP32[4227] = $5;
 $6 = $1;
 $7 = ((($6)) + 124|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8|0) % 256)&-1;
 HEAP32[4228] = $9;
 STACKTOP = sp;return;
}
function _x11_game_object($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $15 = HEAP32[4227]|0;
 $16 = (($15|0) / 16)&-1;
 $3 = $16;
 $17 = $1;
 $18 = ((($17)) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 $4 = $19;
 while(1) {
  $20 = $4;
  $21 = $1;
  $22 = ((($21)) + 112|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<=($23|0);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[4228]|0;
  $26 = (($25|0) / 16)&-1;
  $5 = $26;
  $27 = $1;
  $28 = ((($27)) + 108|0);
  $29 = HEAP32[$28>>2]|0;
  $6 = $29;
  while(1) {
   $30 = $6;
   $31 = $1;
   $32 = ((($31)) + 116|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30|0)<=($33|0);
   if (!($34)) {
    break;
   }
   $35 = $1;
   $36 = ((($35)) + 1372|0);
   $37 = $4;
   $38 = (($36) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $6;
   $41 = (($39) + ($40<<1)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (4572 + ($43<<4)|0);
   $45 = $1;
   $46 = ((($45)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($44) + ($47<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49 << 16 >> 16;
   $2 = $50;
   $51 = $3;
   $52 = (153576 + (($51*62)|0)|0);
   $53 = $5;
   $54 = (($52) + ($53<<1)|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55 << 16 >> 16;
   $57 = $2;
   $58 = ($56|0)!=($57|0);
   if ($58) {
    $59 = $2;
    $60 = $59&65535;
    $61 = $3;
    $62 = (153576 + (($61*62)|0)|0);
    $63 = $5;
    $64 = (($62) + ($63<<1)|0);
    HEAP16[$64>>1] = $60;
    $65 = $2;
    $66 = (($65|0) / 512)&-1;
    $67 = $66<<4;
    $68 = HEAP32[2]|0;
    $69 = Math_imul($67, $68)|0;
    $7 = $69;
    $70 = $2;
    $71 = (($70|0) % 512)&-1;
    $72 = HEAP32[3]|0;
    $73 = Math_imul($71, $72)|0;
    $8 = $73;
    $74 = $3;
    $75 = $74<<4;
    $76 = HEAP32[2]|0;
    $77 = Math_imul($75, $76)|0;
    $11 = $77;
    $78 = $5;
    $79 = $78<<4;
    $80 = HEAP32[3]|0;
    $81 = Math_imul($79, $80)|0;
    $12 = $81;
    $82 = HEAP32[2]|0;
    $83 = $82<<4;
    $9 = $83;
    $84 = HEAP32[3]|0;
    $85 = $84<<4;
    $10 = $85;
    $86 = $9;
    $13 = $86;
    $87 = $10;
    $14 = $87;
    $88 = $7;
    $89 = $8;
    $90 = $9;
    $91 = $10;
    $92 = $11;
    $93 = $12;
    $94 = $13;
    $95 = $14;
    _js_blit(((11769)|0),($88|0),($89|0),($90|0),($91|0),((11756)|0),($92|0),($93|0),($94|0),($95|0));
   }
   $96 = $5;
   $97 = (($96) + 1)|0;
   $5 = $97;
   $98 = $6;
   $99 = (($98) + 1)|0;
   $6 = $99;
  }
  $100 = $3;
  $101 = (($100) + 1)|0;
  $3 = $101;
  $102 = $4;
  $103 = (($102) + 1)|0;
  $4 = $103;
 }
 STACKTOP = sp;return;
}
function _x11_game_player($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = $0;
 $7 = 0;
 while(1) {
  $16 = $7;
  $17 = ($16|0)<(2);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = ((($18)) + 24|0);
  $20 = $7;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   $24 = $1;
   $25 = ((($24)) + 136|0);
   $26 = $7;
   $27 = (($25) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $3 = $28;
   $29 = $1;
   $30 = ((($29)) + 152|0);
   $31 = $7;
   $32 = (($30) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $4 = $33;
   $34 = $1;
   $35 = ((($34)) + 144|0);
   $36 = $7;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $5 = $38;
   $39 = $1;
   $40 = ((($39)) + 160|0);
   $41 = $7;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $6 = $43;
   $44 = $3;
   $45 = $1;
   $46 = ((($45)) + 120|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($44|0)>=($47|0);
   if ($48) {
    $49 = $4;
    $50 = $1;
    $51 = ((($50)) + 128|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($49|0)<=($52|0);
    if ($53) {
     $54 = $5;
     $55 = $1;
     $56 = ((($55)) + 124|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($54|0)>=($57|0);
     if ($58) {
      $59 = $6;
      $60 = $1;
      $61 = ((($60)) + 132|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($59|0)<=($62|0);
      if ($63) {
       $64 = $1;
       $65 = ((($64)) + 120|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = HEAP32[4227]|0;
       $68 = (($66) - ($67))|0;
       $69 = $3;
       $70 = (($69) - ($68))|0;
       $3 = $70;
       $71 = $1;
       $72 = ((($71)) + 120|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = HEAP32[4227]|0;
       $75 = (($73) - ($74))|0;
       $76 = $4;
       $77 = (($76) - ($75))|0;
       $4 = $77;
       $78 = $1;
       $79 = ((($78)) + 124|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = HEAP32[4228]|0;
       $82 = (($80) - ($81))|0;
       $83 = $5;
       $84 = (($83) - ($82))|0;
       $5 = $84;
       $85 = $1;
       $86 = ((($85)) + 124|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = HEAP32[4228]|0;
       $89 = (($87) - ($88))|0;
       $90 = $6;
       $91 = (($90) - ($89))|0;
       $6 = $91;
       $92 = $3;
       $93 = (($92|0) / 16)&-1;
       $94 = (153576 + (($93*62)|0)|0);
       $95 = $5;
       $96 = (($95|0) / 16)&-1;
       $97 = (($94) + ($96<<1)|0);
       HEAP16[$97>>1] = -1;
       $98 = $4;
       $99 = (($98|0) / 16)&-1;
       $100 = (153576 + (($99*62)|0)|0);
       $101 = $6;
       $102 = (($101|0) / 16)&-1;
       $103 = (($100) + ($102<<1)|0);
       HEAP16[$103>>1] = -1;
       $104 = $1;
       $105 = ((($104)) + 200|0);
       $106 = $7;
       $107 = (($105) + ($106<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (11084 + ($108<<5)|0);
       $110 = $7;
       $111 = (($109) + ($110<<4)|0);
       $112 = $1;
       $113 = ((($112)) + 32|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($111) + ($114<<1)|0);
       $116 = HEAP16[$115>>1]|0;
       $117 = $116 << 16 >> 16;
       $2 = $117;
       $118 = $2;
       $119 = (($118|0) / 512)&-1;
       $120 = $119<<4;
       $121 = HEAP32[2]|0;
       $122 = Math_imul($120, $121)|0;
       $8 = $122;
       $123 = $2;
       $124 = (($123|0) % 512)&-1;
       $125 = HEAP32[3]|0;
       $126 = Math_imul($124, $125)|0;
       $9 = $126;
       $127 = $3;
       $128 = HEAP32[2]|0;
       $129 = Math_imul($127, $128)|0;
       $12 = $129;
       $130 = $5;
       $131 = HEAP32[3]|0;
       $132 = Math_imul($130, $131)|0;
       $13 = $132;
       $133 = HEAP32[2]|0;
       $134 = $133<<4;
       $10 = $134;
       $135 = HEAP32[3]|0;
       $136 = $135<<4;
       $11 = $136;
       $137 = $10;
       $14 = $137;
       $138 = $11;
       $15 = $138;
       $139 = $8;
       $140 = $9;
       $141 = $10;
       $142 = $11;
       $143 = $12;
       $144 = $13;
       $145 = $14;
       $146 = $15;
       _js_blit(((11769)|0),($139|0),($140|0),($141|0),($142|0),((11756)|0),($143|0),($144|0),($145|0),($146|0));
      }
     }
    }
   }
  }
  $147 = $7;
  $148 = (($147) + 1)|0;
  $7 = $148;
 }
 STACKTOP = sp;return;
}
function _x11_game_score($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _x11_game_to_screen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4227]|0;
 $1 = HEAP32[2]|0;
 $2 = Math_imul($0, $1)|0;
 $3 = HEAP32[4228]|0;
 $4 = HEAP32[3]|0;
 $5 = Math_imul($3, $4)|0;
 $6 = HEAP32[2]|0;
 $7 = ($6*320)|0;
 $8 = HEAP32[3]|0;
 $9 = ($8*240)|0;
 _js_drawGameScreen(($2|0),($5|0),($7|0),($9|0));
 return;
}
function _x11_score_clear() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2]|0;
 $1 = ($0*320)|0;
 $2 = HEAP32[3]|0;
 $3 = $2<<3;
 _js_clearRect(0,0,($1|0),($3|0));
 return;
}
function _x11_score_print($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _js_printScore(($2|0));
 STACKTOP = sp;return;
}
function _x11_menu_clear() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _js_menuClear();
 return;
}
function _x11_menu_print($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $3;
 $15 = ($14|0)>(6);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $6 = 0;
 $16 = $3;
 $17 = $16<<4;
 $18 = HEAP32[3]|0;
 $19 = Math_imul($17, $18)|0;
 $7 = $19;
 $20 = HEAP32[2]|0;
 $21 = ($20*320)|0;
 $8 = $21;
 $22 = HEAP32[3]|0;
 $23 = $22<<4;
 $9 = $23;
 $5 = 0;
 while(1) {
  $24 = $5;
  $25 = ($24|0)<(26);
  if (!($25)) {
   break;
  }
  $26 = $2;
  $27 = $5;
  $28 = (($26) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = $30 & 127;
  $32 = (11500 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $4 = $34;
  $35 = $4;
  $36 = (($35|0) / 512)&-1;
  $37 = $36<<4;
  $38 = HEAP32[2]|0;
  $39 = Math_imul($37, $38)|0;
  $6 = $39;
  $40 = $4;
  $41 = (($40|0) % 512)&-1;
  $42 = HEAP32[3]|0;
  $43 = Math_imul($41, $42)|0;
  $7 = $43;
  $44 = HEAP32[2]|0;
  $45 = $44<<4;
  $8 = $45;
  $46 = HEAP32[3]|0;
  $47 = $46<<4;
  $9 = $47;
  $48 = $5;
  $49 = ($48*12)|0;
  $50 = (($49) + 4)|0;
  $51 = HEAP32[2]|0;
  $52 = Math_imul($50, $51)|0;
  $10 = $52;
  $53 = $3;
  $54 = $53<<4;
  $55 = HEAP32[3]|0;
  $56 = Math_imul($54, $55)|0;
  $11 = $56;
  $57 = $8;
  $12 = $57;
  $58 = $9;
  $13 = $58;
  $59 = $6;
  $60 = ($59|0)>(0);
  if ($60) {
   $61 = $6;
   $62 = $7;
   $63 = $8;
   $64 = $9;
   $65 = $10;
   $66 = $11;
   $67 = $12;
   $68 = $13;
   _js_blit(((11769)|0),($61|0),($62|0),($63|0),($64|0),((11807)|0),($65|0),($66|0),($67|0),($68|0));
  }
  $69 = $5;
  $70 = (($69) + 1)|0;
  $5 = $70;
 }
 STACKTOP = sp;return;
}
function _x11_menu_ants($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $18 = $3;
 $7 = $18;
 $19 = $4;
 $20 = (($19) + 1)|0;
 $8 = $20;
 $21 = $5;
 $22 = $21<<4;
 $10 = $22;
 $23 = $5;
 $24 = (($23) + 1)|0;
 $25 = $24<<4;
 $11 = $25;
 $26 = HEAP32[4229]|0;
 $27 = (($26) + 1)|0;
 $28 = (($27|0) % 16)&-1;
 HEAP32[4229] = $28;
 $29 = HEAP32[4229]|0;
 $12 = $29;
 $30 = $7;
 $6 = $30;
 while(1) {
  $31 = $6;
  $32 = $8;
  $33 = ($31|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $12;
  $35 = (($34|0) % 8)&-1;
  $36 = (8 - ($35))|0;
  $13 = $36;
  $37 = $13;
  $38 = $8;
  $39 = $6;
  $40 = (($38) - ($39))|0;
  $41 = ($37|0)>($40|0);
  if ($41) {
   $42 = $8;
   $43 = $6;
   $44 = (($42) - ($43))|0;
   $13 = $44;
  }
  $45 = $6;
  $46 = HEAP32[2]|0;
  $47 = Math_imul($45, $46)|0;
  $14 = $47;
  $48 = $13;
  $49 = HEAP32[2]|0;
  $50 = Math_imul($48, $49)|0;
  $16 = $50;
  $51 = $10;
  $52 = HEAP32[3]|0;
  $53 = Math_imul($51, $52)|0;
  $15 = $53;
  $54 = HEAP32[3]|0;
  $55 = $54;
  $17 = $55;
  $56 = $12;
  $57 = (($56|0) / 8)&-1;
  $58 = (($57|0) % 2)&-1;
  $59 = ($58|0)!=(0);
  $60 = $59 ? 11811 : 11817;
  $61 = $60;
  $62 = $14;
  $63 = $15;
  $64 = $16;
  $65 = $17;
  _js_fillRect(($61|0),($62|0),($63|0),($64|0),($65|0));
  $66 = $13;
  $67 = $12;
  $68 = (($67) + ($66))|0;
  $12 = $68;
  $69 = $13;
  $70 = $6;
  $71 = (($70) + ($69))|0;
  $6 = $71;
 }
 $72 = $10;
 $9 = $72;
 while(1) {
  $73 = $9;
  $74 = $11;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $12;
  $77 = (($76|0) % 8)&-1;
  $78 = (8 - ($77))|0;
  $13 = $78;
  $79 = $13;
  $80 = $11;
  $81 = $9;
  $82 = (($80) - ($81))|0;
  $83 = ($79|0)>($82|0);
  if ($83) {
   $84 = $11;
   $85 = $9;
   $86 = (($84) - ($85))|0;
   $13 = $86;
  }
  $87 = $8;
  $88 = (($87) - 1)|0;
  $89 = HEAP32[2]|0;
  $90 = Math_imul($88, $89)|0;
  $14 = $90;
  $91 = HEAP32[2]|0;
  $92 = $91;
  $16 = $92;
  $93 = $9;
  $94 = HEAP32[3]|0;
  $95 = Math_imul($93, $94)|0;
  $15 = $95;
  $96 = $13;
  $97 = HEAP32[3]|0;
  $98 = Math_imul($96, $97)|0;
  $17 = $98;
  $99 = $12;
  $100 = (($99|0) / 8)&-1;
  $101 = (($100|0) % 2)&-1;
  $102 = ($101|0)!=(0);
  $103 = $102 ? 11811 : 11817;
  $104 = $103;
  $105 = $14;
  $106 = $15;
  $107 = $16;
  $108 = $17;
  _js_fillRect(($104|0),($105|0),($106|0),($107|0),($108|0));
  $109 = $13;
  $110 = $12;
  $111 = (($110) + ($109))|0;
  $12 = $111;
  $112 = $13;
  $113 = $9;
  $114 = (($113) + ($112))|0;
  $9 = $114;
 }
 $115 = $8;
 $6 = $115;
 while(1) {
  $116 = $6;
  $117 = $7;
  $118 = ($116|0)>($117|0);
  if (!($118)) {
   break;
  }
  $119 = $12;
  $120 = (($119|0) % 8)&-1;
  $121 = (8 - ($120))|0;
  $13 = $121;
  $122 = $13;
  $123 = $6;
  $124 = $7;
  $125 = (($123) - ($124))|0;
  $126 = ($122|0)>($125|0);
  if ($126) {
   $127 = $6;
   $128 = $7;
   $129 = (($127) - ($128))|0;
   $13 = $129;
  }
  $130 = $6;
  $131 = $13;
  $132 = (($130) - ($131))|0;
  $133 = HEAP32[2]|0;
  $134 = Math_imul($132, $133)|0;
  $14 = $134;
  $135 = $13;
  $136 = HEAP32[2]|0;
  $137 = Math_imul($135, $136)|0;
  $16 = $137;
  $138 = $11;
  $139 = (($138) - 1)|0;
  $140 = HEAP32[3]|0;
  $141 = Math_imul($139, $140)|0;
  $15 = $141;
  $142 = HEAP32[3]|0;
  $143 = $142;
  $17 = $143;
  $144 = $12;
  $145 = (($144|0) / 8)&-1;
  $146 = (($145|0) % 2)&-1;
  $147 = ($146|0)!=(0);
  $148 = $147 ? 11811 : 11817;
  $149 = $148;
  $150 = $14;
  $151 = $15;
  $152 = $16;
  $153 = $17;
  _js_fillRect(($149|0),($150|0),($151|0),($152|0),($153|0));
  $154 = $13;
  $155 = $12;
  $156 = (($155) + ($154))|0;
  $12 = $156;
  $157 = $13;
  $158 = $6;
  $159 = (($158) - ($157))|0;
  $6 = $159;
 }
 $160 = $11;
 $9 = $160;
 while(1) {
  $161 = $9;
  $162 = $10;
  $163 = ($161|0)>($162|0);
  if (!($163)) {
   break;
  }
  $164 = $12;
  $165 = (($164|0) % 8)&-1;
  $166 = (8 - ($165))|0;
  $13 = $166;
  $167 = $13;
  $168 = $9;
  $169 = $10;
  $170 = (($168) - ($169))|0;
  $171 = ($167|0)>($170|0);
  if ($171) {
   $172 = $9;
   $173 = $10;
   $174 = (($172) - ($173))|0;
   $13 = $174;
  }
  $175 = $7;
  $176 = HEAP32[2]|0;
  $177 = Math_imul($175, $176)|0;
  $14 = $177;
  $178 = HEAP32[2]|0;
  $179 = $178;
  $16 = $179;
  $180 = $9;
  $181 = $13;
  $182 = (($180) - ($181))|0;
  $183 = HEAP32[3]|0;
  $184 = Math_imul($182, $183)|0;
  $15 = $184;
  $185 = $13;
  $186 = HEAP32[3]|0;
  $187 = Math_imul($185, $186)|0;
  $17 = $187;
  $188 = $12;
  $189 = (($188|0) / 8)&-1;
  $190 = (($189|0) % 2)&-1;
  $191 = ($190|0)!=(0);
  $192 = $191 ? 11811 : 11817;
  $193 = $192;
  $194 = $14;
  $195 = $15;
  $196 = $16;
  $197 = $17;
  _js_fillRect(($193|0),($194|0),($195|0),($196|0),($197|0));
  $198 = $13;
  $199 = $12;
  $200 = (($199) + ($198))|0;
  $12 = $200;
  $201 = $13;
  $202 = $9;
  $203 = (($202) - ($201))|0;
  $9 = $203;
 }
 STACKTOP = sp;return;
}
function _x11_menu_to_screen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _js_drawMenu();
 return;
}
function _x11_quit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _js_quit();
 return;
}
function _logic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 75|0);
 $4 = ((($3)) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $1;
   $13 = ((($12)) + 16|0);
   HEAP32[$13>>2] = -1;
  }
 }
 $14 = $1;
 $15 = ((($14)) + 75|0);
 $16 = ((($15)) + 6|0);
 $17 = ((($16)) + 5|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $1;
  $22 = ((($21)) + 16|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $1;
   $27 = ((($26)) + 16|0);
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = -1;
  }
 }
 $29 = $1;
 $30 = ((($29)) + 44|0);
 ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;HEAP32[$30+16>>2]=0|0;HEAP32[$30+20>>2]=0|0;HEAP32[$30+24>>2]=0|0;HEAP16[$30+28>>1]=0|0;HEAP8[$30+30>>0]=0|0;
 $31 = $1;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $1;
  $36 = ((($35)) + 2668|0);
  $37 = $1;
  $38 = ((($37)) + 25132|0);
  _memcpy(($36|0),($38|0),22464)|0;
  $39 = $1;
  _Lplayer($39);
  $40 = $1;
  $41 = ((($40)) + 75|0);
  dest=$41; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 }
 $42 = $1;
 _Lposition($42);
 $43 = $1;
 $44 = ((($43)) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = $1;
  _Lbeast($47);
  $48 = $1;
  _Lcounter($48);
 }
 $49 = $1;
 $50 = ((($49)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(1);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $1;
 _Lameuba($53);
 $54 = $1;
 _Lexplode($54);
 STACKTOP = sp;return;
}
function _Lplayer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 8|0;
 $1 = $0;
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = ($9|0)<(2);
  if (!($10)) {
   break;
  }
  $11 = $5;
  $12 = $5;
  $13 = (($6) + ($12<<2)|0);
  HEAP32[$13>>2] = $11;
  $14 = $5;
  $15 = (($14) + 1)|0;
  $5 = $15;
 }
 $5 = 2;
 while(1) {
  $16 = $5;
  $17 = ($16|0)>(1);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*12421)|0;
  $21 = (($20) + 1)|0;
  $22 = $1;
  HEAP32[$22>>2] = $21;
  $23 = $5;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 65535;
  $27 = Math_imul($23, $26)|0;
  $28 = $27 >> 16;
  $7 = $28;
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
  $31 = (($6) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $8 = $32;
  $33 = $7;
  $34 = (($6) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($6) + ($36<<2)|0);
  HEAP32[$37>>2] = $35;
  $38 = $8;
  $39 = $7;
  $40 = (($6) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
 }
 $4 = 0;
 while(1) {
  $41 = $4;
  $42 = ($41|0)<(2);
  $43 = $1;
  if (!($42)) {
   break;
  }
  $44 = ((($43)) + 184|0);
  $45 = $4;
  $46 = (($44) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $2 = $47;
  $48 = $1;
  $49 = ((($48)) + 192|0);
  $50 = $4;
  $51 = (($49) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $3 = $52;
  $53 = $2;
  $54 = $1;
  $55 = ((($54)) + 88|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)<($56|0);
  if ($57) {
   $58 = $1;
   $59 = ((($58)) + 36|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $2;
   $62 = (($61) + ($60))|0;
   $2 = $62;
  }
  $63 = $2;
  $64 = $1;
  $65 = ((($64)) + 96|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)>($66|0);
  if ($67) {
   $68 = $1;
   $69 = ((($68)) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $2;
   $72 = (($71) - ($70))|0;
   $2 = $72;
  }
  $73 = $2;
  $74 = $1;
  $75 = ((($74)) + 168|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  HEAP32[$77>>2] = $73;
  $78 = $3;
  $79 = $1;
  $80 = ((($79)) + 176|0);
  $81 = $4;
  $82 = (($80) + ($81<<2)|0);
  HEAP32[$82>>2] = $78;
  $83 = $2;
  $84 = $1;
  $85 = ((($84)) + 184|0);
  $86 = $4;
  $87 = (($85) + ($86<<2)|0);
  HEAP32[$87>>2] = $83;
  $88 = $3;
  $89 = $1;
  $90 = ((($89)) + 192|0);
  $91 = $4;
  $92 = (($90) + ($91<<2)|0);
  HEAP32[$92>>2] = $88;
  $93 = $1;
  $94 = ((($93)) + 24|0);
  $95 = $4;
  $96 = (($94) + ($95<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0);
  if (!($98)) {
   $99 = $1;
   $100 = ((($99)) + 1372|0);
   $101 = $2;
   $102 = (($100) + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $3;
   $105 = (($103) + ($104<<1)|0);
   $106 = HEAP16[$105>>1]|0;
   $107 = $106 << 16 >> 16;
   $108 = ($107|0)==(11);
   if ($108) {
    $109 = $1;
    $110 = ((($109)) + 1372|0);
    $111 = $2;
    $112 = (($110) + ($111<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $3;
    $115 = (($113) + ($114<<1)|0);
    HEAP16[$115>>1] = 406;
    $116 = $1;
    $117 = ((($116)) + 1804|0);
    $118 = $2;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $3;
    $122 = (($120) + ($121<<1)|0);
    HEAP16[$122>>1] = 406;
   }
  }
  $123 = $4;
  $124 = (($123) + 1)|0;
  $4 = $124;
 }
 _Lplayer_check($43);
 $5 = 0;
 while(1) {
  $125 = $5;
  $126 = ($125|0)<(2);
  if (!($126)) {
   break;
  }
  $127 = $5;
  $128 = (($6) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  $4 = $129;
  $130 = $1;
  $131 = ((($130)) + 24|0);
  $132 = $4;
  $133 = (($131) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ($134|0)!=(0);
  if (!($135)) {
   $136 = $1;
   $137 = ((($136)) + 16|0);
   $138 = $4;
   $139 = (($137) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)!=(0);
   if (!($141)) {
    $142 = $1;
    $143 = $4;
    _Lplayer_move($142,$143);
   }
  }
  $144 = $5;
  $145 = (($144) + 1)|0;
  $5 = $145;
 }
 $4 = 0;
 while(1) {
  $146 = $4;
  $147 = ($146|0)<(2);
  if (!($147)) {
   break;
  }
  $148 = $1;
  $149 = ((($148)) + 24|0);
  $150 = $4;
  $151 = (($149) + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0);
  if (!($153)) {
   $154 = $1;
   $155 = ((($154)) + 168|0);
   $156 = $4;
   $157 = (($155) + ($156<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $2 = $158;
   $159 = $1;
   $160 = ((($159)) + 176|0);
   $161 = $4;
   $162 = (($160) + ($161<<2)|0);
   $163 = HEAP32[$162>>2]|0;
   $3 = $163;
   $164 = $1;
   $165 = ((($164)) + 1372|0);
   $166 = $2;
   $167 = (($165) + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $3;
   $170 = (($168) + ($169<<1)|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $171 << 16 >> 16;
   $173 = ($172|0)==(406);
   if ($173) {
    $174 = $1;
    $175 = ((($174)) + 1372|0);
    $176 = $2;
    $177 = (($175) + ($176<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $3;
    $180 = (($178) + ($179<<1)|0);
    HEAP16[$180>>1] = 11;
    $181 = $1;
    $182 = ((($181)) + 1804|0);
    $183 = $2;
    $184 = (($182) + ($183<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $3;
    $187 = (($185) + ($186<<1)|0);
    HEAP16[$187>>1] = 11;
   }
  }
  $188 = $4;
  $189 = (($188) + 1)|0;
  $4 = $189;
 }
 $4 = 0;
 while(1) {
  $190 = $4;
  $191 = ($190|0)<(2);
  $192 = $1;
  if (!($191)) {
   break;
  }
  $193 = ((($192)) + 24|0);
  $194 = $4;
  $195 = (($193) + ($194<<2)|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)!=(0);
  if (!($197)) {
   $198 = $1;
   $199 = ((($198)) + 184|0);
   $200 = $4;
   $201 = (($199) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $2 = $202;
   $203 = $1;
   $204 = ((($203)) + 192|0);
   $205 = $4;
   $206 = (($204) + ($205<<2)|0);
   $207 = HEAP32[$206>>2]|0;
   $3 = $207;
   $208 = $1;
   $209 = ((($208)) + 1372|0);
   $210 = $2;
   $211 = (($209) + ($210<<2)|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $3;
   $214 = (($212) + ($213<<1)|0);
   $215 = HEAP16[$214>>1]|0;
   $216 = $215 << 16 >> 16;
   $217 = ($216|0)==(11);
   if ($217) {
    $218 = $1;
    $219 = ((($218)) + 1372|0);
    $220 = $2;
    $221 = (($219) + ($220<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $3;
    $224 = (($222) + ($223<<1)|0);
    HEAP16[$224>>1] = 406;
    $225 = $1;
    $226 = ((($225)) + 1804|0);
    $227 = $2;
    $228 = (($226) + ($227<<2)|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $3;
    $231 = (($229) + ($230<<1)|0);
    HEAP16[$231>>1] = 406;
   }
  }
  $232 = $4;
  $233 = (($232) + 1)|0;
  $4 = $233;
 }
 $234 = ((($192)) + 8|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<(0);
 if ($236) {
  $237 = $1;
  $238 = ((($237)) + 8|0);
  HEAP32[$238>>2] = 0;
 }
 $239 = $1;
 $240 = ((($239)) + 12|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)>(9999);
 if (!($242)) {
  STACKTOP = sp;return;
 }
 $243 = $1;
 $244 = ((($243)) + 12|0);
 HEAP32[$244>>2] = 9999;
 STACKTOP = sp;return;
}
function _Lposition($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(2);
  $7 = $1;
  if (!($6)) {
   break;
  }
  $8 = ((($7)) + 168|0);
  $9 = $4;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11<<4;
  $13 = $1;
  $14 = ((($13)) + 184|0);
  $15 = $4;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 168|0);
  $20 = $4;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($17) - ($22))|0;
  $24 = $23<<4;
  $25 = $1;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  $29 = Math_imul($24, $28)|0;
  $30 = (($29|0) / 8)&-1;
  $31 = (($12) + ($30))|0;
  $2 = $31;
  $32 = $1;
  $33 = ((($32)) + 176|0);
  $34 = $4;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36<<4;
  $38 = $1;
  $39 = ((($38)) + 192|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $1;
  $44 = ((($43)) + 176|0);
  $45 = $4;
  $46 = (($44) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($42) - ($47))|0;
  $49 = $48<<4;
  $50 = $1;
  $51 = ((($50)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  $54 = Math_imul($49, $53)|0;
  $55 = (($54|0) / 8)&-1;
  $56 = (($37) + ($55))|0;
  $3 = $56;
  $57 = $2;
  $58 = $1;
  $59 = ((($58)) + 136|0);
  $60 = $4;
  $61 = (($59) + ($60<<2)|0);
  HEAP32[$61>>2] = $57;
  $62 = $3;
  $63 = $1;
  $64 = ((($63)) + 144|0);
  $65 = $4;
  $66 = (($64) + ($65<<2)|0);
  HEAP32[$66>>2] = $62;
  $67 = $2;
  $68 = (($67) + 15)|0;
  $69 = $1;
  $70 = ((($69)) + 152|0);
  $71 = $4;
  $72 = (($70) + ($71<<2)|0);
  HEAP32[$72>>2] = $68;
  $73 = $3;
  $74 = (($73) + 15)|0;
  $75 = $1;
  $76 = ((($75)) + 160|0);
  $77 = $4;
  $78 = (($76) + ($77<<2)|0);
  HEAP32[$78>>2] = $74;
  $79 = $4;
  $80 = (($79) + 1)|0;
  $4 = $80;
 }
 $81 = ((($7)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0);
 if ($83) {
  $84 = $1;
  $85 = ((($84)) + 16|0);
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)==(0);
  if ($88) {
   $89 = $1;
   $90 = ((($89)) + 136|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $1;
   $93 = ((($92)) + 136|0);
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($91) + ($95))|0;
   $97 = (($96|0) / 2)&-1;
   $2 = $97;
   $98 = $1;
   $99 = ((($98)) + 144|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $1;
   $102 = ((($101)) + 144|0);
   $103 = ((($102)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($100) + ($104))|0;
   $106 = (($105|0) / 2)&-1;
   $3 = $106;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 do {
  if ((label|0) == 7) {
   $107 = $1;
   $108 = ((($107)) + 16|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(0);
   $111 = $1;
   if ($110) {
    $112 = ((($111)) + 136|0);
    $113 = HEAP32[$112>>2]|0;
    $2 = $113;
    $114 = $1;
    $115 = ((($114)) + 144|0);
    $116 = HEAP32[$115>>2]|0;
    $3 = $116;
    break;
   }
   $117 = ((($111)) + 16|0);
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($119|0)==(0);
   $121 = $1;
   $122 = ((($121)) + 136|0);
   if ($120) {
    $123 = ((($122)) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $2 = $124;
    $125 = $1;
    $126 = ((($125)) + 144|0);
    $127 = ((($126)) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $3 = $128;
    break;
   } else {
    $129 = HEAP32[$122>>2]|0;
    $2 = $129;
    $130 = $1;
    $131 = ((($130)) + 144|0);
    $132 = HEAP32[$131>>2]|0;
    $3 = $132;
    break;
   }
  }
 } while(0);
 $133 = $2;
 $134 = (($133) + 167)|0;
 $2 = $134;
 $135 = $3;
 $136 = (($135) + 127)|0;
 $3 = $136;
 $137 = $2;
 $138 = $1;
 $139 = ((($138)) + 96|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $140<<4;
 $142 = (($141) + 15)|0;
 $143 = ($137|0)>($142|0);
 if ($143) {
  $144 = $1;
  $145 = ((($144)) + 96|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $146<<4;
  $148 = (($147) + 15)|0;
  $2 = $148;
 }
 $149 = $3;
 $150 = $1;
 $151 = ((($150)) + 100|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $152<<4;
 $154 = (($153) + 15)|0;
 $155 = ($149|0)>($154|0);
 if ($155) {
  $156 = $1;
  $157 = ((($156)) + 100|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $158<<4;
  $160 = (($159) + 15)|0;
  $3 = $160;
 }
 $161 = $2;
 $162 = $1;
 $163 = ((($162)) + 88|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164<<4;
 $166 = (($165) + 320)|0;
 $167 = (($166) - 1)|0;
 $168 = ($161|0)<($167|0);
 if ($168) {
  $169 = $1;
  $170 = ((($169)) + 88|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $171<<4;
  $173 = (($172) + 320)|0;
  $174 = (($173) - 1)|0;
  $2 = $174;
 }
 $175 = $3;
 $176 = $1;
 $177 = ((($176)) + 92|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178<<4;
 $180 = (($179) + 240)|0;
 $181 = (($180) - 1)|0;
 $182 = ($175|0)<($181|0);
 if (!($182)) {
  $189 = $2;
  $190 = $1;
  $191 = ((($190)) + 128|0);
  HEAP32[$191>>2] = $189;
  $192 = $3;
  $193 = $1;
  $194 = ((($193)) + 132|0);
  HEAP32[$194>>2] = $192;
  $195 = $2;
  $196 = (($195|0) / 16)&-1;
  $197 = $1;
  $198 = ((($197)) + 112|0);
  HEAP32[$198>>2] = $196;
  $199 = $3;
  $200 = (($199|0) / 16)&-1;
  $201 = $1;
  $202 = ((($201)) + 116|0);
  HEAP32[$202>>2] = $200;
  $203 = $2;
  $204 = (($203) - 319)|0;
  $2 = $204;
  $205 = $3;
  $206 = (($205) - 239)|0;
  $3 = $206;
  $207 = $2;
  $208 = $1;
  $209 = ((($208)) + 120|0);
  HEAP32[$209>>2] = $207;
  $210 = $3;
  $211 = $1;
  $212 = ((($211)) + 124|0);
  HEAP32[$212>>2] = $210;
  $213 = $2;
  $214 = (($213|0) / 16)&-1;
  $215 = $1;
  $216 = ((($215)) + 104|0);
  HEAP32[$216>>2] = $214;
  $217 = $3;
  $218 = (($217|0) / 16)&-1;
  $219 = $1;
  $220 = ((($219)) + 108|0);
  HEAP32[$220>>2] = $218;
  STACKTOP = sp;return;
 }
 $183 = $1;
 $184 = ((($183)) + 92|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $185<<4;
 $187 = (($186) + 240)|0;
 $188 = (($187) - 1)|0;
 $3 = $188;
 $189 = $2;
 $190 = $1;
 $191 = ((($190)) + 128|0);
 HEAP32[$191>>2] = $189;
 $192 = $3;
 $193 = $1;
 $194 = ((($193)) + 132|0);
 HEAP32[$194>>2] = $192;
 $195 = $2;
 $196 = (($195|0) / 16)&-1;
 $197 = $1;
 $198 = ((($197)) + 112|0);
 HEAP32[$198>>2] = $196;
 $199 = $3;
 $200 = (($199|0) / 16)&-1;
 $201 = $1;
 $202 = ((($201)) + 116|0);
 HEAP32[$202>>2] = $200;
 $203 = $2;
 $204 = (($203) - 319)|0;
 $2 = $204;
 $205 = $3;
 $206 = (($205) - 239)|0;
 $3 = $206;
 $207 = $2;
 $208 = $1;
 $209 = ((($208)) + 120|0);
 HEAP32[$209>>2] = $207;
 $210 = $3;
 $211 = $1;
 $212 = ((($211)) + 124|0);
 HEAP32[$212>>2] = $210;
 $213 = $2;
 $214 = (($213|0) / 16)&-1;
 $215 = $1;
 $216 = ((($215)) + 104|0);
 HEAP32[$216>>2] = $214;
 $217 = $3;
 $218 = (($217|0) / 16)&-1;
 $219 = $1;
 $220 = ((($219)) + 108|0);
 HEAP32[$220>>2] = $218;
 STACKTOP = sp;return;
}
function _Lbeast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $5 = sp + 16|0;
 $1 = $0;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = $1;
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  $14 = $1;
  if (!($13)) {
   break;
  }
  $15 = ((($14)) + 88|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = (($16) + ($17))|0;
  $19 = $4;
  $20 = (($5) + ($19<<2)|0);
  HEAP32[$20>>2] = $18;
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 $23 = ((($14)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $4 = $24;
 while(1) {
  $25 = $4;
  $26 = ($25|0)>(1);
  $27 = $1;
  if (!($26)) {
   break;
  }
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28*12421)|0;
  $30 = (($29) + 1)|0;
  $31 = $1;
  HEAP32[$31>>2] = $30;
  $32 = $4;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 65535;
  $36 = Math_imul($32, $35)|0;
  $37 = $36 >> 16;
  $6 = $37;
  $38 = $4;
  $39 = (($38) + -1)|0;
  $4 = $39;
  $40 = (($5) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $7 = $41;
  $42 = $6;
  $43 = (($5) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $4;
  $46 = (($5) + ($45<<2)|0);
  HEAP32[$46>>2] = $44;
  $47 = $7;
  $48 = $6;
  $49 = (($5) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
 }
 $50 = ((($27)) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 $3 = $51;
 while(1) {
  $52 = $3;
  $53 = $1;
  $54 = ((($53)) + 100|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52|0)<=($55|0);
  if (!($56)) {
   break;
  }
  $4 = 0;
  while(1) {
   $57 = $4;
   $58 = $1;
   $59 = ((($58)) + 36|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($57|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $4;
   $63 = (($5) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $2 = $64;
   $65 = $1;
   $66 = ((($65)) + 1372|0);
   $67 = $2;
   $68 = (($66) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $3;
   $71 = (($69) + ($70<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72 << 16 >> 16;
   $74 = (72 + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $8 = $75;
   $76 = $8;
   $77 = ($76|0)!=(0|0);
   if ($77) {
    $78 = $8;
    $79 = $1;
    $80 = $2;
    $81 = $3;
    FUNCTION_TABLE_viii[$78 & 127]($79,$80,$81);
   }
   $82 = $4;
   $83 = (($82) + 1)|0;
   $4 = $83;
  }
  $84 = $3;
  $85 = (($84) + 1)|0;
  $3 = $85;
 }
 STACKTOP = sp;return;
}
function _Lcounter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 240|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 240|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
 } else {
  $10 = ((($6)) + 244|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 240|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = $1;
 $15 = ((($14)) + 248|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 $18 = $1;
 if ($17) {
  $19 = ((($18)) + 248|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[$19>>2] = $21;
 } else {
  $22 = ((($18)) + 252|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 248|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = $1;
 $27 = ((($26)) + 264|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 do {
  if ($29) {
   $30 = $1;
   $31 = ((($30)) + 256|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)>(0);
   $34 = $1;
   if ($33) {
    $35 = ((($34)) + 256|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + -1)|0;
    HEAP32[$35>>2] = $37;
    break;
   } else {
    $38 = ((($34)) + 268|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $1;
    $41 = ((($40)) + 256|0);
    HEAP32[$41>>2] = $39;
    break;
   }
  }
 } while(0);
 $42 = $1;
 $43 = ((($42)) + 320|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)>(0);
 if ($45) {
  $46 = $1;
  $47 = ((($46)) + 320|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + -1)|0;
  HEAP32[$47>>2] = $49;
 }
 $50 = $1;
 $51 = ((($50)) + 332|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)>(0);
 if ($53) {
  $54 = $1;
  $55 = ((($54)) + 332|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -1)|0;
  HEAP32[$55>>2] = $57;
 }
 $58 = $1;
 $59 = ((($58)) + 360|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)>(0);
 if ($61) {
  $62 = $1;
  $63 = ((($62)) + 360|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -1)|0;
  HEAP32[$63>>2] = $65;
  $66 = $1;
  $67 = ((($66)) + 44|0);
  $68 = ((($67)) + 21|0);
  HEAP8[$68>>0] = 1;
 }
 $69 = $1;
 $70 = ((($69)) + 376|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)>(0);
 if ($72) {
  $73 = $1;
  $74 = ((($73)) + 376|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + -1)|0;
  HEAP32[$74>>2] = $76;
 }
 $77 = $1;
 $78 = ((($77)) + 388|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $1;
  $82 = ((($81)) + 392|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)>(0);
  if ($84) {
   $85 = $1;
   $86 = ((($85)) + 392|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) + -1)|0;
   HEAP32[$86>>2] = $88;
   $89 = $1;
   $90 = ((($89)) + 44|0);
   $91 = ((($90)) + 20|0);
   HEAP8[$91>>0] = 1;
  }
 }
 $92 = $1;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0);
 if ($95) {
  label = 24;
 } else {
  $96 = $1;
  $97 = ((($96)) + 16|0);
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(0);
  if ($100) {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  $101 = $1;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)>(0);
  if ($104) {
   $105 = $1;
   $106 = ((($105)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + -1)|0;
   HEAP32[$106>>2] = $108;
   $109 = $1;
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)<=(100);
   if ($112) {
    $113 = $1;
    $114 = ((($113)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115|0) % 10)&-1;
    $117 = ($116|0)==(0);
    if ($117) {
     $118 = $1;
     $119 = ((($118)) + 44|0);
     $120 = ((($119)) + 2|0);
     HEAP8[$120>>0] = 1;
    }
   }
  }
 }
 $121 = $1;
 $122 = ((($121)) + 12|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)>(9999);
 if (!($124)) {
  STACKTOP = sp;return;
 }
 $125 = $1;
 $126 = ((($125)) + 12|0);
 HEAP32[$126>>2] = 9999;
 STACKTOP = sp;return;
}
function _Lameuba($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $1;
  $7 = ((($6)) + 236|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 88|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14*12421)|0;
  $16 = (($15) + 1)|0;
  $17 = $1;
  HEAP32[$17>>2] = $16;
  $18 = $1;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 65535;
  $24 = Math_imul($20, $23)|0;
  $25 = $24 >> 16;
  $26 = (($12) + ($25))|0;
  $2 = $26;
  $27 = $1;
  $28 = ((($27)) + 92|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31*12421)|0;
  $33 = (($32) + 1)|0;
  $34 = $1;
  HEAP32[$34>>2] = $33;
  $35 = $1;
  $36 = ((($35)) + 40|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $1;
  $39 = HEAP32[$38>>2]|0;
  $40 = $39 & 65535;
  $41 = Math_imul($37, $40)|0;
  $42 = $41 >> 16;
  $43 = (($29) + ($42))|0;
  $3 = $43;
  $44 = $1;
  $45 = ((($44)) + 1804|0);
  $46 = $2;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (($48) + ($49<<1)|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  L4: do {
   switch ($52|0) {
   case 305: case 29: case 24: case 14: case 13: case 12: case 11:  {
    $53 = $1;
    $54 = ((($53)) + 1804|0);
    $55 = $2;
    $56 = (($54) + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $3;
    $59 = (($58) - 1)|0;
    $60 = (($57) + ($59<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61 << 16 >> 16;
    switch ($62|0) {
    case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
     $63 = $1;
     $64 = ((($63)) + 1804|0);
     $65 = $2;
     $66 = (($64) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $3;
     $69 = (($67) + ($68<<1)|0);
     HEAP16[$69>>1] = 279;
     break;
    }
    default: {
    }
    }
    $70 = $1;
    $71 = ((($70)) + 1804|0);
    $72 = $2;
    $73 = (($72) + 1)|0;
    $74 = (($71) + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $3;
    $77 = (($75) + ($76<<1)|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78 << 16 >> 16;
    switch ($79|0) {
    case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
     $80 = $1;
     $81 = ((($80)) + 1804|0);
     $82 = $2;
     $83 = (($81) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $3;
     $86 = (($84) + ($85<<1)|0);
     HEAP16[$86>>1] = 279;
     break;
    }
    default: {
    }
    }
    $87 = $1;
    $88 = ((($87)) + 1804|0);
    $89 = $2;
    $90 = (($88) + ($89<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $3;
    $93 = (($92) + 1)|0;
    $94 = (($91) + ($93<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95 << 16 >> 16;
    switch ($96|0) {
    case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
     $97 = $1;
     $98 = ((($97)) + 1804|0);
     $99 = $2;
     $100 = (($98) + ($99<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $3;
     $103 = (($101) + ($102<<1)|0);
     HEAP16[$103>>1] = 279;
     break;
    }
    default: {
    }
    }
    $104 = $1;
    $105 = ((($104)) + 1804|0);
    $106 = $2;
    $107 = (($106) - 1)|0;
    $108 = (($105) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $3;
    $111 = (($109) + ($110<<1)|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = $112 << 16 >> 16;
    switch ($113|0) {
    case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
     break;
    }
    default: {
     break L4;
    }
    }
    $114 = $1;
    $115 = ((($114)) + 1804|0);
    $116 = $2;
    $117 = (($115) + ($116<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $3;
    $120 = (($118) + ($119<<1)|0);
    HEAP16[$120>>1] = 279;
    break;
   }
   default: {
   }
   }
  } while(0);
  $121 = $4;
  $122 = (($121) + 1)|0;
  $4 = $122;
 }
 STACKTOP = sp;return;
}
function _Lexplode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 while(1) {
  $7 = $3;
  $8 = $1;
  $9 = ((($8)) + 100|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = $1;
  $13 = ((($12)) + 88|0);
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
  while(1) {
   $15 = $2;
   $16 = $1;
   $17 = ((($16)) + 96|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($15|0)<=($18|0);
   if (!($19)) {
    break;
   }
   $20 = $1;
   $21 = ((($20)) + 1804|0);
   $22 = $2;
   $23 = (($21) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $3;
   $26 = (($24) + ($25<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   switch ($28|0) {
   case 1:  {
    $29 = $1;
    $30 = $2;
    $31 = $3;
    _Lboom_nine($29,$30,$31,0);
    break;
   }
   case 2:  {
    $32 = $1;
    $33 = $2;
    $34 = $3;
    _Lboom_bug($32,$33,$34);
    $35 = $1;
    $36 = $2;
    $37 = $3;
    _Lboom_nine($35,$36,$37,0);
    break;
   }
   case 3:  {
    $38 = $1;
    $39 = $2;
    $40 = $3;
    _Lboom_tank($38,$39,$40);
    $41 = $1;
    $42 = $2;
    $43 = $3;
    _Lboom_nine($41,$42,$43,0);
    break;
   }
   case 4:  {
    $44 = $1;
    $45 = ((($44)) + 396|0);
    $46 = $1;
    $47 = ((($46)) + 292|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($45) + (($48*18)|0)|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $1;
    $52 = ((($51)) + 2236|0);
    $53 = $2;
    $54 = (($53) - 1)|0;
    $55 = (($52) + ($54<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $3;
    $58 = (($57) - 1)|0;
    $59 = (($56) + ($58<<1)|0);
    HEAP16[$59>>1] = $50;
    $60 = $1;
    $61 = ((($60)) + 396|0);
    $62 = $1;
    $63 = ((($62)) + 292|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($61) + (($64*18)|0)|0);
    $66 = ((($65)) + 2|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $1;
    $69 = ((($68)) + 2236|0);
    $70 = $2;
    $71 = (($69) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $3;
    $74 = (($73) - 1)|0;
    $75 = (($72) + ($74<<1)|0);
    HEAP16[$75>>1] = $67;
    $76 = $1;
    $77 = ((($76)) + 396|0);
    $78 = $1;
    $79 = ((($78)) + 292|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($77) + (($80*18)|0)|0);
    $82 = ((($81)) + 4|0);
    $83 = HEAP16[$82>>1]|0;
    $84 = $1;
    $85 = ((($84)) + 2236|0);
    $86 = $2;
    $87 = (($86) + 1)|0;
    $88 = (($85) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $3;
    $91 = (($90) - 1)|0;
    $92 = (($89) + ($91<<1)|0);
    HEAP16[$92>>1] = $83;
    $93 = $1;
    $94 = ((($93)) + 396|0);
    $95 = $1;
    $96 = ((($95)) + 292|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($94) + (($97*18)|0)|0);
    $99 = ((($98)) + 6|0);
    $100 = HEAP16[$99>>1]|0;
    $101 = $1;
    $102 = ((($101)) + 2236|0);
    $103 = $2;
    $104 = (($103) - 1)|0;
    $105 = (($102) + ($104<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $3;
    $108 = (($106) + ($107<<1)|0);
    HEAP16[$108>>1] = $100;
    $109 = $1;
    $110 = ((($109)) + 396|0);
    $111 = $1;
    $112 = ((($111)) + 292|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($110) + (($113*18)|0)|0);
    $115 = ((($114)) + 8|0);
    $116 = HEAP16[$115>>1]|0;
    $117 = $1;
    $118 = ((($117)) + 2236|0);
    $119 = $2;
    $120 = (($118) + ($119<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $3;
    $123 = (($121) + ($122<<1)|0);
    HEAP16[$123>>1] = $116;
    $124 = $1;
    $125 = ((($124)) + 396|0);
    $126 = $1;
    $127 = ((($126)) + 292|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($125) + (($128*18)|0)|0);
    $130 = ((($129)) + 10|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $1;
    $133 = ((($132)) + 2236|0);
    $134 = $2;
    $135 = (($134) + 1)|0;
    $136 = (($133) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $3;
    $139 = (($137) + ($138<<1)|0);
    HEAP16[$139>>1] = $131;
    $140 = $1;
    $141 = ((($140)) + 396|0);
    $142 = $1;
    $143 = ((($142)) + 292|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($141) + (($144*18)|0)|0);
    $146 = ((($145)) + 12|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = $1;
    $149 = ((($148)) + 2236|0);
    $150 = $2;
    $151 = (($150) - 1)|0;
    $152 = (($149) + ($151<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $3;
    $155 = (($154) + 1)|0;
    $156 = (($153) + ($155<<1)|0);
    HEAP16[$156>>1] = $147;
    $157 = $1;
    $158 = ((($157)) + 396|0);
    $159 = $1;
    $160 = ((($159)) + 292|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($158) + (($161*18)|0)|0);
    $163 = ((($162)) + 14|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = $1;
    $166 = ((($165)) + 2236|0);
    $167 = $2;
    $168 = (($166) + ($167<<2)|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $3;
    $171 = (($170) + 1)|0;
    $172 = (($169) + ($171<<1)|0);
    HEAP16[$172>>1] = $164;
    $173 = $1;
    $174 = ((($173)) + 396|0);
    $175 = $1;
    $176 = ((($175)) + 292|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($174) + (($177*18)|0)|0);
    $179 = ((($178)) + 16|0);
    $180 = HEAP16[$179>>1]|0;
    $181 = $1;
    $182 = ((($181)) + 2236|0);
    $183 = $2;
    $184 = (($183) + 1)|0;
    $185 = (($182) + ($184<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $3;
    $188 = (($187) + 1)|0;
    $189 = (($186) + ($188<<1)|0);
    HEAP16[$189>>1] = $180;
    $190 = $1;
    $191 = ((($190)) + 292|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + 1)|0;
    $194 = (($193|0) % 8)&-1;
    $195 = $1;
    $196 = ((($195)) + 292|0);
    HEAP32[$196>>2] = $194;
    $197 = $1;
    $198 = $2;
    $199 = $3;
    _Lboom_nine($197,$198,$199,0);
    break;
   }
   case 5:  {
    $200 = $1;
    $201 = $2;
    $202 = $3;
    _Lboom_tank($200,$201,$202);
    $203 = $1;
    $204 = $2;
    $205 = $3;
    _Lboom_nine($203,$204,$205,1);
    break;
   }
   default: {
   }
   }
   $206 = $2;
   $207 = (($206) + 1)|0;
   $2 = $207;
  }
  $208 = $3;
  $209 = (($208) + 1)|0;
  $3 = $209;
 }
 STACKTOP = sp;return;
}
function _Lboom_nine($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = (($10) - 1)|0;
 $12 = $7;
 _Lboom_one($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = (($14) - 1)|0;
 $16 = $6;
 $17 = $7;
 _Lboom_one($13,$15,$16,$17);
 $18 = $4;
 $19 = $5;
 $20 = (($19) + 1)|0;
 $21 = $6;
 $22 = $7;
 _Lboom_one($18,$20,$21,$22);
 $23 = $4;
 $24 = $5;
 $25 = $6;
 $26 = (($25) + 1)|0;
 $27 = $7;
 _Lboom_one($23,$24,$26,$27);
 $28 = $4;
 $29 = $5;
 $30 = (($29) - 1)|0;
 $31 = $6;
 $32 = (($31) - 1)|0;
 $33 = $7;
 _Lboom_one($28,$30,$32,$33);
 $34 = $4;
 $35 = $5;
 $36 = (($35) + 1)|0;
 $37 = $6;
 $38 = (($37) - 1)|0;
 $39 = $7;
 _Lboom_one($34,$36,$38,$39);
 $40 = $4;
 $41 = $5;
 $42 = (($41) - 1)|0;
 $43 = $6;
 $44 = (($43) + 1)|0;
 $45 = $7;
 _Lboom_one($40,$42,$44,$45);
 $46 = $4;
 $47 = $5;
 $48 = (($47) + 1)|0;
 $49 = $6;
 $50 = (($49) + 1)|0;
 $51 = $7;
 _Lboom_one($46,$48,$50,$51);
 $52 = $4;
 $53 = ((($52)) + 1804|0);
 $54 = $5;
 $55 = (($53) + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $6;
 $58 = (($56) + ($57<<1)|0);
 HEAP16[$58>>1] = 8;
 STACKTOP = sp;return;
}
function _Lboom_bug($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 2236|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($12) - 1)|0;
 $14 = (($11) + ($13<<1)|0);
 HEAP16[$14>>1] = 149;
 $15 = $3;
 $16 = ((($15)) + 2236|0);
 $17 = $4;
 $18 = (($16) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<1)|0);
 HEAP16[$22>>1] = 149;
 $23 = $3;
 $24 = ((($23)) + 2236|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($29) - 1)|0;
 $31 = (($28) + ($30<<1)|0);
 HEAP16[$31>>1] = 149;
 $32 = $3;
 $33 = ((($32)) + 2236|0);
 $34 = $4;
 $35 = (($34) - 1)|0;
 $36 = (($33) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($37) + ($38<<1)|0);
 HEAP16[$39>>1] = 149;
 $40 = $3;
 $41 = ((($40)) + 2236|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($44) + ($45<<1)|0);
 HEAP16[$46>>1] = 160;
 $47 = $3;
 $48 = ((($47)) + 2236|0);
 $49 = $4;
 $50 = (($49) + 1)|0;
 $51 = (($48) + ($50<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $5;
 $54 = (($52) + ($53<<1)|0);
 HEAP16[$54>>1] = 149;
 $55 = $3;
 $56 = ((($55)) + 2236|0);
 $57 = $4;
 $58 = (($57) - 1)|0;
 $59 = (($56) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $5;
 $62 = (($61) + 1)|0;
 $63 = (($60) + ($62<<1)|0);
 HEAP16[$63>>1] = 149;
 $64 = $3;
 $65 = ((($64)) + 2236|0);
 $66 = $4;
 $67 = (($65) + ($66<<2)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $5;
 $70 = (($69) + 1)|0;
 $71 = (($68) + ($70<<1)|0);
 HEAP16[$71>>1] = 149;
 $72 = $3;
 $73 = ((($72)) + 2236|0);
 $74 = $4;
 $75 = (($74) + 1)|0;
 $76 = (($73) + ($75<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $5;
 $79 = (($78) + 1)|0;
 $80 = (($77) + ($79<<1)|0);
 HEAP16[$80>>1] = 149;
 STACKTOP = sp;return;
}
function _Lboom_tank($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 2236|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($12) - 1)|0;
 $14 = (($11) + ($13<<1)|0);
 HEAP16[$14>>1] = 11;
 $15 = $3;
 $16 = ((($15)) + 2236|0);
 $17 = $4;
 $18 = (($16) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<1)|0);
 HEAP16[$22>>1] = 11;
 $23 = $3;
 $24 = ((($23)) + 2236|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($29) - 1)|0;
 $31 = (($28) + ($30<<1)|0);
 HEAP16[$31>>1] = 11;
 $32 = $3;
 $33 = ((($32)) + 2236|0);
 $34 = $4;
 $35 = (($34) - 1)|0;
 $36 = (($33) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($37) + ($38<<1)|0);
 HEAP16[$39>>1] = 11;
 $40 = $3;
 $41 = ((($40)) + 2236|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($44) + ($45<<1)|0);
 HEAP16[$46>>1] = 11;
 $47 = $3;
 $48 = ((($47)) + 2236|0);
 $49 = $4;
 $50 = (($49) + 1)|0;
 $51 = (($48) + ($50<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $5;
 $54 = (($52) + ($53<<1)|0);
 HEAP16[$54>>1] = 11;
 $55 = $3;
 $56 = ((($55)) + 2236|0);
 $57 = $4;
 $58 = (($57) - 1)|0;
 $59 = (($56) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $5;
 $62 = (($61) + 1)|0;
 $63 = (($60) + ($62<<1)|0);
 HEAP16[$63>>1] = 11;
 $64 = $3;
 $65 = ((($64)) + 2236|0);
 $66 = $4;
 $67 = (($65) + ($66<<2)|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $5;
 $70 = (($69) + 1)|0;
 $71 = (($68) + ($70<<1)|0);
 HEAP16[$71>>1] = 11;
 $72 = $3;
 $73 = ((($72)) + 2236|0);
 $74 = $4;
 $75 = (($74) + 1)|0;
 $76 = (($73) + ($75<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $5;
 $79 = (($78) + 1)|0;
 $80 = (($77) + ($79<<1)|0);
 HEAP16[$80>>1] = 11;
 STACKTOP = sp;return;
}
function _Lboom_one($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 1804|0);
 $10 = $5;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = (($12) + ($13<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 switch ($16|0) {
 case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
  $17 = $7;
  $18 = ($17<<24>>24)!=(0);
  if (!($18)) {
   STACKTOP = sp;return;
  }
  $19 = $4;
  $20 = ((($19)) + 1804|0);
  $21 = $5;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = (($23) + ($24<<1)|0);
  HEAP16[$25>>1] = 7;
  STACKTOP = sp;return;
  break;
 }
 case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
  $26 = $4;
  $27 = ((($26)) + 1804|0);
  $28 = $5;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = 6;
  $33 = $4;
  $34 = $5;
  $35 = $6;
  _Lboom_bug($33,$34,$35);
  STACKTOP = sp;return;
  break;
 }
 case 183: case 182: case 181:  {
  $36 = $4;
  $37 = ((($36)) + 1804|0);
  $38 = $5;
  $39 = (($37) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $6;
  $42 = (($40) + ($41<<1)|0);
  HEAP16[$42>>1] = 6;
  $43 = $4;
  $44 = $5;
  $45 = $6;
  _Lboom_tank($43,$44,$45);
  STACKTOP = sp;return;
  break;
 }
 case 347: case 346: case 345: case 344: case 296: case 295: case 294: case 293: case 292: case 257: case 256: case 255: case 254: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 246: case 245: case 244: case 243: case 242: case 15: case 14: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $46 = $4;
  $47 = ((($46)) + 1804|0);
  $48 = $5;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $6;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 8;
  STACKTOP = sp;return;
 }
 }
}
function _Lchain($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 1;
 STACKTOP = sp;return;
}
function _Lboom_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 9;
 $13 = $3;
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 3|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function _Lboom_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 2236|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $3;
 $15 = ((($14)) + 1804|0);
 $16 = $4;
 $17 = (($15) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = (($18) + ($19<<1)|0);
 HEAP16[$20>>1] = $13;
 STACKTOP = sp;return;
}
function _Lacid_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 17;
 STACKTOP = sp;return;
}
function _Lacid_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 18;
 STACKTOP = sp;return;
}
function _Lacid_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 19;
 STACKTOP = sp;return;
}
function _Lacid_4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 20;
 STACKTOP = sp;return;
}
function _Lacid_5($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 21;
 STACKTOP = sp;return;
}
function _Lacid_6($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 22;
 STACKTOP = sp;return;
}
function _Lacid_7($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 23;
 STACKTOP = sp;return;
}
function _Lacid_8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 16;
 STACKTOP = sp;return;
}
function _Landroid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $$off1 = 0, $$off11 = 0, $$off13 = 0, $$off15 = 0, $$off17 = 0, $$off19 = 0, $$off21 = 0, $$off23 = 0, $$off25 = 0, $$off27 = 0, $$off29 = 0, $$off3 = 0, $$off31 = 0, $$off33 = 0, $$off35 = 0, $$off37 = 0, $$off39 = 0, $$off41 = 0, $$off43 = 0;
 var $$off45 = 0, $$off47 = 0, $$off49 = 0, $$off5 = 0, $$off51 = 0, $$off53 = 0, $$off55 = 0, $$off57 = 0, $$off59 = 0, $$off61 = 0, $$off63 = 0, $$off65 = 0, $$off67 = 0, $$off69 = 0, $$off7 = 0, $$off71 = 0, $$off73 = 0, $$off75 = 0, $$off77 = 0, $$off79 = 0;
 var $$off81 = 0, $$off83 = 0, $$off85 = 0, $$off87 = 0, $$off89 = 0, $$off9 = 0, $$off91 = 0, $$off93 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
 var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
 var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0;
 var $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0;
 var $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0;
 var $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0;
 var $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0;
 var $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0;
 var $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0;
 var $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0;
 var $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0;
 var $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0;
 var $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0;
 var $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0;
 var $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0;
 var $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0;
 var $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0;
 var $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0;
 var $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0;
 var $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0;
 var $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0;
 var $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0;
 var $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0;
 var $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0;
 var $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0;
 var $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0;
 var $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0;
 var $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $switch = 0, $switch10 = 0, $switch12 = 0, $switch14 = 0, $switch16 = 0, $switch18 = 0, $switch2 = 0, $switch20 = 0, $switch22 = 0, $switch24 = 0, $switch26 = 0, $switch28 = 0, $switch30 = 0;
 var $switch32 = 0, $switch34 = 0, $switch36 = 0, $switch38 = 0, $switch4 = 0, $switch40 = 0, $switch42 = 0, $switch44 = 0, $switch46 = 0, $switch48 = 0, $switch50 = 0, $switch52 = 0, $switch54 = 0, $switch56 = 0, $switch58 = 0, $switch6 = 0, $switch60 = 0, $switch62 = 0, $switch64 = 0, $switch66 = 0;
 var $switch68 = 0, $switch70 = 0, $switch72 = 0, $switch74 = 0, $switch76 = 0, $switch78 = 0, $switch8 = 0, $switch80 = 0, $switch82 = 0, $switch84 = 0, $switch86 = 0, $switch88 = 0, $switch90 = 0, $switch92 = 0, $switch94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 248|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 L1: do {
  if ($13) {
   label = 39;
  } else {
   $14 = $3;
   $15 = ((($14)) + 1372|0);
   $16 = $4;
   $17 = (($16) - 1)|0;
   $18 = (($15) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $5;
   $21 = (($20) - 1)|0;
   $22 = (($19) + ($21<<1)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = (11821 + ($24)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = $3;
   $29 = ((($28)) + 1372|0);
   $30 = $4;
   $31 = (($29) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $5;
   $34 = (($33) - 1)|0;
   $35 = (($32) + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36 << 16 >> 16;
   $38 = (11821 + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = (($27) + ($40))|0;
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 1)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = (11821 + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54 << 24 >> 24;
   $56 = (($41) + ($55))|0;
   $57 = $3;
   $58 = ((($57)) + 1372|0);
   $59 = $4;
   $60 = (($59) - 1)|0;
   $61 = (($58) + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $5;
   $64 = (($62) + ($63<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65 << 16 >> 16;
   $67 = (11821 + ($66)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = (($56) + ($69))|0;
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = (11821 + ($80)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82 << 24 >> 24;
   $84 = (($70) + ($83))|0;
   $85 = $3;
   $86 = ((($85)) + 1372|0);
   $87 = $4;
   $88 = (($87) - 1)|0;
   $89 = (($86) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $5;
   $92 = (($91) + 1)|0;
   $93 = (($90) + ($92<<1)|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94 << 16 >> 16;
   $96 = (11821 + ($95)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97 << 24 >> 24;
   $99 = (($84) + ($98))|0;
   $100 = $3;
   $101 = ((($100)) + 1372|0);
   $102 = $4;
   $103 = (($101) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $5;
   $106 = (($105) + 1)|0;
   $107 = (($104) + ($106<<1)|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = $108 << 16 >> 16;
   $110 = (11821 + ($109)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111 << 24 >> 24;
   $113 = (($99) + ($112))|0;
   $114 = $3;
   $115 = ((($114)) + 1372|0);
   $116 = $4;
   $117 = (($116) + 1)|0;
   $118 = (($115) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $5;
   $121 = (($120) + 1)|0;
   $122 = (($119) + ($121<<1)|0);
   $123 = HEAP16[$122>>1]|0;
   $124 = $123 << 16 >> 16;
   $125 = (11821 + ($124)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126 << 24 >> 24;
   $128 = (($113) + ($127))|0;
   $129 = ($128|0)==(0);
   if ($129) {
    label = 39;
   } else {
    $130 = $3;
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131*12421)|0;
    $133 = (($132) + 1)|0;
    $134 = $3;
    HEAP32[$134>>2] = $133;
    $135 = $3;
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 & 65535;
    $138 = $137<<3;
    $139 = $138 >> 16;
    switch ($139|0) {
    case 0:  {
     $140 = $3;
     $141 = ((($140)) + 556|0);
     $142 = $3;
     $143 = ((($142)) + 1372|0);
     $144 = $4;
     $145 = (($143) + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $5;
     $148 = (($147) - 1)|0;
     $149 = (($146) + ($148<<1)|0);
     $150 = HEAP16[$149>>1]|0;
     $151 = $150 << 16 >> 16;
     $152 = (($141) + ($151<<1)|0);
     $153 = HEAP16[$152>>1]|0;
     $154 = $153 << 16 >> 16;
     $8 = $154;
     $155 = $8;
     $156 = ($155|0)!=(11);
     if (!($156)) {
      label = 5;
     }
     break;
    }
    case 1:  {
     label = 5;
     break;
    }
    case 2:  {
     label = 6;
     break;
    }
    case 3:  {
     label = 7;
     break;
    }
    case 4:  {
     label = 8;
     break;
    }
    case 5:  {
     label = 9;
     break;
    }
    case 6:  {
     label = 10;
     break;
    }
    case 7:  {
     label = 11;
     break;
    }
    case 8:  {
     label = 12;
     break;
    }
    case 9:  {
     label = 13;
     break;
    }
    case 10:  {
     label = 14;
     break;
    }
    case 11:  {
     label = 15;
     break;
    }
    case 12:  {
     label = 16;
     break;
    }
    case 13:  {
     label = 17;
     break;
    }
    case 14:  {
     label = 18;
     break;
    }
    case 15:  {
     label = 19;
     break;
    }
    default: {
     // unreachable;
    }
    }
    if ((label|0) == 5) {
     $157 = $3;
     $158 = ((($157)) + 556|0);
     $159 = $3;
     $160 = ((($159)) + 1372|0);
     $161 = $4;
     $162 = (($161) - 1)|0;
     $163 = (($160) + ($162<<2)|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $5;
     $166 = (($164) + ($165<<1)|0);
     $167 = HEAP16[$166>>1]|0;
     $168 = $167 << 16 >> 16;
     $169 = (($158) + ($168<<1)|0);
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $8 = $171;
     $172 = $8;
     $173 = ($172|0)!=(11);
     if (!($173)) {
      label = 6;
     }
    }
    if ((label|0) == 6) {
     $174 = $3;
     $175 = ((($174)) + 556|0);
     $176 = $3;
     $177 = ((($176)) + 1372|0);
     $178 = $4;
     $179 = (($178) + 1)|0;
     $180 = (($177) + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $5;
     $183 = (($181) + ($182<<1)|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184 << 16 >> 16;
     $186 = (($175) + ($185<<1)|0);
     $187 = HEAP16[$186>>1]|0;
     $188 = $187 << 16 >> 16;
     $8 = $188;
     $189 = $8;
     $190 = ($189|0)!=(11);
     if (!($190)) {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     $191 = $3;
     $192 = ((($191)) + 556|0);
     $193 = $3;
     $194 = ((($193)) + 1372|0);
     $195 = $4;
     $196 = (($194) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $5;
     $199 = (($198) + 1)|0;
     $200 = (($197) + ($199<<1)|0);
     $201 = HEAP16[$200>>1]|0;
     $202 = $201 << 16 >> 16;
     $203 = (($192) + ($202<<1)|0);
     $204 = HEAP16[$203>>1]|0;
     $205 = $204 << 16 >> 16;
     $8 = $205;
     $206 = $8;
     $207 = ($206|0)!=(11);
     if (!($207)) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     $208 = $3;
     $209 = ((($208)) + 556|0);
     $210 = $3;
     $211 = ((($210)) + 1372|0);
     $212 = $4;
     $213 = (($212) - 1)|0;
     $214 = (($211) + ($213<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = $5;
     $217 = (($216) - 1)|0;
     $218 = (($215) + ($217<<1)|0);
     $219 = HEAP16[$218>>1]|0;
     $220 = $219 << 16 >> 16;
     $221 = (($209) + ($220<<1)|0);
     $222 = HEAP16[$221>>1]|0;
     $223 = $222 << 16 >> 16;
     $8 = $223;
     $224 = $8;
     $225 = ($224|0)!=(11);
     if (!($225)) {
      label = 9;
     }
    }
    if ((label|0) == 9) {
     $226 = $3;
     $227 = ((($226)) + 556|0);
     $228 = $3;
     $229 = ((($228)) + 1372|0);
     $230 = $4;
     $231 = (($230) + 1)|0;
     $232 = (($229) + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $5;
     $235 = (($234) - 1)|0;
     $236 = (($233) + ($235<<1)|0);
     $237 = HEAP16[$236>>1]|0;
     $238 = $237 << 16 >> 16;
     $239 = (($227) + ($238<<1)|0);
     $240 = HEAP16[$239>>1]|0;
     $241 = $240 << 16 >> 16;
     $8 = $241;
     $242 = $8;
     $243 = ($242|0)!=(11);
     if (!($243)) {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $244 = $3;
     $245 = ((($244)) + 556|0);
     $246 = $3;
     $247 = ((($246)) + 1372|0);
     $248 = $4;
     $249 = (($248) - 1)|0;
     $250 = (($247) + ($249<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $5;
     $253 = (($252) + 1)|0;
     $254 = (($251) + ($253<<1)|0);
     $255 = HEAP16[$254>>1]|0;
     $256 = $255 << 16 >> 16;
     $257 = (($245) + ($256<<1)|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258 << 16 >> 16;
     $8 = $259;
     $260 = $8;
     $261 = ($260|0)!=(11);
     if (!($261)) {
      label = 11;
     }
    }
    if ((label|0) == 11) {
     $262 = $3;
     $263 = ((($262)) + 556|0);
     $264 = $3;
     $265 = ((($264)) + 1372|0);
     $266 = $4;
     $267 = (($266) + 1)|0;
     $268 = (($265) + ($267<<2)|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $5;
     $271 = (($270) + 1)|0;
     $272 = (($269) + ($271<<1)|0);
     $273 = HEAP16[$272>>1]|0;
     $274 = $273 << 16 >> 16;
     $275 = (($263) + ($274<<1)|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276 << 16 >> 16;
     $8 = $277;
     $278 = $8;
     $279 = ($278|0)!=(11);
     if (!($279)) {
      label = 12;
     }
    }
    if ((label|0) == 12) {
     $280 = $3;
     $281 = ((($280)) + 556|0);
     $282 = $3;
     $283 = ((($282)) + 1372|0);
     $284 = $4;
     $285 = (($283) + ($284<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = $5;
     $288 = (($287) - 1)|0;
     $289 = (($286) + ($288<<1)|0);
     $290 = HEAP16[$289>>1]|0;
     $291 = $290 << 16 >> 16;
     $292 = (($281) + ($291<<1)|0);
     $293 = HEAP16[$292>>1]|0;
     $294 = $293 << 16 >> 16;
     $8 = $294;
     $295 = $8;
     $296 = ($295|0)!=(11);
     if (!($296)) {
      label = 13;
     }
    }
    if ((label|0) == 13) {
     $297 = $3;
     $298 = ((($297)) + 556|0);
     $299 = $3;
     $300 = ((($299)) + 1372|0);
     $301 = $4;
     $302 = (($301) - 1)|0;
     $303 = (($300) + ($302<<2)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $5;
     $306 = (($304) + ($305<<1)|0);
     $307 = HEAP16[$306>>1]|0;
     $308 = $307 << 16 >> 16;
     $309 = (($298) + ($308<<1)|0);
     $310 = HEAP16[$309>>1]|0;
     $311 = $310 << 16 >> 16;
     $8 = $311;
     $312 = $8;
     $313 = ($312|0)!=(11);
     if (!($313)) {
      label = 14;
     }
    }
    if ((label|0) == 14) {
     $314 = $3;
     $315 = ((($314)) + 556|0);
     $316 = $3;
     $317 = ((($316)) + 1372|0);
     $318 = $4;
     $319 = (($318) + 1)|0;
     $320 = (($317) + ($319<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = $5;
     $323 = (($321) + ($322<<1)|0);
     $324 = HEAP16[$323>>1]|0;
     $325 = $324 << 16 >> 16;
     $326 = (($315) + ($325<<1)|0);
     $327 = HEAP16[$326>>1]|0;
     $328 = $327 << 16 >> 16;
     $8 = $328;
     $329 = $8;
     $330 = ($329|0)!=(11);
     if (!($330)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $331 = $3;
     $332 = ((($331)) + 556|0);
     $333 = $3;
     $334 = ((($333)) + 1372|0);
     $335 = $4;
     $336 = (($334) + ($335<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = $5;
     $339 = (($338) + 1)|0;
     $340 = (($337) + ($339<<1)|0);
     $341 = HEAP16[$340>>1]|0;
     $342 = $341 << 16 >> 16;
     $343 = (($332) + ($342<<1)|0);
     $344 = HEAP16[$343>>1]|0;
     $345 = $344 << 16 >> 16;
     $8 = $345;
     $346 = $8;
     $347 = ($346|0)!=(11);
     if (!($347)) {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     $348 = $3;
     $349 = ((($348)) + 556|0);
     $350 = $3;
     $351 = ((($350)) + 1372|0);
     $352 = $4;
     $353 = (($352) - 1)|0;
     $354 = (($351) + ($353<<2)|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $5;
     $357 = (($356) - 1)|0;
     $358 = (($355) + ($357<<1)|0);
     $359 = HEAP16[$358>>1]|0;
     $360 = $359 << 16 >> 16;
     $361 = (($349) + ($360<<1)|0);
     $362 = HEAP16[$361>>1]|0;
     $363 = $362 << 16 >> 16;
     $8 = $363;
     $364 = $8;
     $365 = ($364|0)!=(11);
     if (!($365)) {
      label = 17;
     }
    }
    if ((label|0) == 17) {
     $366 = $3;
     $367 = ((($366)) + 556|0);
     $368 = $3;
     $369 = ((($368)) + 1372|0);
     $370 = $4;
     $371 = (($370) + 1)|0;
     $372 = (($369) + ($371<<2)|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = $5;
     $375 = (($374) - 1)|0;
     $376 = (($373) + ($375<<1)|0);
     $377 = HEAP16[$376>>1]|0;
     $378 = $377 << 16 >> 16;
     $379 = (($367) + ($378<<1)|0);
     $380 = HEAP16[$379>>1]|0;
     $381 = $380 << 16 >> 16;
     $8 = $381;
     $382 = $8;
     $383 = ($382|0)!=(11);
     if (!($383)) {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     $384 = $3;
     $385 = ((($384)) + 556|0);
     $386 = $3;
     $387 = ((($386)) + 1372|0);
     $388 = $4;
     $389 = (($388) - 1)|0;
     $390 = (($387) + ($389<<2)|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = $5;
     $393 = (($392) + 1)|0;
     $394 = (($391) + ($393<<1)|0);
     $395 = HEAP16[$394>>1]|0;
     $396 = $395 << 16 >> 16;
     $397 = (($385) + ($396<<1)|0);
     $398 = HEAP16[$397>>1]|0;
     $399 = $398 << 16 >> 16;
     $8 = $399;
     $400 = $8;
     $401 = ($400|0)!=(11);
     if (!($401)) {
      label = 19;
     }
    }
    if ((label|0) == 19) {
     $402 = $3;
     $403 = ((($402)) + 556|0);
     $404 = $3;
     $405 = ((($404)) + 1372|0);
     $406 = $4;
     $407 = (($406) + 1)|0;
     $408 = (($405) + ($407<<2)|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = $5;
     $411 = (($410) + 1)|0;
     $412 = (($409) + ($411<<1)|0);
     $413 = HEAP16[$412>>1]|0;
     $414 = $413 << 16 >> 16;
     $415 = (($403) + ($414<<1)|0);
     $416 = HEAP16[$415>>1]|0;
     $417 = $416 << 16 >> 16;
     $8 = $417;
     $418 = $8;
     $419 = ($418|0)!=(11);
     if (!($419)) {
      label = 39;
      break;
     }
    }
    $420 = $3;
    $421 = ((($420)) + 44|0);
    $422 = ((($421)) + 13|0);
    HEAP8[$422>>0] = 1;
    $423 = $3;
    $424 = HEAP32[$423>>2]|0;
    $425 = ($424*12421)|0;
    $426 = (($425) + 1)|0;
    $427 = $3;
    HEAP32[$427>>2] = $426;
    $428 = $3;
    $429 = HEAP32[$428>>2]|0;
    $430 = $429 & 65535;
    $431 = $430<<3;
    $432 = $431 >> 16;
    switch ($432|0) {
    case 0:  {
     $433 = $3;
     $434 = ((($433)) + 1372|0);
     $435 = $4;
     $436 = (($434) + ($435<<2)|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = $5;
     $439 = (($438) - 1)|0;
     $440 = (($437) + ($439<<1)|0);
     $441 = HEAP16[$440>>1]|0;
     $442 = $441 << 16 >> 16;
     $443 = (11821 + ($442)|0);
     $444 = HEAP8[$443>>0]|0;
     $445 = ($444<<24>>24)!=(0);
     if ($445) {
      label = 131;
      break L1;
     } else {
      label = 23;
     }
     break;
    }
    case 1:  {
     label = 23;
     break;
    }
    case 2:  {
     label = 24;
     break;
    }
    case 3:  {
     label = 25;
     break;
    }
    case 4:  {
     label = 26;
     break;
    }
    case 5:  {
     label = 27;
     break;
    }
    case 6:  {
     label = 28;
     break;
    }
    case 7:  {
     label = 29;
     break;
    }
    case 8:  {
     label = 30;
     break;
    }
    case 9:  {
     label = 31;
     break;
    }
    case 10:  {
     label = 32;
     break;
    }
    case 11:  {
     label = 33;
     break;
    }
    case 12:  {
     label = 34;
     break;
    }
    case 13:  {
     label = 35;
     break;
    }
    case 14:  {
     label = 36;
     break;
    }
    case 15:  {
     break;
    }
    default: {
     // unreachable;
    }
    }
    if ((label|0) == 23) {
     $446 = $3;
     $447 = ((($446)) + 1372|0);
     $448 = $4;
     $449 = (($448) - 1)|0;
     $450 = (($447) + ($449<<2)|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = $5;
     $453 = (($451) + ($452<<1)|0);
     $454 = HEAP16[$453>>1]|0;
     $455 = $454 << 16 >> 16;
     $456 = (11821 + ($455)|0);
     $457 = HEAP8[$456>>0]|0;
     $458 = ($457<<24>>24)!=(0);
     if ($458) {
      label = 149;
      break;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $459 = $3;
     $460 = ((($459)) + 1372|0);
     $461 = $4;
     $462 = (($461) + 1)|0;
     $463 = (($460) + ($462<<2)|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = $5;
     $466 = (($464) + ($465<<1)|0);
     $467 = HEAP16[$466>>1]|0;
     $468 = $467 << 16 >> 16;
     $469 = (11821 + ($468)|0);
     $470 = HEAP8[$469>>0]|0;
     $471 = ($470<<24>>24)!=(0);
     if ($471) {
      label = 137;
      break;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $472 = $3;
     $473 = ((($472)) + 1372|0);
     $474 = $4;
     $475 = (($473) + ($474<<2)|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = $5;
     $478 = (($477) + 1)|0;
     $479 = (($476) + ($478<<1)|0);
     $480 = HEAP16[$479>>1]|0;
     $481 = $480 << 16 >> 16;
     $482 = (11821 + ($481)|0);
     $483 = HEAP8[$482>>0]|0;
     $484 = ($483<<24>>24)!=(0);
     if ($484) {
      label = 143;
      break;
     } else {
      label = 26;
     }
    }
    if ((label|0) == 26) {
     $485 = $3;
     $486 = ((($485)) + 1372|0);
     $487 = $4;
     $488 = (($487) - 1)|0;
     $489 = (($486) + ($488<<2)|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = $5;
     $492 = (($491) - 1)|0;
     $493 = (($490) + ($492<<1)|0);
     $494 = HEAP16[$493>>1]|0;
     $495 = $494 << 16 >> 16;
     $496 = (11821 + ($495)|0);
     $497 = HEAP8[$496>>0]|0;
     $498 = ($497<<24>>24)!=(0);
     if ($498) {
      label = 152;
      break;
     } else {
      label = 27;
     }
    }
    if ((label|0) == 27) {
     $499 = $3;
     $500 = ((($499)) + 1372|0);
     $501 = $4;
     $502 = (($501) + 1)|0;
     $503 = (($500) + ($502<<2)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $5;
     $506 = (($505) - 1)|0;
     $507 = (($504) + ($506<<1)|0);
     $508 = HEAP16[$507>>1]|0;
     $509 = $508 << 16 >> 16;
     $510 = (11821 + ($509)|0);
     $511 = HEAP8[$510>>0]|0;
     $512 = ($511<<24>>24)!=(0);
     if ($512) {
      label = 134;
      break;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 28) {
     $513 = $3;
     $514 = ((($513)) + 1372|0);
     $515 = $4;
     $516 = (($515) - 1)|0;
     $517 = (($514) + ($516<<2)|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = $5;
     $520 = (($519) + 1)|0;
     $521 = (($518) + ($520<<1)|0);
     $522 = HEAP16[$521>>1]|0;
     $523 = $522 << 16 >> 16;
     $524 = (11821 + ($523)|0);
     $525 = HEAP8[$524>>0]|0;
     $526 = ($525<<24>>24)!=(0);
     if ($526) {
      label = 146;
      break;
     } else {
      label = 29;
     }
    }
    if ((label|0) == 29) {
     $527 = $3;
     $528 = ((($527)) + 1372|0);
     $529 = $4;
     $530 = (($529) + 1)|0;
     $531 = (($528) + ($530<<2)|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = $5;
     $534 = (($533) + 1)|0;
     $535 = (($532) + ($534<<1)|0);
     $536 = HEAP16[$535>>1]|0;
     $537 = $536 << 16 >> 16;
     $538 = (11821 + ($537)|0);
     $539 = HEAP8[$538>>0]|0;
     $540 = ($539<<24>>24)!=(0);
     if ($540) {
      label = 140;
      break;
     } else {
      label = 30;
     }
    }
    if ((label|0) == 30) {
     $541 = $3;
     $542 = ((($541)) + 1372|0);
     $543 = $4;
     $544 = (($542) + ($543<<2)|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = $5;
     $547 = (($546) - 1)|0;
     $548 = (($545) + ($547<<1)|0);
     $549 = HEAP16[$548>>1]|0;
     $550 = $549 << 16 >> 16;
     $551 = (11821 + ($550)|0);
     $552 = HEAP8[$551>>0]|0;
     $553 = ($552<<24>>24)!=(0);
     if ($553) {
      label = 131;
      break;
     } else {
      label = 31;
     }
    }
    if ((label|0) == 31) {
     $554 = $3;
     $555 = ((($554)) + 1372|0);
     $556 = $4;
     $557 = (($556) - 1)|0;
     $558 = (($555) + ($557<<2)|0);
     $559 = HEAP32[$558>>2]|0;
     $560 = $5;
     $561 = (($559) + ($560<<1)|0);
     $562 = HEAP16[$561>>1]|0;
     $563 = $562 << 16 >> 16;
     $564 = (11821 + ($563)|0);
     $565 = HEAP8[$564>>0]|0;
     $566 = ($565<<24>>24)!=(0);
     if ($566) {
      label = 149;
      break;
     } else {
      label = 32;
     }
    }
    if ((label|0) == 32) {
     $567 = $3;
     $568 = ((($567)) + 1372|0);
     $569 = $4;
     $570 = (($569) + 1)|0;
     $571 = (($568) + ($570<<2)|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = $5;
     $574 = (($572) + ($573<<1)|0);
     $575 = HEAP16[$574>>1]|0;
     $576 = $575 << 16 >> 16;
     $577 = (11821 + ($576)|0);
     $578 = HEAP8[$577>>0]|0;
     $579 = ($578<<24>>24)!=(0);
     if ($579) {
      label = 137;
      break;
     } else {
      label = 33;
     }
    }
    if ((label|0) == 33) {
     $580 = $3;
     $581 = ((($580)) + 1372|0);
     $582 = $4;
     $583 = (($581) + ($582<<2)|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = $5;
     $586 = (($585) + 1)|0;
     $587 = (($584) + ($586<<1)|0);
     $588 = HEAP16[$587>>1]|0;
     $589 = $588 << 16 >> 16;
     $590 = (11821 + ($589)|0);
     $591 = HEAP8[$590>>0]|0;
     $592 = ($591<<24>>24)!=(0);
     if ($592) {
      label = 143;
      break;
     } else {
      label = 34;
     }
    }
    if ((label|0) == 34) {
     $593 = $3;
     $594 = ((($593)) + 1372|0);
     $595 = $4;
     $596 = (($595) - 1)|0;
     $597 = (($594) + ($596<<2)|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = $5;
     $600 = (($599) - 1)|0;
     $601 = (($598) + ($600<<1)|0);
     $602 = HEAP16[$601>>1]|0;
     $603 = $602 << 16 >> 16;
     $604 = (11821 + ($603)|0);
     $605 = HEAP8[$604>>0]|0;
     $606 = ($605<<24>>24)!=(0);
     if ($606) {
      label = 152;
      break;
     } else {
      label = 35;
     }
    }
    if ((label|0) == 35) {
     $607 = $3;
     $608 = ((($607)) + 1372|0);
     $609 = $4;
     $610 = (($609) + 1)|0;
     $611 = (($608) + ($610<<2)|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = $5;
     $614 = (($613) - 1)|0;
     $615 = (($612) + ($614<<1)|0);
     $616 = HEAP16[$615>>1]|0;
     $617 = $616 << 16 >> 16;
     $618 = (11821 + ($617)|0);
     $619 = HEAP8[$618>>0]|0;
     $620 = ($619<<24>>24)!=(0);
     if ($620) {
      label = 134;
      break;
     } else {
      label = 36;
     }
    }
    if ((label|0) == 36) {
     $621 = $3;
     $622 = ((($621)) + 1372|0);
     $623 = $4;
     $624 = (($623) - 1)|0;
     $625 = (($622) + ($624<<2)|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $5;
     $628 = (($627) + 1)|0;
     $629 = (($626) + ($628<<1)|0);
     $630 = HEAP16[$629>>1]|0;
     $631 = $630 << 16 >> 16;
     $632 = (11821 + ($631)|0);
     $633 = HEAP8[$632>>0]|0;
     $634 = ($633<<24>>24)!=(0);
     if ($634) {
      label = 146;
      break;
     }
    }
    $635 = $3;
    $636 = ((($635)) + 1372|0);
    $637 = $4;
    $638 = (($637) + 1)|0;
    $639 = (($636) + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = $5;
    $642 = (($641) + 1)|0;
    $643 = (($640) + ($642<<1)|0);
    $644 = HEAP16[$643>>1]|0;
    $645 = $644 << 16 >> 16;
    $646 = (11821 + ($645)|0);
    $647 = HEAP8[$646>>0]|0;
    $648 = ($647<<24>>24)!=(0);
    if ($648) {
     label = 140;
    } else {
     label = 39;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 39) {
   $649 = $3;
   $650 = ((($649)) + 240|0);
   $651 = HEAP32[$650>>2]|0;
   $652 = ($651|0)!=(0);
   if ($652) {
    STACKTOP = sp;return;
   }
   $653 = $3;
   $654 = ((($653)) + 1372|0);
   $655 = $4;
   $656 = (($655) - 1)|0;
   $657 = (($654) + ($656<<2)|0);
   $658 = HEAP32[$657>>2]|0;
   $659 = $5;
   $660 = (($659) - 1)|0;
   $661 = (($658) + ($660<<1)|0);
   $662 = HEAP16[$661>>1]|0;
   $663 = $662 << 16 >> 16;
   $664 = ($663|0)==(406);
   if ($664) {
    STACKTOP = sp;return;
   }
   $665 = $3;
   $666 = ((($665)) + 1372|0);
   $667 = $4;
   $668 = (($666) + ($667<<2)|0);
   $669 = HEAP32[$668>>2]|0;
   $670 = $5;
   $671 = (($670) - 1)|0;
   $672 = (($669) + ($671<<1)|0);
   $673 = HEAP16[$672>>1]|0;
   $674 = $673 << 16 >> 16;
   $675 = ($674|0)==(406);
   if ($675) {
    STACKTOP = sp;return;
   }
   $676 = $3;
   $677 = ((($676)) + 1372|0);
   $678 = $4;
   $679 = (($678) + 1)|0;
   $680 = (($677) + ($679<<2)|0);
   $681 = HEAP32[$680>>2]|0;
   $682 = $5;
   $683 = (($682) - 1)|0;
   $684 = (($681) + ($683<<1)|0);
   $685 = HEAP16[$684>>1]|0;
   $686 = $685 << 16 >> 16;
   $687 = ($686|0)==(406);
   if ($687) {
    STACKTOP = sp;return;
   }
   $688 = $3;
   $689 = ((($688)) + 1372|0);
   $690 = $4;
   $691 = (($690) - 1)|0;
   $692 = (($689) + ($691<<2)|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = $5;
   $695 = (($693) + ($694<<1)|0);
   $696 = HEAP16[$695>>1]|0;
   $697 = $696 << 16 >> 16;
   $698 = ($697|0)==(406);
   if ($698) {
    STACKTOP = sp;return;
   }
   $699 = $3;
   $700 = ((($699)) + 1372|0);
   $701 = $4;
   $702 = (($701) + 1)|0;
   $703 = (($700) + ($702<<2)|0);
   $704 = HEAP32[$703>>2]|0;
   $705 = $5;
   $706 = (($704) + ($705<<1)|0);
   $707 = HEAP16[$706>>1]|0;
   $708 = $707 << 16 >> 16;
   $709 = ($708|0)==(406);
   if ($709) {
    STACKTOP = sp;return;
   }
   $710 = $3;
   $711 = ((($710)) + 1372|0);
   $712 = $4;
   $713 = (($712) - 1)|0;
   $714 = (($711) + ($713<<2)|0);
   $715 = HEAP32[$714>>2]|0;
   $716 = $5;
   $717 = (($716) + 1)|0;
   $718 = (($715) + ($717<<1)|0);
   $719 = HEAP16[$718>>1]|0;
   $720 = $719 << 16 >> 16;
   $721 = ($720|0)==(406);
   if ($721) {
    STACKTOP = sp;return;
   }
   $722 = $3;
   $723 = ((($722)) + 1372|0);
   $724 = $4;
   $725 = (($723) + ($724<<2)|0);
   $726 = HEAP32[$725>>2]|0;
   $727 = $5;
   $728 = (($727) + 1)|0;
   $729 = (($726) + ($728<<1)|0);
   $730 = HEAP16[$729>>1]|0;
   $731 = $730 << 16 >> 16;
   $732 = ($731|0)==(406);
   if ($732) {
    STACKTOP = sp;return;
   }
   $733 = $3;
   $734 = ((($733)) + 1372|0);
   $735 = $4;
   $736 = (($735) + 1)|0;
   $737 = (($734) + ($736<<2)|0);
   $738 = HEAP32[$737>>2]|0;
   $739 = $5;
   $740 = (($739) + 1)|0;
   $741 = (($738) + ($740<<1)|0);
   $742 = HEAP16[$741>>1]|0;
   $743 = $742 << 16 >> 16;
   $744 = ($743|0)==(406);
   if ($744) {
    STACKTOP = sp;return;
   }
   $8 = 11;
   $745 = $3;
   $746 = ((($745)) + 16|0);
   $747 = HEAP32[$746>>2]|0;
   $748 = ($747|0)==(0);
   do {
    if ($748) {
     $749 = $3;
     $750 = ((($749)) + 16|0);
     $751 = ((($750)) + 4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $754 = $3;
      $755 = ((($754)) + 184|0);
      $756 = HEAP32[$755>>2]|0;
      $757 = $4;
      $758 = (($756) - ($757))|0;
      $6 = $758;
      $759 = $6;
      $760 = ($759|0)<(0);
      if ($760) {
       $761 = $6;
       $762 = (0 - ($761))|0;
       $6 = $762;
      }
      $763 = $3;
      $764 = ((($763)) + 192|0);
      $765 = HEAP32[$764>>2]|0;
      $766 = $5;
      $767 = (($765) - ($766))|0;
      $7 = $767;
      $768 = $7;
      $769 = ($768|0)<(0);
      if ($769) {
       $770 = $7;
       $771 = (0 - ($770))|0;
       $7 = $771;
      }
      $772 = $6;
      $773 = $7;
      $774 = (($772) + ($773))|0;
      $9 = $774;
      $775 = $3;
      $776 = ((($775)) + 184|0);
      $777 = ((($776)) + 4|0);
      $778 = HEAP32[$777>>2]|0;
      $779 = $4;
      $780 = (($778) - ($779))|0;
      $6 = $780;
      $781 = $6;
      $782 = ($781|0)<(0);
      if ($782) {
       $783 = $6;
       $784 = (0 - ($783))|0;
       $6 = $784;
      }
      $785 = $3;
      $786 = ((($785)) + 192|0);
      $787 = ((($786)) + 4|0);
      $788 = HEAP32[$787>>2]|0;
      $789 = $5;
      $790 = (($788) - ($789))|0;
      $7 = $790;
      $791 = $7;
      $792 = ($791|0)<(0);
      if ($792) {
       $793 = $7;
       $794 = (0 - ($793))|0;
       $7 = $794;
      }
      $795 = $6;
      $796 = $7;
      $797 = (($795) + ($796))|0;
      $798 = $9;
      $799 = (($798) - ($797))|0;
      $9 = $799;
      $800 = $9;
      $801 = ($800|0)<(0);
      $802 = $3;
      $803 = ((($802)) + 184|0);
      if ($801) {
       $804 = HEAP32[$803>>2]|0;
       $6 = $804;
       $805 = $3;
       $806 = ((($805)) + 192|0);
       $807 = HEAP32[$806>>2]|0;
       $7 = $807;
       break;
      } else {
       $808 = ((($803)) + 4|0);
       $809 = HEAP32[$808>>2]|0;
       $6 = $809;
       $810 = $3;
       $811 = ((($810)) + 192|0);
       $812 = ((($811)) + 4|0);
       $813 = HEAP32[$812>>2]|0;
       $7 = $813;
       break;
      }
     } else {
      label = 61;
     }
    } else {
     label = 61;
    }
   } while(0);
   do {
    if ((label|0) == 61) {
     $814 = $3;
     $815 = ((($814)) + 16|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = ($816|0)==(0);
     $818 = $3;
     if ($817) {
      $819 = ((($818)) + 184|0);
      $820 = HEAP32[$819>>2]|0;
      $6 = $820;
      $821 = $3;
      $822 = ((($821)) + 192|0);
      $823 = HEAP32[$822>>2]|0;
      $7 = $823;
      break;
     }
     $824 = ((($818)) + 16|0);
     $825 = ((($824)) + 4|0);
     $826 = HEAP32[$825>>2]|0;
     $827 = ($826|0)==(0);
     if ($827) {
      $828 = $3;
      $829 = ((($828)) + 184|0);
      $830 = ((($829)) + 4|0);
      $831 = HEAP32[$830>>2]|0;
      $6 = $831;
      $832 = $3;
      $833 = ((($832)) + 192|0);
      $834 = ((($833)) + 4|0);
      $835 = HEAP32[$834>>2]|0;
      $7 = $835;
      break;
     } else {
      $6 = 0;
      $7 = 0;
      break;
     }
    }
   } while(0);
   $836 = $3;
   $837 = HEAP32[$836>>2]|0;
   $838 = ($837*12421)|0;
   $839 = (($838) + 1)|0;
   $840 = $3;
   HEAP32[$840>>2] = $839;
   $841 = $3;
   $842 = HEAP32[$841>>2]|0;
   $843 = $842 & 65535;
   $844 = $843<<1;
   $845 = $844 >> 16;
   $846 = ($845|0)!=(0);
   $847 = $5;
   $848 = $7;
   $849 = ($847|0)>($848|0);
   if ($846) {
    if ($849) {
     $850 = $4;
     $851 = $6;
     $852 = ($850|0)>($851|0);
     if ($852) {
      $853 = $3;
      $854 = ((($853)) + 1372|0);
      $855 = $4;
      $856 = (($855) - 1)|0;
      $857 = (($854) + ($856<<2)|0);
      $858 = HEAP32[$857>>2]|0;
      $859 = $5;
      $860 = (($859) - 1)|0;
      $861 = (($858) + ($860<<1)|0);
      $862 = HEAP16[$861>>1]|0;
      $863 = $862 << 16 >> 16;
      $$off = (($863) + -11)|0;
      $switch = ($$off>>>0)<(4);
      if ($switch) {
       label = 152;
       break;
      }
      $864 = $3;
      $865 = ((($864)) + 1372|0);
      $866 = $4;
      $867 = (($865) + ($866<<2)|0);
      $868 = HEAP32[$867>>2]|0;
      $869 = $5;
      $870 = (($869) - 1)|0;
      $871 = (($868) + ($870<<1)|0);
      $872 = HEAP16[$871>>1]|0;
      $873 = $872 << 16 >> 16;
      $$off1 = (($873) + -11)|0;
      $switch2 = ($$off1>>>0)<(4);
      if ($switch2) {
       label = 131;
       break;
      }
      $874 = $3;
      $875 = ((($874)) + 1372|0);
      $876 = $4;
      $877 = (($876) - 1)|0;
      $878 = (($875) + ($877<<2)|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = $5;
      $881 = (($879) + ($880<<1)|0);
      $882 = HEAP16[$881>>1]|0;
      $883 = $882 << 16 >> 16;
      $$off3 = (($883) + -11)|0;
      $switch4 = ($$off3>>>0)<(4);
      if ($switch4) {
       label = 149;
       break;
      }
      STACKTOP = sp;return;
     }
     $884 = $4;
     $885 = $6;
     $886 = ($884|0)<($885|0);
     $887 = $3;
     $888 = ((($887)) + 1372|0);
     $889 = $4;
     if ($886) {
      $890 = (($889) + 1)|0;
      $891 = (($888) + ($890<<2)|0);
      $892 = HEAP32[$891>>2]|0;
      $893 = $5;
      $894 = (($893) - 1)|0;
      $895 = (($892) + ($894<<1)|0);
      $896 = HEAP16[$895>>1]|0;
      $897 = $896 << 16 >> 16;
      $$off5 = (($897) + -11)|0;
      $switch6 = ($$off5>>>0)<(4);
      if ($switch6) {
       label = 134;
       break;
      }
      $898 = $3;
      $899 = ((($898)) + 1372|0);
      $900 = $4;
      $901 = (($900) + 1)|0;
      $902 = (($899) + ($901<<2)|0);
      $903 = HEAP32[$902>>2]|0;
      $904 = $5;
      $905 = (($903) + ($904<<1)|0);
      $906 = HEAP16[$905>>1]|0;
      $907 = $906 << 16 >> 16;
      $$off7 = (($907) + -11)|0;
      $switch8 = ($$off7>>>0)<(4);
      if ($switch8) {
       label = 137;
       break;
      }
      $908 = $3;
      $909 = ((($908)) + 1372|0);
      $910 = $4;
      $911 = (($909) + ($910<<2)|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = $5;
      $914 = (($913) - 1)|0;
      $915 = (($912) + ($914<<1)|0);
      $916 = HEAP16[$915>>1]|0;
      $917 = $916 << 16 >> 16;
      $$off9 = (($917) + -11)|0;
      $switch10 = ($$off9>>>0)<(4);
      if ($switch10) {
       label = 131;
       break;
      }
      STACKTOP = sp;return;
     } else {
      $918 = (($888) + ($889<<2)|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = $5;
      $921 = (($920) - 1)|0;
      $922 = (($919) + ($921<<1)|0);
      $923 = HEAP16[$922>>1]|0;
      $924 = $923 << 16 >> 16;
      $$off11 = (($924) + -11)|0;
      $switch12 = ($$off11>>>0)<(4);
      if ($switch12) {
       label = 131;
       break;
      }
      $925 = $3;
      $926 = ((($925)) + 1372|0);
      $927 = $4;
      $928 = (($927) + 1)|0;
      $929 = (($926) + ($928<<2)|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = $5;
      $932 = (($931) - 1)|0;
      $933 = (($930) + ($932<<1)|0);
      $934 = HEAP16[$933>>1]|0;
      $935 = $934 << 16 >> 16;
      $$off13 = (($935) + -11)|0;
      $switch14 = ($$off13>>>0)<(4);
      if ($switch14) {
       label = 134;
       break;
      }
      $936 = $3;
      $937 = ((($936)) + 1372|0);
      $938 = $4;
      $939 = (($938) - 1)|0;
      $940 = (($937) + ($939<<2)|0);
      $941 = HEAP32[$940>>2]|0;
      $942 = $5;
      $943 = (($942) - 1)|0;
      $944 = (($941) + ($943<<1)|0);
      $945 = HEAP16[$944>>1]|0;
      $946 = $945 << 16 >> 16;
      $$off15 = (($946) + -11)|0;
      $switch16 = ($$off15>>>0)<(4);
      if ($switch16) {
       label = 152;
       break;
      }
      STACKTOP = sp;return;
     }
    }
    $947 = $5;
    $948 = $7;
    $949 = ($947|0)<($948|0);
    $950 = $4;
    $951 = $6;
    $952 = ($950|0)>($951|0);
    if (!($949)) {
     if ($952) {
      $1047 = $3;
      $1048 = ((($1047)) + 1372|0);
      $1049 = $4;
      $1050 = (($1049) - 1)|0;
      $1051 = (($1048) + ($1050<<2)|0);
      $1052 = HEAP32[$1051>>2]|0;
      $1053 = $5;
      $1054 = (($1052) + ($1053<<1)|0);
      $1055 = HEAP16[$1054>>1]|0;
      $1056 = $1055 << 16 >> 16;
      $$off35 = (($1056) + -11)|0;
      $switch36 = ($$off35>>>0)<(4);
      if ($switch36) {
       label = 149;
       break;
      }
      $1057 = $3;
      $1058 = ((($1057)) + 1372|0);
      $1059 = $4;
      $1060 = (($1059) - 1)|0;
      $1061 = (($1058) + ($1060<<2)|0);
      $1062 = HEAP32[$1061>>2]|0;
      $1063 = $5;
      $1064 = (($1063) - 1)|0;
      $1065 = (($1062) + ($1064<<1)|0);
      $1066 = HEAP16[$1065>>1]|0;
      $1067 = $1066 << 16 >> 16;
      $$off37 = (($1067) + -11)|0;
      $switch38 = ($$off37>>>0)<(4);
      if ($switch38) {
       label = 152;
       break;
      }
      $1068 = $3;
      $1069 = ((($1068)) + 1372|0);
      $1070 = $4;
      $1071 = (($1070) - 1)|0;
      $1072 = (($1069) + ($1071<<2)|0);
      $1073 = HEAP32[$1072>>2]|0;
      $1074 = $5;
      $1075 = (($1074) + 1)|0;
      $1076 = (($1073) + ($1075<<1)|0);
      $1077 = HEAP16[$1076>>1]|0;
      $1078 = $1077 << 16 >> 16;
      $$off39 = (($1078) + -11)|0;
      $switch40 = ($$off39>>>0)<(4);
      if ($switch40) {
       label = 146;
       break;
      }
      STACKTOP = sp;return;
     }
     $1079 = $4;
     $1080 = $6;
     $1081 = ($1079|0)<($1080|0);
     if (!($1081)) {
      STACKTOP = sp;return;
     }
     $1082 = $3;
     $1083 = ((($1082)) + 1372|0);
     $1084 = $4;
     $1085 = (($1084) + 1)|0;
     $1086 = (($1083) + ($1085<<2)|0);
     $1087 = HEAP32[$1086>>2]|0;
     $1088 = $5;
     $1089 = (($1087) + ($1088<<1)|0);
     $1090 = HEAP16[$1089>>1]|0;
     $1091 = $1090 << 16 >> 16;
     $$off41 = (($1091) + -11)|0;
     $switch42 = ($$off41>>>0)<(4);
     if ($switch42) {
      label = 137;
      break;
     }
     $1092 = $3;
     $1093 = ((($1092)) + 1372|0);
     $1094 = $4;
     $1095 = (($1094) + 1)|0;
     $1096 = (($1093) + ($1095<<2)|0);
     $1097 = HEAP32[$1096>>2]|0;
     $1098 = $5;
     $1099 = (($1098) + 1)|0;
     $1100 = (($1097) + ($1099<<1)|0);
     $1101 = HEAP16[$1100>>1]|0;
     $1102 = $1101 << 16 >> 16;
     $$off43 = (($1102) + -11)|0;
     $switch44 = ($$off43>>>0)<(4);
     if ($switch44) {
      label = 140;
      break;
     }
     $1103 = $3;
     $1104 = ((($1103)) + 1372|0);
     $1105 = $4;
     $1106 = (($1105) + 1)|0;
     $1107 = (($1104) + ($1106<<2)|0);
     $1108 = HEAP32[$1107>>2]|0;
     $1109 = $5;
     $1110 = (($1109) - 1)|0;
     $1111 = (($1108) + ($1110<<1)|0);
     $1112 = HEAP16[$1111>>1]|0;
     $1113 = $1112 << 16 >> 16;
     $$off45 = (($1113) + -11)|0;
     $switch46 = ($$off45>>>0)<(4);
     if ($switch46) {
      label = 134;
      break;
     }
     STACKTOP = sp;return;
    }
    if ($952) {
     $953 = $3;
     $954 = ((($953)) + 1372|0);
     $955 = $4;
     $956 = (($955) - 1)|0;
     $957 = (($954) + ($956<<2)|0);
     $958 = HEAP32[$957>>2]|0;
     $959 = $5;
     $960 = (($959) + 1)|0;
     $961 = (($958) + ($960<<1)|0);
     $962 = HEAP16[$961>>1]|0;
     $963 = $962 << 16 >> 16;
     $$off17 = (($963) + -11)|0;
     $switch18 = ($$off17>>>0)<(4);
     if ($switch18) {
      label = 146;
      break;
     }
     $964 = $3;
     $965 = ((($964)) + 1372|0);
     $966 = $4;
     $967 = (($966) - 1)|0;
     $968 = (($965) + ($967<<2)|0);
     $969 = HEAP32[$968>>2]|0;
     $970 = $5;
     $971 = (($969) + ($970<<1)|0);
     $972 = HEAP16[$971>>1]|0;
     $973 = $972 << 16 >> 16;
     $$off19 = (($973) + -11)|0;
     $switch20 = ($$off19>>>0)<(4);
     if ($switch20) {
      label = 149;
      break;
     }
     $974 = $3;
     $975 = ((($974)) + 1372|0);
     $976 = $4;
     $977 = (($975) + ($976<<2)|0);
     $978 = HEAP32[$977>>2]|0;
     $979 = $5;
     $980 = (($979) + 1)|0;
     $981 = (($978) + ($980<<1)|0);
     $982 = HEAP16[$981>>1]|0;
     $983 = $982 << 16 >> 16;
     $$off21 = (($983) + -11)|0;
     $switch22 = ($$off21>>>0)<(4);
     if ($switch22) {
      label = 143;
      break;
     }
     STACKTOP = sp;return;
    }
    $984 = $4;
    $985 = $6;
    $986 = ($984|0)<($985|0);
    $987 = $3;
    $988 = ((($987)) + 1372|0);
    $989 = $4;
    if ($986) {
     $990 = (($989) + 1)|0;
     $991 = (($988) + ($990<<2)|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = $5;
     $994 = (($993) + 1)|0;
     $995 = (($992) + ($994<<1)|0);
     $996 = HEAP16[$995>>1]|0;
     $997 = $996 << 16 >> 16;
     $$off23 = (($997) + -11)|0;
     $switch24 = ($$off23>>>0)<(4);
     if ($switch24) {
      label = 140;
      break;
     }
     $998 = $3;
     $999 = ((($998)) + 1372|0);
     $1000 = $4;
     $1001 = (($999) + ($1000<<2)|0);
     $1002 = HEAP32[$1001>>2]|0;
     $1003 = $5;
     $1004 = (($1003) + 1)|0;
     $1005 = (($1002) + ($1004<<1)|0);
     $1006 = HEAP16[$1005>>1]|0;
     $1007 = $1006 << 16 >> 16;
     $$off25 = (($1007) + -11)|0;
     $switch26 = ($$off25>>>0)<(4);
     if ($switch26) {
      label = 143;
      break;
     }
     $1008 = $3;
     $1009 = ((($1008)) + 1372|0);
     $1010 = $4;
     $1011 = (($1010) + 1)|0;
     $1012 = (($1009) + ($1011<<2)|0);
     $1013 = HEAP32[$1012>>2]|0;
     $1014 = $5;
     $1015 = (($1013) + ($1014<<1)|0);
     $1016 = HEAP16[$1015>>1]|0;
     $1017 = $1016 << 16 >> 16;
     $$off27 = (($1017) + -11)|0;
     $switch28 = ($$off27>>>0)<(4);
     if ($switch28) {
      label = 137;
      break;
     }
     STACKTOP = sp;return;
    } else {
     $1018 = (($988) + ($989<<2)|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = $5;
     $1021 = (($1020) + 1)|0;
     $1022 = (($1019) + ($1021<<1)|0);
     $1023 = HEAP16[$1022>>1]|0;
     $1024 = $1023 << 16 >> 16;
     $$off29 = (($1024) + -11)|0;
     $switch30 = ($$off29>>>0)<(4);
     if ($switch30) {
      label = 143;
      break;
     }
     $1025 = $3;
     $1026 = ((($1025)) + 1372|0);
     $1027 = $4;
     $1028 = (($1027) - 1)|0;
     $1029 = (($1026) + ($1028<<2)|0);
     $1030 = HEAP32[$1029>>2]|0;
     $1031 = $5;
     $1032 = (($1031) + 1)|0;
     $1033 = (($1030) + ($1032<<1)|0);
     $1034 = HEAP16[$1033>>1]|0;
     $1035 = $1034 << 16 >> 16;
     $$off31 = (($1035) + -11)|0;
     $switch32 = ($$off31>>>0)<(4);
     if ($switch32) {
      label = 146;
      break;
     }
     $1036 = $3;
     $1037 = ((($1036)) + 1372|0);
     $1038 = $4;
     $1039 = (($1038) + 1)|0;
     $1040 = (($1037) + ($1039<<2)|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $5;
     $1043 = (($1042) + 1)|0;
     $1044 = (($1041) + ($1043<<1)|0);
     $1045 = HEAP16[$1044>>1]|0;
     $1046 = $1045 << 16 >> 16;
     $$off33 = (($1046) + -11)|0;
     $switch34 = ($$off33>>>0)<(4);
     if ($switch34) {
      label = 140;
      break;
     }
     STACKTOP = sp;return;
    }
   } else {
    if ($849) {
     $1114 = $4;
     $1115 = $6;
     $1116 = ($1114|0)>($1115|0);
     if ($1116) {
      $1117 = $3;
      $1118 = ((($1117)) + 1372|0);
      $1119 = $4;
      $1120 = (($1119) - 1)|0;
      $1121 = (($1118) + ($1120<<2)|0);
      $1122 = HEAP32[$1121>>2]|0;
      $1123 = $5;
      $1124 = (($1123) - 1)|0;
      $1125 = (($1122) + ($1124<<1)|0);
      $1126 = HEAP16[$1125>>1]|0;
      $1127 = $1126 << 16 >> 16;
      $$off47 = (($1127) + -11)|0;
      $switch48 = ($$off47>>>0)<(4);
      if ($switch48) {
       label = 152;
       break;
      }
      $1128 = $3;
      $1129 = ((($1128)) + 1372|0);
      $1130 = $4;
      $1131 = (($1130) - 1)|0;
      $1132 = (($1129) + ($1131<<2)|0);
      $1133 = HEAP32[$1132>>2]|0;
      $1134 = $5;
      $1135 = (($1133) + ($1134<<1)|0);
      $1136 = HEAP16[$1135>>1]|0;
      $1137 = $1136 << 16 >> 16;
      $$off49 = (($1137) + -11)|0;
      $switch50 = ($$off49>>>0)<(4);
      if ($switch50) {
       label = 149;
       break;
      }
      $1138 = $3;
      $1139 = ((($1138)) + 1372|0);
      $1140 = $4;
      $1141 = (($1139) + ($1140<<2)|0);
      $1142 = HEAP32[$1141>>2]|0;
      $1143 = $5;
      $1144 = (($1143) - 1)|0;
      $1145 = (($1142) + ($1144<<1)|0);
      $1146 = HEAP16[$1145>>1]|0;
      $1147 = $1146 << 16 >> 16;
      $$off51 = (($1147) + -11)|0;
      $switch52 = ($$off51>>>0)<(4);
      if ($switch52) {
       label = 131;
       break;
      }
      STACKTOP = sp;return;
     }
     $1148 = $4;
     $1149 = $6;
     $1150 = ($1148|0)<($1149|0);
     $1151 = $3;
     $1152 = ((($1151)) + 1372|0);
     $1153 = $4;
     if ($1150) {
      $1154 = (($1153) + 1)|0;
      $1155 = (($1152) + ($1154<<2)|0);
      $1156 = HEAP32[$1155>>2]|0;
      $1157 = $5;
      $1158 = (($1157) - 1)|0;
      $1159 = (($1156) + ($1158<<1)|0);
      $1160 = HEAP16[$1159>>1]|0;
      $1161 = $1160 << 16 >> 16;
      $$off53 = (($1161) + -11)|0;
      $switch54 = ($$off53>>>0)<(4);
      if ($switch54) {
       label = 134;
       break;
      }
      $1162 = $3;
      $1163 = ((($1162)) + 1372|0);
      $1164 = $4;
      $1165 = (($1163) + ($1164<<2)|0);
      $1166 = HEAP32[$1165>>2]|0;
      $1167 = $5;
      $1168 = (($1167) - 1)|0;
      $1169 = (($1166) + ($1168<<1)|0);
      $1170 = HEAP16[$1169>>1]|0;
      $1171 = $1170 << 16 >> 16;
      $$off55 = (($1171) + -11)|0;
      $switch56 = ($$off55>>>0)<(4);
      if ($switch56) {
       label = 131;
       break;
      }
      $1172 = $3;
      $1173 = ((($1172)) + 1372|0);
      $1174 = $4;
      $1175 = (($1174) + 1)|0;
      $1176 = (($1173) + ($1175<<2)|0);
      $1177 = HEAP32[$1176>>2]|0;
      $1178 = $5;
      $1179 = (($1177) + ($1178<<1)|0);
      $1180 = HEAP16[$1179>>1]|0;
      $1181 = $1180 << 16 >> 16;
      $$off57 = (($1181) + -11)|0;
      $switch58 = ($$off57>>>0)<(4);
      if ($switch58) {
       label = 137;
       break;
      }
      STACKTOP = sp;return;
     } else {
      $1182 = (($1152) + ($1153<<2)|0);
      $1183 = HEAP32[$1182>>2]|0;
      $1184 = $5;
      $1185 = (($1184) - 1)|0;
      $1186 = (($1183) + ($1185<<1)|0);
      $1187 = HEAP16[$1186>>1]|0;
      $1188 = $1187 << 16 >> 16;
      $$off59 = (($1188) + -11)|0;
      $switch60 = ($$off59>>>0)<(4);
      if ($switch60) {
       label = 131;
       break;
      }
      $1189 = $3;
      $1190 = ((($1189)) + 1372|0);
      $1191 = $4;
      $1192 = (($1191) - 1)|0;
      $1193 = (($1190) + ($1192<<2)|0);
      $1194 = HEAP32[$1193>>2]|0;
      $1195 = $5;
      $1196 = (($1195) - 1)|0;
      $1197 = (($1194) + ($1196<<1)|0);
      $1198 = HEAP16[$1197>>1]|0;
      $1199 = $1198 << 16 >> 16;
      $$off61 = (($1199) + -11)|0;
      $switch62 = ($$off61>>>0)<(4);
      if ($switch62) {
       label = 152;
       break;
      }
      $1200 = $3;
      $1201 = ((($1200)) + 1372|0);
      $1202 = $4;
      $1203 = (($1202) + 1)|0;
      $1204 = (($1201) + ($1203<<2)|0);
      $1205 = HEAP32[$1204>>2]|0;
      $1206 = $5;
      $1207 = (($1206) - 1)|0;
      $1208 = (($1205) + ($1207<<1)|0);
      $1209 = HEAP16[$1208>>1]|0;
      $1210 = $1209 << 16 >> 16;
      $$off63 = (($1210) + -11)|0;
      $switch64 = ($$off63>>>0)<(4);
      if ($switch64) {
       label = 134;
       break;
      }
      STACKTOP = sp;return;
     }
    }
    $1211 = $5;
    $1212 = $7;
    $1213 = ($1211|0)<($1212|0);
    $1214 = $4;
    $1215 = $6;
    $1216 = ($1214|0)>($1215|0);
    if (!($1213)) {
     if ($1216) {
      $1311 = $3;
      $1312 = ((($1311)) + 1372|0);
      $1313 = $4;
      $1314 = (($1313) - 1)|0;
      $1315 = (($1312) + ($1314<<2)|0);
      $1316 = HEAP32[$1315>>2]|0;
      $1317 = $5;
      $1318 = (($1316) + ($1317<<1)|0);
      $1319 = HEAP16[$1318>>1]|0;
      $1320 = $1319 << 16 >> 16;
      $$off83 = (($1320) + -11)|0;
      $switch84 = ($$off83>>>0)<(4);
      if ($switch84) {
       label = 149;
       break;
      }
      $1321 = $3;
      $1322 = ((($1321)) + 1372|0);
      $1323 = $4;
      $1324 = (($1323) - 1)|0;
      $1325 = (($1322) + ($1324<<2)|0);
      $1326 = HEAP32[$1325>>2]|0;
      $1327 = $5;
      $1328 = (($1327) + 1)|0;
      $1329 = (($1326) + ($1328<<1)|0);
      $1330 = HEAP16[$1329>>1]|0;
      $1331 = $1330 << 16 >> 16;
      $$off85 = (($1331) + -11)|0;
      $switch86 = ($$off85>>>0)<(4);
      if ($switch86) {
       label = 146;
       break;
      }
      $1332 = $3;
      $1333 = ((($1332)) + 1372|0);
      $1334 = $4;
      $1335 = (($1334) - 1)|0;
      $1336 = (($1333) + ($1335<<2)|0);
      $1337 = HEAP32[$1336>>2]|0;
      $1338 = $5;
      $1339 = (($1338) - 1)|0;
      $1340 = (($1337) + ($1339<<1)|0);
      $1341 = HEAP16[$1340>>1]|0;
      $1342 = $1341 << 16 >> 16;
      $$off87 = (($1342) + -11)|0;
      $switch88 = ($$off87>>>0)<(4);
      if ($switch88) {
       label = 152;
       break;
      }
      STACKTOP = sp;return;
     }
     $1343 = $4;
     $1344 = $6;
     $1345 = ($1343|0)<($1344|0);
     if (!($1345)) {
      STACKTOP = sp;return;
     }
     $1346 = $3;
     $1347 = ((($1346)) + 1372|0);
     $1348 = $4;
     $1349 = (($1348) + 1)|0;
     $1350 = (($1347) + ($1349<<2)|0);
     $1351 = HEAP32[$1350>>2]|0;
     $1352 = $5;
     $1353 = (($1351) + ($1352<<1)|0);
     $1354 = HEAP16[$1353>>1]|0;
     $1355 = $1354 << 16 >> 16;
     $$off89 = (($1355) + -11)|0;
     $switch90 = ($$off89>>>0)<(4);
     if ($switch90) {
      label = 137;
      break;
     }
     $1356 = $3;
     $1357 = ((($1356)) + 1372|0);
     $1358 = $4;
     $1359 = (($1358) + 1)|0;
     $1360 = (($1357) + ($1359<<2)|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = $5;
     $1363 = (($1362) - 1)|0;
     $1364 = (($1361) + ($1363<<1)|0);
     $1365 = HEAP16[$1364>>1]|0;
     $1366 = $1365 << 16 >> 16;
     $$off91 = (($1366) + -11)|0;
     $switch92 = ($$off91>>>0)<(4);
     if ($switch92) {
      label = 134;
      break;
     }
     $1367 = $3;
     $1368 = ((($1367)) + 1372|0);
     $1369 = $4;
     $1370 = (($1369) + 1)|0;
     $1371 = (($1368) + ($1370<<2)|0);
     $1372 = HEAP32[$1371>>2]|0;
     $1373 = $5;
     $1374 = (($1373) + 1)|0;
     $1375 = (($1372) + ($1374<<1)|0);
     $1376 = HEAP16[$1375>>1]|0;
     $1377 = $1376 << 16 >> 16;
     $$off93 = (($1377) + -11)|0;
     $switch94 = ($$off93>>>0)<(4);
     if ($switch94) {
      label = 140;
      break;
     }
     STACKTOP = sp;return;
    }
    if ($1216) {
     $1217 = $3;
     $1218 = ((($1217)) + 1372|0);
     $1219 = $4;
     $1220 = (($1219) - 1)|0;
     $1221 = (($1218) + ($1220<<2)|0);
     $1222 = HEAP32[$1221>>2]|0;
     $1223 = $5;
     $1224 = (($1223) + 1)|0;
     $1225 = (($1222) + ($1224<<1)|0);
     $1226 = HEAP16[$1225>>1]|0;
     $1227 = $1226 << 16 >> 16;
     $$off65 = (($1227) + -11)|0;
     $switch66 = ($$off65>>>0)<(4);
     if ($switch66) {
      label = 146;
      break;
     }
     $1228 = $3;
     $1229 = ((($1228)) + 1372|0);
     $1230 = $4;
     $1231 = (($1229) + ($1230<<2)|0);
     $1232 = HEAP32[$1231>>2]|0;
     $1233 = $5;
     $1234 = (($1233) + 1)|0;
     $1235 = (($1232) + ($1234<<1)|0);
     $1236 = HEAP16[$1235>>1]|0;
     $1237 = $1236 << 16 >> 16;
     $$off67 = (($1237) + -11)|0;
     $switch68 = ($$off67>>>0)<(4);
     if ($switch68) {
      label = 143;
      break;
     }
     $1238 = $3;
     $1239 = ((($1238)) + 1372|0);
     $1240 = $4;
     $1241 = (($1240) - 1)|0;
     $1242 = (($1239) + ($1241<<2)|0);
     $1243 = HEAP32[$1242>>2]|0;
     $1244 = $5;
     $1245 = (($1243) + ($1244<<1)|0);
     $1246 = HEAP16[$1245>>1]|0;
     $1247 = $1246 << 16 >> 16;
     $$off69 = (($1247) + -11)|0;
     $switch70 = ($$off69>>>0)<(4);
     if ($switch70) {
      label = 149;
      break;
     }
     STACKTOP = sp;return;
    }
    $1248 = $4;
    $1249 = $6;
    $1250 = ($1248|0)<($1249|0);
    $1251 = $3;
    $1252 = ((($1251)) + 1372|0);
    $1253 = $4;
    if ($1250) {
     $1254 = (($1253) + 1)|0;
     $1255 = (($1252) + ($1254<<2)|0);
     $1256 = HEAP32[$1255>>2]|0;
     $1257 = $5;
     $1258 = (($1257) + 1)|0;
     $1259 = (($1256) + ($1258<<1)|0);
     $1260 = HEAP16[$1259>>1]|0;
     $1261 = $1260 << 16 >> 16;
     $$off71 = (($1261) + -11)|0;
     $switch72 = ($$off71>>>0)<(4);
     if ($switch72) {
      label = 140;
      break;
     }
     $1262 = $3;
     $1263 = ((($1262)) + 1372|0);
     $1264 = $4;
     $1265 = (($1264) + 1)|0;
     $1266 = (($1263) + ($1265<<2)|0);
     $1267 = HEAP32[$1266>>2]|0;
     $1268 = $5;
     $1269 = (($1267) + ($1268<<1)|0);
     $1270 = HEAP16[$1269>>1]|0;
     $1271 = $1270 << 16 >> 16;
     $$off73 = (($1271) + -11)|0;
     $switch74 = ($$off73>>>0)<(4);
     if ($switch74) {
      label = 137;
      break;
     }
     $1272 = $3;
     $1273 = ((($1272)) + 1372|0);
     $1274 = $4;
     $1275 = (($1273) + ($1274<<2)|0);
     $1276 = HEAP32[$1275>>2]|0;
     $1277 = $5;
     $1278 = (($1277) + 1)|0;
     $1279 = (($1276) + ($1278<<1)|0);
     $1280 = HEAP16[$1279>>1]|0;
     $1281 = $1280 << 16 >> 16;
     $$off75 = (($1281) + -11)|0;
     $switch76 = ($$off75>>>0)<(4);
     if ($switch76) {
      label = 143;
      break;
     }
     STACKTOP = sp;return;
    } else {
     $1282 = (($1252) + ($1253<<2)|0);
     $1283 = HEAP32[$1282>>2]|0;
     $1284 = $5;
     $1285 = (($1284) + 1)|0;
     $1286 = (($1283) + ($1285<<1)|0);
     $1287 = HEAP16[$1286>>1]|0;
     $1288 = $1287 << 16 >> 16;
     $$off77 = (($1288) + -11)|0;
     $switch78 = ($$off77>>>0)<(4);
     if ($switch78) {
      label = 143;
      break;
     }
     $1289 = $3;
     $1290 = ((($1289)) + 1372|0);
     $1291 = $4;
     $1292 = (($1291) + 1)|0;
     $1293 = (($1290) + ($1292<<2)|0);
     $1294 = HEAP32[$1293>>2]|0;
     $1295 = $5;
     $1296 = (($1295) + 1)|0;
     $1297 = (($1294) + ($1296<<1)|0);
     $1298 = HEAP16[$1297>>1]|0;
     $1299 = $1298 << 16 >> 16;
     $$off79 = (($1299) + -11)|0;
     $switch80 = ($$off79>>>0)<(4);
     if ($switch80) {
      label = 140;
      break;
     }
     $1300 = $3;
     $1301 = ((($1300)) + 1372|0);
     $1302 = $4;
     $1303 = (($1302) - 1)|0;
     $1304 = (($1301) + ($1303<<2)|0);
     $1305 = HEAP32[$1304>>2]|0;
     $1306 = $5;
     $1307 = (($1306) + 1)|0;
     $1308 = (($1305) + ($1307<<1)|0);
     $1309 = HEAP16[$1308>>1]|0;
     $1310 = $1309 << 16 >> 16;
     $$off81 = (($1310) + -11)|0;
     $switch82 = ($$off81>>>0)<(4);
     if ($switch82) {
      label = 146;
      break;
     }
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 131) {
  $1378 = $3;
  $1379 = ((($1378)) + 1372|0);
  $1380 = $4;
  $1381 = (($1379) + ($1380<<2)|0);
  $1382 = HEAP32[$1381>>2]|0;
  $1383 = $5;
  $1384 = (($1382) + ($1383<<1)|0);
  HEAP16[$1384>>1] = 44;
  $1385 = $8;
  $1386 = $1385&65535;
  $1387 = $3;
  $1388 = ((($1387)) + 1804|0);
  $1389 = $4;
  $1390 = (($1388) + ($1389<<2)|0);
  $1391 = HEAP32[$1390>>2]|0;
  $1392 = $5;
  $1393 = (($1391) + ($1392<<1)|0);
  HEAP16[$1393>>1] = $1386;
  $1394 = $3;
  $1395 = ((($1394)) + 1372|0);
  $1396 = $4;
  $1397 = (($1395) + ($1396<<2)|0);
  $1398 = HEAP32[$1397>>2]|0;
  $1399 = $5;
  $1400 = (($1399) - 1)|0;
  $1401 = (($1398) + ($1400<<1)|0);
  HEAP16[$1401>>1] = 43;
  $1402 = $3;
  $1403 = ((($1402)) + 1804|0);
  $1404 = $4;
  $1405 = (($1403) + ($1404<<2)|0);
  $1406 = HEAP32[$1405>>2]|0;
  $1407 = $5;
  $1408 = (($1407) - 1)|0;
  $1409 = (($1406) + ($1408<<1)|0);
  HEAP16[$1409>>1] = 34;
  $1410 = $4;
  $1411 = $3;
  $1412 = ((($1411)) + 104|0);
  $1413 = HEAP32[$1412>>2]|0;
  $1414 = (($1410) - ($1413))|0;
  $1415 = ($1414>>>0)<=(20);
  if (!($1415)) {
   STACKTOP = sp;return;
  }
  $1416 = $5;
  $1417 = $3;
  $1418 = ((($1417)) + 108|0);
  $1419 = HEAP32[$1418>>2]|0;
  $1420 = (($1416) - ($1419))|0;
  $1421 = ($1420>>>0)<=(15);
  if (!($1421)) {
   STACKTOP = sp;return;
  }
  $1422 = $3;
  $1423 = ((($1422)) + 44|0);
  $1424 = ((($1423)) + 27|0);
  HEAP8[$1424>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 134) {
  $1425 = $3;
  $1426 = ((($1425)) + 1372|0);
  $1427 = $4;
  $1428 = (($1426) + ($1427<<2)|0);
  $1429 = HEAP32[$1428>>2]|0;
  $1430 = $5;
  $1431 = (($1429) + ($1430<<1)|0);
  HEAP16[$1431>>1] = 46;
  $1432 = $8;
  $1433 = $1432&65535;
  $1434 = $3;
  $1435 = ((($1434)) + 1804|0);
  $1436 = $4;
  $1437 = (($1435) + ($1436<<2)|0);
  $1438 = HEAP32[$1437>>2]|0;
  $1439 = $5;
  $1440 = (($1438) + ($1439<<1)|0);
  HEAP16[$1440>>1] = $1433;
  $1441 = $3;
  $1442 = ((($1441)) + 1372|0);
  $1443 = $4;
  $1444 = (($1443) + 1)|0;
  $1445 = (($1442) + ($1444<<2)|0);
  $1446 = HEAP32[$1445>>2]|0;
  $1447 = $5;
  $1448 = (($1447) - 1)|0;
  $1449 = (($1446) + ($1448<<1)|0);
  HEAP16[$1449>>1] = 45;
  $1450 = $3;
  $1451 = ((($1450)) + 1804|0);
  $1452 = $4;
  $1453 = (($1452) + 1)|0;
  $1454 = (($1451) + ($1453<<2)|0);
  $1455 = HEAP32[$1454>>2]|0;
  $1456 = $5;
  $1457 = (($1456) - 1)|0;
  $1458 = (($1455) + ($1457<<1)|0);
  HEAP16[$1458>>1] = 34;
  $1459 = $4;
  $1460 = $3;
  $1461 = ((($1460)) + 104|0);
  $1462 = HEAP32[$1461>>2]|0;
  $1463 = (($1459) - ($1462))|0;
  $1464 = ($1463>>>0)<=(20);
  if (!($1464)) {
   STACKTOP = sp;return;
  }
  $1465 = $5;
  $1466 = $3;
  $1467 = ((($1466)) + 108|0);
  $1468 = HEAP32[$1467>>2]|0;
  $1469 = (($1465) - ($1468))|0;
  $1470 = ($1469>>>0)<=(15);
  if (!($1470)) {
   STACKTOP = sp;return;
  }
  $1471 = $3;
  $1472 = ((($1471)) + 44|0);
  $1473 = ((($1472)) + 27|0);
  HEAP8[$1473>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 137) {
  $1474 = $3;
  $1475 = ((($1474)) + 1372|0);
  $1476 = $4;
  $1477 = (($1475) + ($1476<<2)|0);
  $1478 = HEAP32[$1477>>2]|0;
  $1479 = $5;
  $1480 = (($1478) + ($1479<<1)|0);
  HEAP16[$1480>>1] = 48;
  $1481 = $8;
  $1482 = $1481&65535;
  $1483 = $3;
  $1484 = ((($1483)) + 1804|0);
  $1485 = $4;
  $1486 = (($1484) + ($1485<<2)|0);
  $1487 = HEAP32[$1486>>2]|0;
  $1488 = $5;
  $1489 = (($1487) + ($1488<<1)|0);
  HEAP16[$1489>>1] = $1482;
  $1490 = $3;
  $1491 = ((($1490)) + 1372|0);
  $1492 = $4;
  $1493 = (($1492) + 1)|0;
  $1494 = (($1491) + ($1493<<2)|0);
  $1495 = HEAP32[$1494>>2]|0;
  $1496 = $5;
  $1497 = (($1495) + ($1496<<1)|0);
  HEAP16[$1497>>1] = 47;
  $1498 = $3;
  $1499 = ((($1498)) + 1804|0);
  $1500 = $4;
  $1501 = (($1500) + 1)|0;
  $1502 = (($1499) + ($1501<<2)|0);
  $1503 = HEAP32[$1502>>2]|0;
  $1504 = $5;
  $1505 = (($1503) + ($1504<<1)|0);
  HEAP16[$1505>>1] = 34;
  $1506 = $4;
  $1507 = $3;
  $1508 = ((($1507)) + 104|0);
  $1509 = HEAP32[$1508>>2]|0;
  $1510 = (($1506) - ($1509))|0;
  $1511 = ($1510>>>0)<=(20);
  if (!($1511)) {
   STACKTOP = sp;return;
  }
  $1512 = $5;
  $1513 = $3;
  $1514 = ((($1513)) + 108|0);
  $1515 = HEAP32[$1514>>2]|0;
  $1516 = (($1512) - ($1515))|0;
  $1517 = ($1516>>>0)<=(15);
  if (!($1517)) {
   STACKTOP = sp;return;
  }
  $1518 = $3;
  $1519 = ((($1518)) + 44|0);
  $1520 = ((($1519)) + 27|0);
  HEAP8[$1520>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 140) {
  $1521 = $3;
  $1522 = ((($1521)) + 1372|0);
  $1523 = $4;
  $1524 = (($1522) + ($1523<<2)|0);
  $1525 = HEAP32[$1524>>2]|0;
  $1526 = $5;
  $1527 = (($1525) + ($1526<<1)|0);
  HEAP16[$1527>>1] = 50;
  $1528 = $8;
  $1529 = $1528&65535;
  $1530 = $3;
  $1531 = ((($1530)) + 1804|0);
  $1532 = $4;
  $1533 = (($1531) + ($1532<<2)|0);
  $1534 = HEAP32[$1533>>2]|0;
  $1535 = $5;
  $1536 = (($1534) + ($1535<<1)|0);
  HEAP16[$1536>>1] = $1529;
  $1537 = $3;
  $1538 = ((($1537)) + 1372|0);
  $1539 = $4;
  $1540 = (($1539) + 1)|0;
  $1541 = (($1538) + ($1540<<2)|0);
  $1542 = HEAP32[$1541>>2]|0;
  $1543 = $5;
  $1544 = (($1543) + 1)|0;
  $1545 = (($1542) + ($1544<<1)|0);
  HEAP16[$1545>>1] = 49;
  $1546 = $3;
  $1547 = ((($1546)) + 1804|0);
  $1548 = $4;
  $1549 = (($1548) + 1)|0;
  $1550 = (($1547) + ($1549<<2)|0);
  $1551 = HEAP32[$1550>>2]|0;
  $1552 = $5;
  $1553 = (($1552) + 1)|0;
  $1554 = (($1551) + ($1553<<1)|0);
  HEAP16[$1554>>1] = 34;
  $1555 = $4;
  $1556 = $3;
  $1557 = ((($1556)) + 104|0);
  $1558 = HEAP32[$1557>>2]|0;
  $1559 = (($1555) - ($1558))|0;
  $1560 = ($1559>>>0)<=(20);
  if (!($1560)) {
   STACKTOP = sp;return;
  }
  $1561 = $5;
  $1562 = $3;
  $1563 = ((($1562)) + 108|0);
  $1564 = HEAP32[$1563>>2]|0;
  $1565 = (($1561) - ($1564))|0;
  $1566 = ($1565>>>0)<=(15);
  if (!($1566)) {
   STACKTOP = sp;return;
  }
  $1567 = $3;
  $1568 = ((($1567)) + 44|0);
  $1569 = ((($1568)) + 27|0);
  HEAP8[$1569>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 143) {
  $1570 = $3;
  $1571 = ((($1570)) + 1372|0);
  $1572 = $4;
  $1573 = (($1571) + ($1572<<2)|0);
  $1574 = HEAP32[$1573>>2]|0;
  $1575 = $5;
  $1576 = (($1574) + ($1575<<1)|0);
  HEAP16[$1576>>1] = 52;
  $1577 = $8;
  $1578 = $1577&65535;
  $1579 = $3;
  $1580 = ((($1579)) + 1804|0);
  $1581 = $4;
  $1582 = (($1580) + ($1581<<2)|0);
  $1583 = HEAP32[$1582>>2]|0;
  $1584 = $5;
  $1585 = (($1583) + ($1584<<1)|0);
  HEAP16[$1585>>1] = $1578;
  $1586 = $3;
  $1587 = ((($1586)) + 1372|0);
  $1588 = $4;
  $1589 = (($1587) + ($1588<<2)|0);
  $1590 = HEAP32[$1589>>2]|0;
  $1591 = $5;
  $1592 = (($1591) + 1)|0;
  $1593 = (($1590) + ($1592<<1)|0);
  HEAP16[$1593>>1] = 51;
  $1594 = $3;
  $1595 = ((($1594)) + 1804|0);
  $1596 = $4;
  $1597 = (($1595) + ($1596<<2)|0);
  $1598 = HEAP32[$1597>>2]|0;
  $1599 = $5;
  $1600 = (($1599) + 1)|0;
  $1601 = (($1598) + ($1600<<1)|0);
  HEAP16[$1601>>1] = 34;
  $1602 = $4;
  $1603 = $3;
  $1604 = ((($1603)) + 104|0);
  $1605 = HEAP32[$1604>>2]|0;
  $1606 = (($1602) - ($1605))|0;
  $1607 = ($1606>>>0)<=(20);
  if (!($1607)) {
   STACKTOP = sp;return;
  }
  $1608 = $5;
  $1609 = $3;
  $1610 = ((($1609)) + 108|0);
  $1611 = HEAP32[$1610>>2]|0;
  $1612 = (($1608) - ($1611))|0;
  $1613 = ($1612>>>0)<=(15);
  if (!($1613)) {
   STACKTOP = sp;return;
  }
  $1614 = $3;
  $1615 = ((($1614)) + 44|0);
  $1616 = ((($1615)) + 27|0);
  HEAP8[$1616>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 146) {
  $1617 = $3;
  $1618 = ((($1617)) + 1372|0);
  $1619 = $4;
  $1620 = (($1618) + ($1619<<2)|0);
  $1621 = HEAP32[$1620>>2]|0;
  $1622 = $5;
  $1623 = (($1621) + ($1622<<1)|0);
  HEAP16[$1623>>1] = 54;
  $1624 = $8;
  $1625 = $1624&65535;
  $1626 = $3;
  $1627 = ((($1626)) + 1804|0);
  $1628 = $4;
  $1629 = (($1627) + ($1628<<2)|0);
  $1630 = HEAP32[$1629>>2]|0;
  $1631 = $5;
  $1632 = (($1630) + ($1631<<1)|0);
  HEAP16[$1632>>1] = $1625;
  $1633 = $3;
  $1634 = ((($1633)) + 1372|0);
  $1635 = $4;
  $1636 = (($1635) - 1)|0;
  $1637 = (($1634) + ($1636<<2)|0);
  $1638 = HEAP32[$1637>>2]|0;
  $1639 = $5;
  $1640 = (($1639) + 1)|0;
  $1641 = (($1638) + ($1640<<1)|0);
  HEAP16[$1641>>1] = 53;
  $1642 = $3;
  $1643 = ((($1642)) + 1804|0);
  $1644 = $4;
  $1645 = (($1644) - 1)|0;
  $1646 = (($1643) + ($1645<<2)|0);
  $1647 = HEAP32[$1646>>2]|0;
  $1648 = $5;
  $1649 = (($1648) + 1)|0;
  $1650 = (($1647) + ($1649<<1)|0);
  HEAP16[$1650>>1] = 34;
  $1651 = $4;
  $1652 = $3;
  $1653 = ((($1652)) + 104|0);
  $1654 = HEAP32[$1653>>2]|0;
  $1655 = (($1651) - ($1654))|0;
  $1656 = ($1655>>>0)<=(20);
  if (!($1656)) {
   STACKTOP = sp;return;
  }
  $1657 = $5;
  $1658 = $3;
  $1659 = ((($1658)) + 108|0);
  $1660 = HEAP32[$1659>>2]|0;
  $1661 = (($1657) - ($1660))|0;
  $1662 = ($1661>>>0)<=(15);
  if (!($1662)) {
   STACKTOP = sp;return;
  }
  $1663 = $3;
  $1664 = ((($1663)) + 44|0);
  $1665 = ((($1664)) + 27|0);
  HEAP8[$1665>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 149) {
  $1666 = $3;
  $1667 = ((($1666)) + 1372|0);
  $1668 = $4;
  $1669 = (($1667) + ($1668<<2)|0);
  $1670 = HEAP32[$1669>>2]|0;
  $1671 = $5;
  $1672 = (($1670) + ($1671<<1)|0);
  HEAP16[$1672>>1] = 56;
  $1673 = $8;
  $1674 = $1673&65535;
  $1675 = $3;
  $1676 = ((($1675)) + 1804|0);
  $1677 = $4;
  $1678 = (($1676) + ($1677<<2)|0);
  $1679 = HEAP32[$1678>>2]|0;
  $1680 = $5;
  $1681 = (($1679) + ($1680<<1)|0);
  HEAP16[$1681>>1] = $1674;
  $1682 = $3;
  $1683 = ((($1682)) + 1372|0);
  $1684 = $4;
  $1685 = (($1684) - 1)|0;
  $1686 = (($1683) + ($1685<<2)|0);
  $1687 = HEAP32[$1686>>2]|0;
  $1688 = $5;
  $1689 = (($1687) + ($1688<<1)|0);
  HEAP16[$1689>>1] = 55;
  $1690 = $3;
  $1691 = ((($1690)) + 1804|0);
  $1692 = $4;
  $1693 = (($1692) - 1)|0;
  $1694 = (($1691) + ($1693<<2)|0);
  $1695 = HEAP32[$1694>>2]|0;
  $1696 = $5;
  $1697 = (($1695) + ($1696<<1)|0);
  HEAP16[$1697>>1] = 34;
  $1698 = $4;
  $1699 = $3;
  $1700 = ((($1699)) + 104|0);
  $1701 = HEAP32[$1700>>2]|0;
  $1702 = (($1698) - ($1701))|0;
  $1703 = ($1702>>>0)<=(20);
  if (!($1703)) {
   STACKTOP = sp;return;
  }
  $1704 = $5;
  $1705 = $3;
  $1706 = ((($1705)) + 108|0);
  $1707 = HEAP32[$1706>>2]|0;
  $1708 = (($1704) - ($1707))|0;
  $1709 = ($1708>>>0)<=(15);
  if (!($1709)) {
   STACKTOP = sp;return;
  }
  $1710 = $3;
  $1711 = ((($1710)) + 44|0);
  $1712 = ((($1711)) + 27|0);
  HEAP8[$1712>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 152) {
  $1713 = $3;
  $1714 = ((($1713)) + 1372|0);
  $1715 = $4;
  $1716 = (($1714) + ($1715<<2)|0);
  $1717 = HEAP32[$1716>>2]|0;
  $1718 = $5;
  $1719 = (($1717) + ($1718<<1)|0);
  HEAP16[$1719>>1] = 58;
  $1720 = $8;
  $1721 = $1720&65535;
  $1722 = $3;
  $1723 = ((($1722)) + 1804|0);
  $1724 = $4;
  $1725 = (($1723) + ($1724<<2)|0);
  $1726 = HEAP32[$1725>>2]|0;
  $1727 = $5;
  $1728 = (($1726) + ($1727<<1)|0);
  HEAP16[$1728>>1] = $1721;
  $1729 = $3;
  $1730 = ((($1729)) + 1372|0);
  $1731 = $4;
  $1732 = (($1731) - 1)|0;
  $1733 = (($1730) + ($1732<<2)|0);
  $1734 = HEAP32[$1733>>2]|0;
  $1735 = $5;
  $1736 = (($1735) - 1)|0;
  $1737 = (($1734) + ($1736<<1)|0);
  HEAP16[$1737>>1] = 57;
  $1738 = $3;
  $1739 = ((($1738)) + 1804|0);
  $1740 = $4;
  $1741 = (($1740) - 1)|0;
  $1742 = (($1739) + ($1741<<2)|0);
  $1743 = HEAP32[$1742>>2]|0;
  $1744 = $5;
  $1745 = (($1744) - 1)|0;
  $1746 = (($1743) + ($1745<<1)|0);
  HEAP16[$1746>>1] = 34;
  $1747 = $4;
  $1748 = $3;
  $1749 = ((($1748)) + 104|0);
  $1750 = HEAP32[$1749>>2]|0;
  $1751 = (($1747) - ($1750))|0;
  $1752 = ($1751>>>0)<=(20);
  if (!($1752)) {
   STACKTOP = sp;return;
  }
  $1753 = $5;
  $1754 = $3;
  $1755 = ((($1754)) + 108|0);
  $1756 = HEAP32[$1755>>2]|0;
  $1757 = (($1753) - ($1756))|0;
  $1758 = ($1757>>>0)<=(15);
  if (!($1758)) {
   STACKTOP = sp;return;
  }
  $1759 = $3;
  $1760 = ((($1759)) + 44|0);
  $1761 = ((($1760)) + 27|0);
  HEAP8[$1761>>0] = 1;
  STACKTOP = sp;return;
 }
}
function _Landroid_1_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 44;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 43;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 34;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 44;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 2)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 1)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 2)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($98) - 1)|0;
  $100 = (($97) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($102) - 2)|0;
  $104 = (($101) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = ($106|0)==(11);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $4;
   $111 = (($110) - 1)|0;
   $112 = (($109) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $5;
   $115 = (($114) - 2)|0;
   $116 = (($113) + ($115<<1)|0);
   HEAP16[$116>>1] = 13;
  }
  $117 = $4;
  $118 = $3;
  $119 = ((($118)) + 104|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($117) - ($120))|0;
  $122 = ($121>>>0)<=(20);
  if (!($122)) {
   STACKTOP = sp;return;
  }
  $123 = $5;
  $124 = $3;
  $125 = ((($124)) + 108|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  $128 = ($127>>>0)<=(15);
  if (!($128)) {
   STACKTOP = sp;return;
  }
  $129 = $3;
  $130 = ((($129)) + 44|0);
  $131 = ((($130)) + 30|0);
  HEAP8[$131>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $132 = $3;
  $133 = $4;
  $134 = $5;
  _Landroid($132,$133,$134);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_2_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 44;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 43;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 35;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 44;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 2)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 1)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 2)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($98) - 1)|0;
  $100 = (($97) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($102) - 2)|0;
  $104 = (($101) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = ($106|0)==(11);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $4;
   $111 = (($110) - 1)|0;
   $112 = (($109) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $5;
   $115 = (($114) - 2)|0;
   $116 = (($113) + ($115<<1)|0);
   HEAP16[$116>>1] = 13;
  }
  $117 = $4;
  $118 = $3;
  $119 = ((($118)) + 104|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($117) - ($120))|0;
  $122 = ($121>>>0)<=(20);
  if (!($122)) {
   STACKTOP = sp;return;
  }
  $123 = $5;
  $124 = $3;
  $125 = ((($124)) + 108|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  $128 = ($127>>>0)<=(15);
  if (!($128)) {
   STACKTOP = sp;return;
  }
  $129 = $3;
  $130 = ((($129)) + 44|0);
  $131 = ((($130)) + 30|0);
  HEAP8[$131>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $132 = $3;
  $133 = $4;
  $134 = $5;
  _Landroid($132,$133,$134);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_1_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 48;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 47;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) + 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 34;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 48;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 2)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 2)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 1)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($101) - 1)|0;
  $103 = (($100) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = ($105|0)==(11);
  if ($106) {
   $107 = $3;
   $108 = ((($107)) + 1372|0);
   $109 = $4;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = $4;
  $132 = $5;
  _Landroid($130,$131,$132);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_2_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 48;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 47;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) + 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 37;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 48;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 2)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 2)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 1)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($101) - 1)|0;
  $103 = (($100) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = ($105|0)==(11);
  if ($106) {
   $107 = $3;
   $108 = ((($107)) + 1372|0);
   $109 = $4;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = $4;
  $132 = $5;
  _Landroid($130,$131,$132);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 52;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 51;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 34;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 52;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($80) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($88) + 1)|0;
   $90 = (($87) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $5;
   $93 = (($91) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 1)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = ($103|0)==(11);
  if ($104) {
   $105 = $3;
   $106 = ((($105)) + 1372|0);
   $107 = $4;
   $108 = (($107) - 1)|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $5;
   $112 = (($110) + ($111<<1)|0);
   HEAP16[$112>>1] = 13;
  }
  $113 = $4;
  $114 = $3;
  $115 = ((($114)) + 104|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) - ($116))|0;
  $118 = ($117>>>0)<=(20);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = $5;
  $120 = $3;
  $121 = ((($120)) + 108|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) - ($122))|0;
  $124 = ($123>>>0)<=(15);
  if (!($124)) {
   STACKTOP = sp;return;
  }
  $125 = $3;
  $126 = ((($125)) + 44|0);
  $127 = ((($126)) + 30|0);
  HEAP8[$127>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $128 = $3;
  $129 = $4;
  $130 = $5;
  _Landroid($128,$129,$130);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 52;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 51;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 39;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 52;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($80) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($88) + 1)|0;
   $90 = (($87) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $5;
   $93 = (($91) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 1)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = ($103|0)==(11);
  if ($104) {
   $105 = $3;
   $106 = ((($105)) + 1372|0);
   $107 = $4;
   $108 = (($107) - 1)|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $5;
   $112 = (($110) + ($111<<1)|0);
   HEAP16[$112>>1] = 13;
  }
  $113 = $4;
  $114 = $3;
  $115 = ((($114)) + 104|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) - ($116))|0;
  $118 = ($117>>>0)<=(20);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = $5;
  $120 = $3;
  $121 = ((($120)) + 108|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) - ($122))|0;
  $124 = ($123>>>0)<=(15);
  if (!($124)) {
   STACKTOP = sp;return;
  }
  $125 = $3;
  $126 = ((($125)) + 44|0);
  $127 = ((($126)) + 30|0);
  HEAP8[$127>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $128 = $3;
  $129 = $4;
  $130 = $5;
  _Landroid($128,$129,$130);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_1_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 56;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 55;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 34;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 56;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $5;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $5;
   $92 = (($91) - 1)|0;
   $93 = (($90) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 2)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($100) - 1)|0;
  $102 = (($99) + ($101<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = ($104|0)==(11);
  if ($105) {
   $106 = $3;
   $107 = ((($106)) + 1372|0);
   $108 = $4;
   $109 = (($108) - 2)|0;
   $110 = (($107) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = $4;
  $132 = $5;
  _Landroid($130,$131,$132);
  STACKTOP = sp;return;
 }
 }
}
function _Landroid_2_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 56;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 55;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 41;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 56;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $5;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $5;
   $92 = (($91) - 1)|0;
   $93 = (($90) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 2)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($100) - 1)|0;
  $102 = (($99) + ($101<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = ($104|0)==(11);
  if ($105) {
   $106 = $3;
   $107 = ((($106)) + 1372|0);
   $108 = $4;
   $109 = (($108) - 2)|0;
   $110 = (($107) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = $4;
  $132 = $5;
  _Landroid($130,$131,$132);
  STACKTOP = sp;return;
 }
 }
}
function _Leater_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(160);
 $17 = $3;
 $18 = ((($17)) + 1372|0);
 $19 = $4;
 if ($16) {
  $20 = (($19) + 1)|0;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $5;
  $24 = (($22) + ($23<<1)|0);
  HEAP16[$24>>1] = 170;
  $25 = $3;
  $26 = ((($25)) + 1804|0);
  $27 = $4;
  $28 = (($27) + 1)|0;
  $29 = (($26) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $5;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = 11;
  $33 = $3;
  $34 = ((($33)) + 44|0);
  $35 = ((($34)) + 28|0);
  HEAP8[$35>>0] = 1;
  STACKTOP = sp;return;
 }
 $36 = (($18) + ($19<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($38) + 1)|0;
 $40 = (($37) + ($39<<1)|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ($42|0)==(160);
 $44 = $3;
 $45 = ((($44)) + 1372|0);
 $46 = $4;
 if ($43) {
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $5;
  $50 = (($49) + 1)|0;
  $51 = (($48) + ($50<<1)|0);
  HEAP16[$51>>1] = 170;
  $52 = $3;
  $53 = ((($52)) + 1804|0);
  $54 = $4;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $5;
  $58 = (($57) + 1)|0;
  $59 = (($56) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 44|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 1;
  STACKTOP = sp;return;
 }
 $63 = (($46) - 1)|0;
 $64 = (($45) + ($63<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $5;
 $67 = (($65) + ($66<<1)|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68 << 16 >> 16;
 $70 = ($69|0)==(160);
 $71 = $3;
 $72 = ((($71)) + 1372|0);
 $73 = $4;
 if ($70) {
  $74 = (($73) - 1)|0;
  $75 = (($72) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $5;
  $78 = (($76) + ($77<<1)|0);
  HEAP16[$78>>1] = 170;
  $79 = $3;
  $80 = ((($79)) + 1804|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = 11;
  $87 = $3;
  $88 = ((($87)) + 44|0);
  $89 = ((($88)) + 28|0);
  HEAP8[$89>>0] = 1;
  STACKTOP = sp;return;
 }
 $90 = (($72) + ($73<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $5;
 $93 = (($92) - 1)|0;
 $94 = (($91) + ($93<<1)|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 << 16 >> 16;
 switch ($96|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $97 = $3;
  $98 = ((($97)) + 1372|0);
  $99 = $4;
  $100 = (($98) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($101) + ($102<<1)|0);
  HEAP16[$103>>1] = 64;
  $104 = $3;
  $105 = ((($104)) + 1804|0);
  $106 = $4;
  $107 = (($105) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $5;
  $110 = (($108) + ($109<<1)|0);
  HEAP16[$110>>1] = 11;
  $111 = $3;
  $112 = ((($111)) + 1372|0);
  $113 = $4;
  $114 = (($112) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $5;
  $117 = (($116) - 1)|0;
  $118 = (($115) + ($117<<1)|0);
  HEAP16[$118>>1] = 63;
  $119 = $3;
  $120 = ((($119)) + 1804|0);
  $121 = $4;
  $122 = (($120) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $5;
  $125 = (($124) - 1)|0;
  $126 = (($123) + ($125<<1)|0);
  HEAP16[$126>>1] = 59;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($131) + ($132<<1)|0);
  HEAP16[$133>>1] = 64;
  $134 = $3;
  $135 = ((($134)) + 1804|0);
  $136 = $4;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $5;
  $140 = (($138) + ($139<<1)|0);
  HEAP16[$140>>1] = 11;
  $141 = $3;
  $142 = ((($141)) + 1372|0);
  $143 = $4;
  $144 = (($143) + 1)|0;
  $145 = (($142) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $5;
  $148 = (($147) - 2)|0;
  $149 = (($146) + ($148<<1)|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150 << 16 >> 16;
  $152 = ($151|0)==(11);
  if ($152) {
   $153 = $3;
   $154 = ((($153)) + 1372|0);
   $155 = $4;
   $156 = (($155) + 1)|0;
   $157 = (($154) + ($156<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $5;
   $160 = (($159) - 2)|0;
   $161 = (($158) + ($160<<1)|0);
   HEAP16[$161>>1] = 12;
  }
  $162 = $3;
  $163 = ((($162)) + 1372|0);
  $164 = $4;
  $165 = (($164) - 1)|0;
  $166 = (($163) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $5;
  $169 = (($168) - 2)|0;
  $170 = (($167) + ($169<<1)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171 << 16 >> 16;
  $173 = ($172|0)==(11);
  if ($173) {
   $174 = $3;
   $175 = ((($174)) + 1372|0);
   $176 = $4;
   $177 = (($176) - 1)|0;
   $178 = (($175) + ($177<<2)|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $5;
   $181 = (($180) - 2)|0;
   $182 = (($179) + ($181<<1)|0);
   HEAP16[$182>>1] = 13;
  }
  $183 = $4;
  $184 = $3;
  $185 = ((($184)) + 104|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($183) - ($186))|0;
  $188 = ($187>>>0)<=(20);
  if (!($188)) {
   STACKTOP = sp;return;
  }
  $189 = $5;
  $190 = $3;
  $191 = ((($190)) + 108|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($189) - ($192))|0;
  $194 = ($193>>>0)<=(15);
  if (!($194)) {
   STACKTOP = sp;return;
  }
  $195 = $3;
  $196 = ((($195)) + 44|0);
  $197 = ((($196)) + 30|0);
  HEAP8[$197>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $198 = $3;
  $199 = ((($198)) + 1372|0);
  $200 = $4;
  $201 = (($199) + ($200<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $5;
  $204 = (($203) - 1)|0;
  $205 = (($202) + ($204<<1)|0);
  HEAP16[$205>>1] = 170;
  $206 = $3;
  $207 = ((($206)) + 1804|0);
  $208 = $4;
  $209 = (($207) + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $5;
  $212 = (($211) - 1)|0;
  $213 = (($210) + ($212<<1)|0);
  HEAP16[$213>>1] = 11;
  $214 = $3;
  $215 = ((($214)) + 44|0);
  $216 = ((($215)) + 28|0);
  HEAP8[$216>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $217 = $3;
  $218 = HEAP32[$217>>2]|0;
  $219 = ($218*12421)|0;
  $220 = (($219) + 1)|0;
  $221 = $3;
  HEAP32[$221>>2] = $220;
  $222 = $3;
  $223 = HEAP32[$222>>2]|0;
  $224 = $223 & 65535;
  $225 = $224<<1;
  $226 = $225 >> 16;
  $227 = ($226|0)!=(0);
  $228 = $227 ? 60 : 62;
  $229 = $228&65535;
  $230 = $3;
  $231 = ((($230)) + 1804|0);
  $232 = $4;
  $233 = (($231) + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $5;
  $236 = (($234) + ($235<<1)|0);
  HEAP16[$236>>1] = $229;
  $237 = $4;
  $238 = $3;
  $239 = ((($238)) + 104|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($237) - ($240))|0;
  $242 = ($241>>>0)<=(20);
  if (!($242)) {
   STACKTOP = sp;return;
  }
  $243 = $5;
  $244 = $3;
  $245 = ((($244)) + 108|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($243) - ($246))|0;
  $248 = ($247>>>0)<=(15);
  if (!($248)) {
   STACKTOP = sp;return;
  }
  $249 = $3;
  $250 = ((($249)) + 44|0);
  $251 = ((($250)) + 28|0);
  HEAP8[$251>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Leater_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(160);
 $17 = $3;
 $18 = ((($17)) + 1372|0);
 $19 = $4;
 if ($16) {
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = (($22) + 1)|0;
  $24 = (($21) + ($23<<1)|0);
  HEAP16[$24>>1] = 170;
  $25 = $3;
  $26 = ((($25)) + 1804|0);
  $27 = $4;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = (($30) + 1)|0;
  $32 = (($29) + ($31<<1)|0);
  HEAP16[$32>>1] = 11;
  $33 = $3;
  $34 = ((($33)) + 44|0);
  $35 = ((($34)) + 28|0);
  HEAP8[$35>>0] = 1;
  STACKTOP = sp;return;
 }
 $36 = (($19) - 1)|0;
 $37 = (($18) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $5;
 $40 = (($38) + ($39<<1)|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ($42|0)==(160);
 $44 = $3;
 $45 = ((($44)) + 1372|0);
 $46 = $4;
 if ($43) {
  $47 = (($46) - 1)|0;
  $48 = (($45) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $5;
  $51 = (($49) + ($50<<1)|0);
  HEAP16[$51>>1] = 170;
  $52 = $3;
  $53 = ((($52)) + 1804|0);
  $54 = $4;
  $55 = (($54) - 1)|0;
  $56 = (($53) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 44|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 1;
  STACKTOP = sp;return;
 }
 $63 = (($45) + ($46<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = (($65) - 1)|0;
 $67 = (($64) + ($66<<1)|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68 << 16 >> 16;
 $70 = ($69|0)==(160);
 $71 = $3;
 $72 = ((($71)) + 1372|0);
 $73 = $4;
 if ($70) {
  $74 = (($72) + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $5;
  $77 = (($76) - 1)|0;
  $78 = (($75) + ($77<<1)|0);
  HEAP16[$78>>1] = 170;
  $79 = $3;
  $80 = ((($79)) + 1804|0);
  $81 = $4;
  $82 = (($80) + ($81<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $5;
  $85 = (($84) - 1)|0;
  $86 = (($83) + ($85<<1)|0);
  HEAP16[$86>>1] = 11;
  $87 = $3;
  $88 = ((($87)) + 44|0);
  $89 = ((($88)) + 28|0);
  HEAP8[$89>>0] = 1;
  STACKTOP = sp;return;
 }
 $90 = (($73) + 1)|0;
 $91 = (($72) + ($90<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $5;
 $94 = (($92) + ($93<<1)|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 << 16 >> 16;
 switch ($96|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $97 = $3;
  $98 = ((($97)) + 1372|0);
  $99 = $4;
  $100 = (($98) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($101) + ($102<<1)|0);
  HEAP16[$103>>1] = 66;
  $104 = $3;
  $105 = ((($104)) + 1804|0);
  $106 = $4;
  $107 = (($105) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $5;
  $110 = (($108) + ($109<<1)|0);
  HEAP16[$110>>1] = 11;
  $111 = $3;
  $112 = ((($111)) + 1372|0);
  $113 = $4;
  $114 = (($113) + 1)|0;
  $115 = (($112) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $5;
  $118 = (($116) + ($117<<1)|0);
  HEAP16[$118>>1] = 65;
  $119 = $3;
  $120 = ((($119)) + 1804|0);
  $121 = $4;
  $122 = (($121) + 1)|0;
  $123 = (($120) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 60;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($131) + ($132<<1)|0);
  HEAP16[$133>>1] = 66;
  $134 = $3;
  $135 = ((($134)) + 1804|0);
  $136 = $4;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $5;
  $140 = (($138) + ($139<<1)|0);
  HEAP16[$140>>1] = 11;
  $141 = $3;
  $142 = ((($141)) + 1372|0);
  $143 = $4;
  $144 = (($143) + 2)|0;
  $145 = (($142) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $5;
  $148 = (($147) - 1)|0;
  $149 = (($146) + ($148<<1)|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150 << 16 >> 16;
  $152 = ($151|0)==(11);
  if ($152) {
   $153 = $3;
   $154 = ((($153)) + 1372|0);
   $155 = $4;
   $156 = (($155) + 2)|0;
   $157 = (($154) + ($156<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $5;
   $160 = (($159) - 1)|0;
   $161 = (($158) + ($160<<1)|0);
   HEAP16[$161>>1] = 12;
  }
  $162 = $3;
  $163 = ((($162)) + 1372|0);
  $164 = $4;
  $165 = (($163) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $5;
  $168 = (($167) - 1)|0;
  $169 = (($166) + ($168<<1)|0);
  $170 = HEAP16[$169>>1]|0;
  $171 = $170 << 16 >> 16;
  $172 = ($171|0)==(11);
  if ($172) {
   $173 = $3;
   $174 = ((($173)) + 1372|0);
   $175 = $4;
   $176 = (($174) + ($175<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $5;
   $179 = (($178) - 1)|0;
   $180 = (($177) + ($179<<1)|0);
   HEAP16[$180>>1] = 13;
  }
  $181 = $4;
  $182 = $3;
  $183 = ((($182)) + 104|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($181) - ($184))|0;
  $186 = ($185>>>0)<=(20);
  if (!($186)) {
   STACKTOP = sp;return;
  }
  $187 = $5;
  $188 = $3;
  $189 = ((($188)) + 108|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($187) - ($190))|0;
  $192 = ($191>>>0)<=(15);
  if (!($192)) {
   STACKTOP = sp;return;
  }
  $193 = $3;
  $194 = ((($193)) + 44|0);
  $195 = ((($194)) + 30|0);
  HEAP8[$195>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $196 = $3;
  $197 = ((($196)) + 1372|0);
  $198 = $4;
  $199 = (($198) + 1)|0;
  $200 = (($197) + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $5;
  $203 = (($201) + ($202<<1)|0);
  HEAP16[$203>>1] = 170;
  $204 = $3;
  $205 = ((($204)) + 1804|0);
  $206 = $4;
  $207 = (($206) + 1)|0;
  $208 = (($205) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $5;
  $211 = (($209) + ($210<<1)|0);
  HEAP16[$211>>1] = 11;
  $212 = $3;
  $213 = ((($212)) + 44|0);
  $214 = ((($213)) + 28|0);
  HEAP8[$214>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $215 = $3;
  $216 = HEAP32[$215>>2]|0;
  $217 = ($216*12421)|0;
  $218 = (($217) + 1)|0;
  $219 = $3;
  HEAP32[$219>>2] = $218;
  $220 = $3;
  $221 = HEAP32[$220>>2]|0;
  $222 = $221 & 65535;
  $223 = $222<<1;
  $224 = $223 >> 16;
  $225 = ($224|0)!=(0);
  $226 = $225 ? 59 : 61;
  $227 = $226&65535;
  $228 = $3;
  $229 = ((($228)) + 1804|0);
  $230 = $4;
  $231 = (($229) + ($230<<2)|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $5;
  $234 = (($232) + ($233<<1)|0);
  HEAP16[$234>>1] = $227;
  $235 = $4;
  $236 = $3;
  $237 = ((($236)) + 104|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($235) - ($238))|0;
  $240 = ($239>>>0)<=(20);
  if (!($240)) {
   STACKTOP = sp;return;
  }
  $241 = $5;
  $242 = $3;
  $243 = ((($242)) + 108|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($241) - ($244))|0;
  $246 = ($245>>>0)<=(15);
  if (!($246)) {
   STACKTOP = sp;return;
  }
  $247 = $3;
  $248 = ((($247)) + 44|0);
  $249 = ((($248)) + 28|0);
  HEAP8[$249>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Leater_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(160);
 $17 = $3;
 $18 = ((($17)) + 1372|0);
 $19 = $4;
 if ($16) {
  $20 = (($19) - 1)|0;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $5;
  $24 = (($22) + ($23<<1)|0);
  HEAP16[$24>>1] = 170;
  $25 = $3;
  $26 = ((($25)) + 1804|0);
  $27 = $4;
  $28 = (($27) - 1)|0;
  $29 = (($26) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $5;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = 11;
  $33 = $3;
  $34 = ((($33)) + 44|0);
  $35 = ((($34)) + 28|0);
  HEAP8[$35>>0] = 1;
  STACKTOP = sp;return;
 }
 $36 = (($18) + ($19<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($38) - 1)|0;
 $40 = (($37) + ($39<<1)|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ($42|0)==(160);
 $44 = $3;
 $45 = ((($44)) + 1372|0);
 $46 = $4;
 if ($43) {
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $5;
  $50 = (($49) - 1)|0;
  $51 = (($48) + ($50<<1)|0);
  HEAP16[$51>>1] = 170;
  $52 = $3;
  $53 = ((($52)) + 1804|0);
  $54 = $4;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $5;
  $58 = (($57) - 1)|0;
  $59 = (($56) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 44|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 1;
  STACKTOP = sp;return;
 }
 $63 = (($46) + 1)|0;
 $64 = (($45) + ($63<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $5;
 $67 = (($65) + ($66<<1)|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68 << 16 >> 16;
 $70 = ($69|0)==(160);
 $71 = $3;
 $72 = ((($71)) + 1372|0);
 $73 = $4;
 if ($70) {
  $74 = (($73) + 1)|0;
  $75 = (($72) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $5;
  $78 = (($76) + ($77<<1)|0);
  HEAP16[$78>>1] = 170;
  $79 = $3;
  $80 = ((($79)) + 1804|0);
  $81 = $4;
  $82 = (($81) + 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = 11;
  $87 = $3;
  $88 = ((($87)) + 44|0);
  $89 = ((($88)) + 28|0);
  HEAP8[$89>>0] = 1;
  STACKTOP = sp;return;
 }
 $90 = (($72) + ($73<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $5;
 $93 = (($92) + 1)|0;
 $94 = (($91) + ($93<<1)|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 << 16 >> 16;
 switch ($96|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $97 = $3;
  $98 = ((($97)) + 1372|0);
  $99 = $4;
  $100 = (($98) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($101) + ($102<<1)|0);
  HEAP16[$103>>1] = 68;
  $104 = $3;
  $105 = ((($104)) + 1804|0);
  $106 = $4;
  $107 = (($105) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $5;
  $110 = (($108) + ($109<<1)|0);
  HEAP16[$110>>1] = 11;
  $111 = $3;
  $112 = ((($111)) + 1372|0);
  $113 = $4;
  $114 = (($112) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $5;
  $117 = (($116) + 1)|0;
  $118 = (($115) + ($117<<1)|0);
  HEAP16[$118>>1] = 67;
  $119 = $3;
  $120 = ((($119)) + 1804|0);
  $121 = $4;
  $122 = (($120) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $5;
  $125 = (($124) + 1)|0;
  $126 = (($123) + ($125<<1)|0);
  HEAP16[$126>>1] = 61;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($131) + ($132<<1)|0);
  HEAP16[$133>>1] = 68;
  $134 = $3;
  $135 = ((($134)) + 1804|0);
  $136 = $4;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $5;
  $140 = (($138) + ($139<<1)|0);
  HEAP16[$140>>1] = 11;
  $141 = $3;
  $142 = ((($141)) + 1372|0);
  $143 = $4;
  $144 = (($143) + 1)|0;
  $145 = (($142) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $5;
  $148 = (($146) + ($147<<1)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = ($150|0)==(11);
  if ($151) {
   $152 = $3;
   $153 = ((($152)) + 1372|0);
   $154 = $4;
   $155 = (($154) + 1)|0;
   $156 = (($153) + ($155<<2)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $5;
   $159 = (($157) + ($158<<1)|0);
   HEAP16[$159>>1] = 12;
  }
  $160 = $3;
  $161 = ((($160)) + 1372|0);
  $162 = $4;
  $163 = (($162) - 1)|0;
  $164 = (($161) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $5;
  $167 = (($165) + ($166<<1)|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168 << 16 >> 16;
  $170 = ($169|0)==(11);
  if ($170) {
   $171 = $3;
   $172 = ((($171)) + 1372|0);
   $173 = $4;
   $174 = (($173) - 1)|0;
   $175 = (($172) + ($174<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $5;
   $178 = (($176) + ($177<<1)|0);
   HEAP16[$178>>1] = 13;
  }
  $179 = $4;
  $180 = $3;
  $181 = ((($180)) + 104|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($179) - ($182))|0;
  $184 = ($183>>>0)<=(20);
  if (!($184)) {
   STACKTOP = sp;return;
  }
  $185 = $5;
  $186 = $3;
  $187 = ((($186)) + 108|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($185) - ($188))|0;
  $190 = ($189>>>0)<=(15);
  if (!($190)) {
   STACKTOP = sp;return;
  }
  $191 = $3;
  $192 = ((($191)) + 44|0);
  $193 = ((($192)) + 30|0);
  HEAP8[$193>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $194 = $3;
  $195 = ((($194)) + 1372|0);
  $196 = $4;
  $197 = (($195) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $5;
  $200 = (($199) + 1)|0;
  $201 = (($198) + ($200<<1)|0);
  HEAP16[$201>>1] = 170;
  $202 = $3;
  $203 = ((($202)) + 1804|0);
  $204 = $4;
  $205 = (($203) + ($204<<2)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $5;
  $208 = (($207) + 1)|0;
  $209 = (($206) + ($208<<1)|0);
  HEAP16[$209>>1] = 11;
  $210 = $3;
  $211 = ((($210)) + 44|0);
  $212 = ((($211)) + 28|0);
  HEAP8[$212>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $213 = $3;
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214*12421)|0;
  $216 = (($215) + 1)|0;
  $217 = $3;
  HEAP32[$217>>2] = $216;
  $218 = $3;
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 & 65535;
  $221 = $220<<1;
  $222 = $221 >> 16;
  $223 = ($222|0)!=(0);
  $224 = $223 ? 60 : 62;
  $225 = $224&65535;
  $226 = $3;
  $227 = ((($226)) + 1804|0);
  $228 = $4;
  $229 = (($227) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $5;
  $232 = (($230) + ($231<<1)|0);
  HEAP16[$232>>1] = $225;
  $233 = $4;
  $234 = $3;
  $235 = ((($234)) + 104|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($233) - ($236))|0;
  $238 = ($237>>>0)<=(20);
  if (!($238)) {
   STACKTOP = sp;return;
  }
  $239 = $5;
  $240 = $3;
  $241 = ((($240)) + 108|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($239) - ($242))|0;
  $244 = ($243>>>0)<=(15);
  if (!($244)) {
   STACKTOP = sp;return;
  }
  $245 = $3;
  $246 = ((($245)) + 44|0);
  $247 = ((($246)) + 28|0);
  HEAP8[$247>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Leater_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(160);
 $17 = $3;
 $18 = ((($17)) + 1372|0);
 $19 = $4;
 if ($16) {
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = (($22) - 1)|0;
  $24 = (($21) + ($23<<1)|0);
  HEAP16[$24>>1] = 170;
  $25 = $3;
  $26 = ((($25)) + 1804|0);
  $27 = $4;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = (($30) - 1)|0;
  $32 = (($29) + ($31<<1)|0);
  HEAP16[$32>>1] = 11;
  $33 = $3;
  $34 = ((($33)) + 44|0);
  $35 = ((($34)) + 28|0);
  HEAP8[$35>>0] = 1;
  STACKTOP = sp;return;
 }
 $36 = (($19) + 1)|0;
 $37 = (($18) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $5;
 $40 = (($38) + ($39<<1)|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ($42|0)==(160);
 $44 = $3;
 $45 = ((($44)) + 1372|0);
 $46 = $4;
 if ($43) {
  $47 = (($46) + 1)|0;
  $48 = (($45) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $5;
  $51 = (($49) + ($50<<1)|0);
  HEAP16[$51>>1] = 170;
  $52 = $3;
  $53 = ((($52)) + 1804|0);
  $54 = $4;
  $55 = (($54) + 1)|0;
  $56 = (($53) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 44|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 1;
  STACKTOP = sp;return;
 }
 $63 = (($45) + ($46<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = (($65) + 1)|0;
 $67 = (($64) + ($66<<1)|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68 << 16 >> 16;
 $70 = ($69|0)==(160);
 $71 = $3;
 $72 = ((($71)) + 1372|0);
 $73 = $4;
 if ($70) {
  $74 = (($72) + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $5;
  $77 = (($76) + 1)|0;
  $78 = (($75) + ($77<<1)|0);
  HEAP16[$78>>1] = 170;
  $79 = $3;
  $80 = ((($79)) + 1804|0);
  $81 = $4;
  $82 = (($80) + ($81<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $5;
  $85 = (($84) + 1)|0;
  $86 = (($83) + ($85<<1)|0);
  HEAP16[$86>>1] = 11;
  $87 = $3;
  $88 = ((($87)) + 44|0);
  $89 = ((($88)) + 28|0);
  HEAP8[$89>>0] = 1;
  STACKTOP = sp;return;
 }
 $90 = (($73) - 1)|0;
 $91 = (($72) + ($90<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $5;
 $94 = (($92) + ($93<<1)|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 << 16 >> 16;
 switch ($96|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $97 = $3;
  $98 = ((($97)) + 1372|0);
  $99 = $4;
  $100 = (($98) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($101) + ($102<<1)|0);
  HEAP16[$103>>1] = 70;
  $104 = $3;
  $105 = ((($104)) + 1804|0);
  $106 = $4;
  $107 = (($105) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $5;
  $110 = (($108) + ($109<<1)|0);
  HEAP16[$110>>1] = 11;
  $111 = $3;
  $112 = ((($111)) + 1372|0);
  $113 = $4;
  $114 = (($113) - 1)|0;
  $115 = (($112) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $5;
  $118 = (($116) + ($117<<1)|0);
  HEAP16[$118>>1] = 69;
  $119 = $3;
  $120 = ((($119)) + 1804|0);
  $121 = $4;
  $122 = (($121) - 1)|0;
  $123 = (($120) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 62;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($131) + ($132<<1)|0);
  HEAP16[$133>>1] = 70;
  $134 = $3;
  $135 = ((($134)) + 1804|0);
  $136 = $4;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $5;
  $140 = (($138) + ($139<<1)|0);
  HEAP16[$140>>1] = 11;
  $141 = $3;
  $142 = ((($141)) + 1372|0);
  $143 = $4;
  $144 = (($142) + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $5;
  $147 = (($146) - 1)|0;
  $148 = (($145) + ($147<<1)|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = ($150|0)==(11);
  if ($151) {
   $152 = $3;
   $153 = ((($152)) + 1372|0);
   $154 = $4;
   $155 = (($153) + ($154<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $5;
   $158 = (($157) - 1)|0;
   $159 = (($156) + ($158<<1)|0);
   HEAP16[$159>>1] = 12;
  }
  $160 = $3;
  $161 = ((($160)) + 1372|0);
  $162 = $4;
  $163 = (($162) - 2)|0;
  $164 = (($161) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $5;
  $167 = (($166) - 1)|0;
  $168 = (($165) + ($167<<1)|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = ($170|0)==(11);
  if ($171) {
   $172 = $3;
   $173 = ((($172)) + 1372|0);
   $174 = $4;
   $175 = (($174) - 2)|0;
   $176 = (($173) + ($175<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $5;
   $179 = (($178) - 1)|0;
   $180 = (($177) + ($179<<1)|0);
   HEAP16[$180>>1] = 13;
  }
  $181 = $4;
  $182 = $3;
  $183 = ((($182)) + 104|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($181) - ($184))|0;
  $186 = ($185>>>0)<=(20);
  if (!($186)) {
   STACKTOP = sp;return;
  }
  $187 = $5;
  $188 = $3;
  $189 = ((($188)) + 108|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($187) - ($190))|0;
  $192 = ($191>>>0)<=(15);
  if (!($192)) {
   STACKTOP = sp;return;
  }
  $193 = $3;
  $194 = ((($193)) + 44|0);
  $195 = ((($194)) + 30|0);
  HEAP8[$195>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $196 = $3;
  $197 = ((($196)) + 1372|0);
  $198 = $4;
  $199 = (($198) - 1)|0;
  $200 = (($197) + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $5;
  $203 = (($201) + ($202<<1)|0);
  HEAP16[$203>>1] = 170;
  $204 = $3;
  $205 = ((($204)) + 1804|0);
  $206 = $4;
  $207 = (($206) - 1)|0;
  $208 = (($205) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $5;
  $211 = (($209) + ($210<<1)|0);
  HEAP16[$211>>1] = 11;
  $212 = $3;
  $213 = ((($212)) + 44|0);
  $214 = ((($213)) + 28|0);
  HEAP8[$214>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $215 = $3;
  $216 = HEAP32[$215>>2]|0;
  $217 = ($216*12421)|0;
  $218 = (($217) + 1)|0;
  $219 = $3;
  HEAP32[$219>>2] = $218;
  $220 = $3;
  $221 = HEAP32[$220>>2]|0;
  $222 = $221 & 65535;
  $223 = $222<<1;
  $224 = $223 >> 16;
  $225 = ($224|0)!=(0);
  $226 = $225 ? 59 : 61;
  $227 = $226&65535;
  $228 = $3;
  $229 = ((($228)) + 1804|0);
  $230 = $4;
  $231 = (($229) + ($230<<2)|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $5;
  $234 = (($232) + ($233<<1)|0);
  HEAP16[$234>>1] = $227;
  $235 = $4;
  $236 = $3;
  $237 = ((($236)) + 104|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($235) - ($238))|0;
  $240 = ($239>>>0)<=(20);
  if (!($240)) {
   STACKTOP = sp;return;
  }
  $241 = $5;
  $242 = $3;
  $243 = ((($242)) + 108|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($241) - ($244))|0;
  $246 = ($245>>>0)<=(15);
  if (!($246)) {
   STACKTOP = sp;return;
  }
  $247 = $3;
  $248 = ((($247)) + 44|0);
  $249 = ((($248)) + 28|0);
  HEAP8[$249>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lalien($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 360|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $3;
 do {
  if ($12) {
   $14 = ((($13)) + 364|0);
   $15 = HEAP32[$14>>2]|0;
   $6 = $15;
   $16 = $3;
   $17 = ((($16)) + 368|0);
   $18 = HEAP32[$17>>2]|0;
   $7 = $18;
  } else {
   $19 = ((($13)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = $3;
    $23 = ((($22)) + 16|0);
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = $3;
     $28 = ((($27)) + 184|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $4;
     $31 = (($29) - ($30))|0;
     $6 = $31;
     $32 = $6;
     $33 = ($32|0)<(0);
     if ($33) {
      $34 = $6;
      $35 = (0 - ($34))|0;
      $6 = $35;
     }
     $36 = $3;
     $37 = ((($36)) + 192|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $5;
     $40 = (($38) - ($39))|0;
     $7 = $40;
     $41 = $7;
     $42 = ($41|0)<(0);
     if ($42) {
      $43 = $7;
      $44 = (0 - ($43))|0;
      $7 = $44;
     }
     $45 = $6;
     $46 = $7;
     $47 = (($45) + ($46))|0;
     $8 = $47;
     $48 = $3;
     $49 = ((($48)) + 184|0);
     $50 = ((($49)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $4;
     $53 = (($51) - ($52))|0;
     $6 = $53;
     $54 = $6;
     $55 = ($54|0)<(0);
     if ($55) {
      $56 = $6;
      $57 = (0 - ($56))|0;
      $6 = $57;
     }
     $58 = $3;
     $59 = ((($58)) + 192|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $5;
     $63 = (($61) - ($62))|0;
     $7 = $63;
     $64 = $7;
     $65 = ($64|0)<(0);
     if ($65) {
      $66 = $7;
      $67 = (0 - ($66))|0;
      $7 = $67;
     }
     $68 = $6;
     $69 = $7;
     $70 = (($68) + ($69))|0;
     $71 = $8;
     $72 = (($71) - ($70))|0;
     $8 = $72;
     $73 = $8;
     $74 = ($73|0)<(0);
     $75 = $3;
     $76 = ((($75)) + 184|0);
     if ($74) {
      $77 = HEAP32[$76>>2]|0;
      $6 = $77;
      $78 = $3;
      $79 = ((($78)) + 192|0);
      $80 = HEAP32[$79>>2]|0;
      $7 = $80;
      break;
     } else {
      $81 = ((($76)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $6 = $82;
      $83 = $3;
      $84 = ((($83)) + 192|0);
      $85 = ((($84)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $7 = $86;
      break;
     }
    }
   }
   $87 = $3;
   $88 = ((($87)) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)==(0);
   $91 = $3;
   if ($90) {
    $92 = ((($91)) + 184|0);
    $93 = HEAP32[$92>>2]|0;
    $6 = $93;
    $94 = $3;
    $95 = ((($94)) + 192|0);
    $96 = HEAP32[$95>>2]|0;
    $7 = $96;
    break;
   }
   $97 = ((($91)) + 16|0);
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)==(0);
   if ($100) {
    $101 = $3;
    $102 = ((($101)) + 184|0);
    $103 = ((($102)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $6 = $104;
    $105 = $3;
    $106 = ((($105)) + 192|0);
    $107 = ((($106)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $7 = $108;
    break;
   } else {
    $6 = 0;
    $7 = 0;
    break;
   }
  }
 } while(0);
 $109 = $3;
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110*12421)|0;
 $112 = (($111) + 1)|0;
 $113 = $3;
 HEAP32[$113>>2] = $112;
 $114 = $3;
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 65535;
 $117 = $116<<1;
 $118 = $117 >> 16;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $5;
  $121 = $7;
  $122 = ($120|0)>($121|0);
  if ($122) {
   $123 = $3;
   $124 = ((($123)) + 1372|0);
   $125 = $4;
   $126 = (($124) + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $5;
   $129 = (($128) - 1)|0;
   $130 = (($127) + ($129<<1)|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131 << 16 >> 16;
   switch ($132|0) {
   case 14: case 13: case 12: case 11: case 406:  {
    $133 = $3;
    $134 = ((($133)) + 1372|0);
    $135 = $4;
    $136 = (($134) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $5;
    $139 = (($137) + ($138<<1)|0);
    HEAP16[$139>>1] = 76;
    $140 = $3;
    $141 = ((($140)) + 1804|0);
    $142 = $4;
    $143 = (($141) + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $5;
    $146 = (($144) + ($145<<1)|0);
    HEAP16[$146>>1] = 11;
    $147 = $3;
    $148 = ((($147)) + 1372|0);
    $149 = $4;
    $150 = (($148) + ($149<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $5;
    $153 = (($152) - 1)|0;
    $154 = (($151) + ($153<<1)|0);
    HEAP16[$154>>1] = 75;
    $155 = $3;
    $156 = ((($155)) + 1804|0);
    $157 = $4;
    $158 = (($156) + ($157<<2)|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = $5;
    $161 = (($160) - 1)|0;
    $162 = (($159) + ($161<<1)|0);
    HEAP16[$162>>1] = 74;
    $163 = $4;
    $164 = $3;
    $165 = ((($164)) + 104|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($163) - ($166))|0;
    $168 = ($167>>>0)<=(20);
    if (!($168)) {
     STACKTOP = sp;return;
    }
    $169 = $5;
    $170 = $3;
    $171 = ((($170)) + 108|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (($169) - ($172))|0;
    $174 = ($173>>>0)<=(15);
    if (!($174)) {
     STACKTOP = sp;return;
    }
    $175 = $3;
    $176 = ((($175)) + 44|0);
    $177 = ((($176)) + 29|0);
    HEAP8[$177>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $178 = $3;
    $179 = ((($178)) + 1372|0);
    $180 = $4;
    $181 = (($179) + ($180<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $5;
    $184 = (($182) + ($183<<1)|0);
    HEAP16[$184>>1] = 76;
    $185 = $3;
    $186 = ((($185)) + 1804|0);
    $187 = $4;
    $188 = (($186) + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $5;
    $191 = (($189) + ($190<<1)|0);
    HEAP16[$191>>1] = 11;
    $192 = $3;
    $193 = ((($192)) + 1372|0);
    $194 = $4;
    $195 = (($194) + 1)|0;
    $196 = (($193) + ($195<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $5;
    $199 = (($198) - 2)|0;
    $200 = (($197) + ($199<<1)|0);
    $201 = HEAP16[$200>>1]|0;
    $202 = $201 << 16 >> 16;
    $203 = ($202|0)==(11);
    if ($203) {
     $204 = $3;
     $205 = ((($204)) + 1372|0);
     $206 = $4;
     $207 = (($206) + 1)|0;
     $208 = (($205) + ($207<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $5;
     $211 = (($210) - 2)|0;
     $212 = (($209) + ($211<<1)|0);
     HEAP16[$212>>1] = 12;
    }
    $213 = $3;
    $214 = ((($213)) + 1372|0);
    $215 = $4;
    $216 = (($215) - 1)|0;
    $217 = (($214) + ($216<<2)|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = $5;
    $220 = (($219) - 2)|0;
    $221 = (($218) + ($220<<1)|0);
    $222 = HEAP16[$221>>1]|0;
    $223 = $222 << 16 >> 16;
    $224 = ($223|0)==(11);
    if ($224) {
     $225 = $3;
     $226 = ((($225)) + 1372|0);
     $227 = $4;
     $228 = (($227) - 1)|0;
     $229 = (($226) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $5;
     $232 = (($231) - 2)|0;
     $233 = (($230) + ($232<<1)|0);
     HEAP16[$233>>1] = 13;
    }
    $234 = $4;
    $235 = $3;
    $236 = ((($235)) + 104|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = (($234) - ($237))|0;
    $239 = ($238>>>0)<=(20);
    if (!($239)) {
     STACKTOP = sp;return;
    }
    $240 = $5;
    $241 = $3;
    $242 = ((($241)) + 108|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($240) - ($243))|0;
    $245 = ($244>>>0)<=(15);
    if (!($245)) {
     STACKTOP = sp;return;
    }
    $246 = $3;
    $247 = ((($246)) + 44|0);
    $248 = ((($247)) + 30|0);
    HEAP8[$248>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  }
  $249 = $5;
  $250 = $7;
  $251 = ($249|0)<($250|0);
  if (!($251)) {
   STACKTOP = sp;return;
  }
  $252 = $3;
  $253 = ((($252)) + 1372|0);
  $254 = $4;
  $255 = (($253) + ($254<<2)|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = $5;
  $258 = (($257) + 1)|0;
  $259 = (($256) + ($258<<1)|0);
  $260 = HEAP16[$259>>1]|0;
  $261 = $260 << 16 >> 16;
  switch ($261|0) {
  case 14: case 13: case 12: case 11: case 406:  {
   $262 = $3;
   $263 = ((($262)) + 1372|0);
   $264 = $4;
   $265 = (($263) + ($264<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $5;
   $268 = (($266) + ($267<<1)|0);
   HEAP16[$268>>1] = 80;
   $269 = $3;
   $270 = ((($269)) + 1804|0);
   $271 = $4;
   $272 = (($270) + ($271<<2)|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = $5;
   $275 = (($273) + ($274<<1)|0);
   HEAP16[$275>>1] = 11;
   $276 = $3;
   $277 = ((($276)) + 1372|0);
   $278 = $4;
   $279 = (($277) + ($278<<2)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $5;
   $282 = (($281) + 1)|0;
   $283 = (($280) + ($282<<1)|0);
   HEAP16[$283>>1] = 79;
   $284 = $3;
   $285 = ((($284)) + 1804|0);
   $286 = $4;
   $287 = (($285) + ($286<<2)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $5;
   $290 = (($289) + 1)|0;
   $291 = (($288) + ($290<<1)|0);
   HEAP16[$291>>1] = 74;
   $292 = $4;
   $293 = $3;
   $294 = ((($293)) + 104|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($292) - ($295))|0;
   $297 = ($296>>>0)<=(20);
   if (!($297)) {
    STACKTOP = sp;return;
   }
   $298 = $5;
   $299 = $3;
   $300 = ((($299)) + 108|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (($298) - ($301))|0;
   $303 = ($302>>>0)<=(15);
   if (!($303)) {
    STACKTOP = sp;return;
   }
   $304 = $3;
   $305 = ((($304)) + 44|0);
   $306 = ((($305)) + 29|0);
   HEAP8[$306>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $307 = $3;
   $308 = ((($307)) + 1372|0);
   $309 = $4;
   $310 = (($308) + ($309<<2)|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $5;
   $313 = (($311) + ($312<<1)|0);
   HEAP16[$313>>1] = 80;
   $314 = $3;
   $315 = ((($314)) + 1804|0);
   $316 = $4;
   $317 = (($315) + ($316<<2)|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = $5;
   $320 = (($318) + ($319<<1)|0);
   HEAP16[$320>>1] = 11;
   $321 = $3;
   $322 = ((($321)) + 1372|0);
   $323 = $4;
   $324 = (($323) + 1)|0;
   $325 = (($322) + ($324<<2)|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $5;
   $328 = (($326) + ($327<<1)|0);
   $329 = HEAP16[$328>>1]|0;
   $330 = $329 << 16 >> 16;
   $331 = ($330|0)==(11);
   if ($331) {
    $332 = $3;
    $333 = ((($332)) + 1372|0);
    $334 = $4;
    $335 = (($334) + 1)|0;
    $336 = (($333) + ($335<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $5;
    $339 = (($337) + ($338<<1)|0);
    HEAP16[$339>>1] = 12;
   }
   $340 = $3;
   $341 = ((($340)) + 1372|0);
   $342 = $4;
   $343 = (($342) - 1)|0;
   $344 = (($341) + ($343<<2)|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $5;
   $347 = (($345) + ($346<<1)|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348 << 16 >> 16;
   $350 = ($349|0)==(11);
   if ($350) {
    $351 = $3;
    $352 = ((($351)) + 1372|0);
    $353 = $4;
    $354 = (($353) - 1)|0;
    $355 = (($352) + ($354<<2)|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = $5;
    $358 = (($356) + ($357<<1)|0);
    HEAP16[$358>>1] = 13;
   }
   $359 = $4;
   $360 = $3;
   $361 = ((($360)) + 104|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($359) - ($362))|0;
   $364 = ($363>>>0)<=(20);
   if (!($364)) {
    STACKTOP = sp;return;
   }
   $365 = $5;
   $366 = $3;
   $367 = ((($366)) + 108|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($365) - ($368))|0;
   $370 = ($369>>>0)<=(15);
   if (!($370)) {
    STACKTOP = sp;return;
   }
   $371 = $3;
   $372 = ((($371)) + 44|0);
   $373 = ((($372)) + 30|0);
   HEAP8[$373>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } else {
  $374 = $4;
  $375 = $6;
  $376 = ($374|0)<($375|0);
  if ($376) {
   $377 = $3;
   $378 = ((($377)) + 1372|0);
   $379 = $4;
   $380 = (($379) + 1)|0;
   $381 = (($378) + ($380<<2)|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $5;
   $384 = (($382) + ($383<<1)|0);
   $385 = HEAP16[$384>>1]|0;
   $386 = $385 << 16 >> 16;
   switch ($386|0) {
   case 14: case 13: case 12: case 11: case 406:  {
    $387 = $3;
    $388 = ((($387)) + 1372|0);
    $389 = $4;
    $390 = (($388) + ($389<<2)|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = $5;
    $393 = (($391) + ($392<<1)|0);
    HEAP16[$393>>1] = 78;
    $394 = $3;
    $395 = ((($394)) + 1804|0);
    $396 = $4;
    $397 = (($395) + ($396<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $5;
    $400 = (($398) + ($399<<1)|0);
    HEAP16[$400>>1] = 11;
    $401 = $3;
    $402 = ((($401)) + 1372|0);
    $403 = $4;
    $404 = (($403) + 1)|0;
    $405 = (($402) + ($404<<2)|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = $5;
    $408 = (($406) + ($407<<1)|0);
    HEAP16[$408>>1] = 77;
    $409 = $3;
    $410 = ((($409)) + 1804|0);
    $411 = $4;
    $412 = (($411) + 1)|0;
    $413 = (($410) + ($412<<2)|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = $5;
    $416 = (($414) + ($415<<1)|0);
    HEAP16[$416>>1] = 74;
    $417 = $4;
    $418 = $3;
    $419 = ((($418)) + 104|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = (($417) - ($420))|0;
    $422 = ($421>>>0)<=(20);
    if (!($422)) {
     STACKTOP = sp;return;
    }
    $423 = $5;
    $424 = $3;
    $425 = ((($424)) + 108|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (($423) - ($426))|0;
    $428 = ($427>>>0)<=(15);
    if (!($428)) {
     STACKTOP = sp;return;
    }
    $429 = $3;
    $430 = ((($429)) + 44|0);
    $431 = ((($430)) + 29|0);
    HEAP8[$431>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $432 = $3;
    $433 = ((($432)) + 1372|0);
    $434 = $4;
    $435 = (($433) + ($434<<2)|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = $5;
    $438 = (($436) + ($437<<1)|0);
    HEAP16[$438>>1] = 78;
    $439 = $3;
    $440 = ((($439)) + 1804|0);
    $441 = $4;
    $442 = (($440) + ($441<<2)|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = $5;
    $445 = (($443) + ($444<<1)|0);
    HEAP16[$445>>1] = 11;
    $446 = $3;
    $447 = ((($446)) + 1372|0);
    $448 = $4;
    $449 = (($448) + 2)|0;
    $450 = (($447) + ($449<<2)|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = $5;
    $453 = (($452) - 1)|0;
    $454 = (($451) + ($453<<1)|0);
    $455 = HEAP16[$454>>1]|0;
    $456 = $455 << 16 >> 16;
    $457 = ($456|0)==(11);
    if ($457) {
     $458 = $3;
     $459 = ((($458)) + 1372|0);
     $460 = $4;
     $461 = (($460) + 2)|0;
     $462 = (($459) + ($461<<2)|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = $5;
     $465 = (($464) - 1)|0;
     $466 = (($463) + ($465<<1)|0);
     HEAP16[$466>>1] = 12;
    }
    $467 = $3;
    $468 = ((($467)) + 1372|0);
    $469 = $4;
    $470 = (($468) + ($469<<2)|0);
    $471 = HEAP32[$470>>2]|0;
    $472 = $5;
    $473 = (($472) - 1)|0;
    $474 = (($471) + ($473<<1)|0);
    $475 = HEAP16[$474>>1]|0;
    $476 = $475 << 16 >> 16;
    $477 = ($476|0)==(11);
    if ($477) {
     $478 = $3;
     $479 = ((($478)) + 1372|0);
     $480 = $4;
     $481 = (($479) + ($480<<2)|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = $5;
     $484 = (($483) - 1)|0;
     $485 = (($482) + ($484<<1)|0);
     HEAP16[$485>>1] = 13;
    }
    $486 = $4;
    $487 = $3;
    $488 = ((($487)) + 104|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = (($486) - ($489))|0;
    $491 = ($490>>>0)<=(20);
    if (!($491)) {
     STACKTOP = sp;return;
    }
    $492 = $5;
    $493 = $3;
    $494 = ((($493)) + 108|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = (($492) - ($495))|0;
    $497 = ($496>>>0)<=(15);
    if (!($497)) {
     STACKTOP = sp;return;
    }
    $498 = $3;
    $499 = ((($498)) + 44|0);
    $500 = ((($499)) + 30|0);
    HEAP8[$500>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  }
  $501 = $4;
  $502 = $6;
  $503 = ($501|0)>($502|0);
  if (!($503)) {
   STACKTOP = sp;return;
  }
  $504 = $3;
  $505 = ((($504)) + 1372|0);
  $506 = $4;
  $507 = (($506) - 1)|0;
  $508 = (($505) + ($507<<2)|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $5;
  $511 = (($509) + ($510<<1)|0);
  $512 = HEAP16[$511>>1]|0;
  $513 = $512 << 16 >> 16;
  switch ($513|0) {
  case 14: case 13: case 12: case 11: case 406:  {
   $514 = $3;
   $515 = ((($514)) + 1372|0);
   $516 = $4;
   $517 = (($515) + ($516<<2)|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = $5;
   $520 = (($518) + ($519<<1)|0);
   HEAP16[$520>>1] = 82;
   $521 = $3;
   $522 = ((($521)) + 1804|0);
   $523 = $4;
   $524 = (($522) + ($523<<2)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $5;
   $527 = (($525) + ($526<<1)|0);
   HEAP16[$527>>1] = 11;
   $528 = $3;
   $529 = ((($528)) + 1372|0);
   $530 = $4;
   $531 = (($530) - 1)|0;
   $532 = (($529) + ($531<<2)|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = $5;
   $535 = (($533) + ($534<<1)|0);
   HEAP16[$535>>1] = 81;
   $536 = $3;
   $537 = ((($536)) + 1804|0);
   $538 = $4;
   $539 = (($538) - 1)|0;
   $540 = (($537) + ($539<<2)|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = $5;
   $543 = (($541) + ($542<<1)|0);
   HEAP16[$543>>1] = 74;
   $544 = $4;
   $545 = $3;
   $546 = ((($545)) + 104|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = (($544) - ($547))|0;
   $549 = ($548>>>0)<=(20);
   if (!($549)) {
    STACKTOP = sp;return;
   }
   $550 = $5;
   $551 = $3;
   $552 = ((($551)) + 108|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = (($550) - ($553))|0;
   $555 = ($554>>>0)<=(15);
   if (!($555)) {
    STACKTOP = sp;return;
   }
   $556 = $3;
   $557 = ((($556)) + 44|0);
   $558 = ((($557)) + 29|0);
   HEAP8[$558>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $559 = $3;
   $560 = ((($559)) + 1372|0);
   $561 = $4;
   $562 = (($560) + ($561<<2)|0);
   $563 = HEAP32[$562>>2]|0;
   $564 = $5;
   $565 = (($563) + ($564<<1)|0);
   HEAP16[$565>>1] = 82;
   $566 = $3;
   $567 = ((($566)) + 1804|0);
   $568 = $4;
   $569 = (($567) + ($568<<2)|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = $5;
   $572 = (($570) + ($571<<1)|0);
   HEAP16[$572>>1] = 11;
   $573 = $3;
   $574 = ((($573)) + 1372|0);
   $575 = $4;
   $576 = (($574) + ($575<<2)|0);
   $577 = HEAP32[$576>>2]|0;
   $578 = $5;
   $579 = (($578) - 1)|0;
   $580 = (($577) + ($579<<1)|0);
   $581 = HEAP16[$580>>1]|0;
   $582 = $581 << 16 >> 16;
   $583 = ($582|0)==(11);
   if ($583) {
    $584 = $3;
    $585 = ((($584)) + 1372|0);
    $586 = $4;
    $587 = (($585) + ($586<<2)|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = $5;
    $590 = (($589) - 1)|0;
    $591 = (($588) + ($590<<1)|0);
    HEAP16[$591>>1] = 12;
   }
   $592 = $3;
   $593 = ((($592)) + 1372|0);
   $594 = $4;
   $595 = (($594) - 2)|0;
   $596 = (($593) + ($595<<2)|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = $5;
   $599 = (($598) - 1)|0;
   $600 = (($597) + ($599<<1)|0);
   $601 = HEAP16[$600>>1]|0;
   $602 = $601 << 16 >> 16;
   $603 = ($602|0)==(11);
   if ($603) {
    $604 = $3;
    $605 = ((($604)) + 1372|0);
    $606 = $4;
    $607 = (($606) - 2)|0;
    $608 = (($605) + ($607<<2)|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = $5;
    $611 = (($610) - 1)|0;
    $612 = (($609) + ($611<<1)|0);
    HEAP16[$612>>1] = 13;
   }
   $613 = $4;
   $614 = $3;
   $615 = ((($614)) + 104|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = (($613) - ($616))|0;
   $618 = ($617>>>0)<=(20);
   if (!($618)) {
    STACKTOP = sp;return;
   }
   $619 = $5;
   $620 = $3;
   $621 = ((($620)) + 108|0);
   $622 = HEAP32[$621>>2]|0;
   $623 = (($619) - ($622))|0;
   $624 = ($623>>>0)<=(15);
   if (!($624)) {
    STACKTOP = sp;return;
   }
   $625 = $3;
   $626 = ((($625)) + 44|0);
   $627 = ((($626)) + 30|0);
   HEAP8[$627>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 }
}
function _Lalien_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 73;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 73;
 STACKTOP = sp;return;
}
function _Lbug_1_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = (($28) + 1)|0;
 $30 = (($27) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) + 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 102;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 88;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 26|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Lbug_n($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_2_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Lbug_n($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_1_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($58) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $5;
 $63 = (($62) + 1)|0;
 $64 = (($61) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 103;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 90;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 26|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Lbug_e($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_2_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Lbug_e($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 104;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 92;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 26|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Lbug_s($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Lbug_s($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_1_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = (($28) + 1)|0;
 $30 = (($27) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($58) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $5;
 $63 = (($62) - 1)|0;
 $64 = (($61) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 101;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 86;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 26|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Lbug_w($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_2_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Lbug_w($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_1_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 140;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 124;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 27|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Ltank_n($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_2_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Ltank_n($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_1_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = (($28) + 1)|0;
 $30 = (($27) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($58) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $5;
 $63 = (($62) - 1)|0;
 $64 = (($61) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 137;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 118;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 27|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Ltank_e($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_2_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Ltank_e($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = (($28) + 1)|0;
 $30 = (($27) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) + 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 138;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 120;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 27|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Ltank_s($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Ltank_s($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_1_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $5;
 $47 = (($45) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($58) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $5;
 $63 = (($62) + 1)|0;
 $64 = (($61) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 14: case 13: case 12: case 11: case 406:  {
  $67 = $3;
  $68 = ((($67)) + 1372|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 139;
  $74 = $3;
  $75 = ((($74)) + 1804|0);
  $76 = $4;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($78) + ($79<<1)|0);
  HEAP16[$80>>1] = 122;
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 104|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = ($85>>>0)<=(20);
  if (!($86)) {
   STACKTOP = sp;return;
  }
  $87 = $5;
  $88 = $3;
  $89 = ((($88)) + 108|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) - ($90))|0;
  $92 = ($91>>>0)<=(15);
  if (!($92)) {
   STACKTOP = sp;return;
  }
  $93 = $3;
  $94 = ((($93)) + 44|0);
  $95 = ((($94)) + 27|0);
  HEAP8[$95>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($100) + ($101<<1)|0);
  HEAP16[$102>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $103 = $3;
  $104 = $4;
  $105 = $5;
  _Ltank_w($103,$104,$105);
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_2_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $16 = $3;
  $17 = ((($16)) + 1804|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 $24 = ((($23)) + 1372|0);
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $5;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 switch ($32|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $33 = $3;
  $34 = ((($33)) + 1804|0);
  $35 = $4;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<1)|0);
  HEAP16[$39>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $3;
 $41 = ((($40)) + 1372|0);
 $42 = $4;
 $43 = (($41) + ($42<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 $46 = (($45) + 1)|0;
 $47 = (($44) + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 switch ($49|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $50 = $3;
  $51 = ((($50)) + 1804|0);
  $52 = $4;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $57 = $3;
 $58 = ((($57)) + 1372|0);
 $59 = $4;
 $60 = (($59) - 1)|0;
 $61 = (($58) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (($62) + ($63<<1)|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 switch ($66|0) {
 case 302: case 301: case 278: case 277: case 276: case 275: case 274: case 273: case 272: case 271:  {
  $67 = $3;
  $68 = ((($67)) + 1804|0);
  $69 = $4;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $5;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = 3;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $74 = $3;
  $75 = $4;
  $76 = $5;
  _Ltank_w($74,$75,$76);
  STACKTOP = sp;return;
 }
 }
}
function _Lemerald($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 L1: do {
  switch ($15|0) {
  case 13: case 12: case 11:  {
   $16 = $3;
   $17 = ((($16)) + 1372|0);
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21<<1)|0);
   HEAP16[$22>>1] = 153;
   $23 = $3;
   $24 = ((($23)) + 1804|0);
   $25 = $4;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + ($28<<1)|0);
   HEAP16[$29>>1] = 11;
   $30 = $3;
   $31 = ((($30)) + 1372|0);
   $32 = $4;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = (($35) + 1)|0;
   $37 = (($34) + ($36<<1)|0);
   HEAP16[$37>>1] = 152;
   $38 = $3;
   $39 = ((($38)) + 1804|0);
   $40 = $4;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = (($43) + 1)|0;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = 151;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $46 = $3;
   $47 = ((($46)) + 1372|0);
   $48 = $4;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $5;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 153;
   $53 = $3;
   $54 = ((($53)) + 1804|0);
   $55 = $4;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $5;
   $59 = (($57) + ($58<<1)|0);
   HEAP16[$59>>1] = 11;
   $60 = $3;
   $61 = ((($60)) + 1372|0);
   $62 = $4;
   $63 = (($62) + 1)|0;
   $64 = (($61) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = (($65) + ($66<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68 << 16 >> 16;
   $70 = ($69|0)==(11);
   if ($70) {
    $71 = $3;
    $72 = ((($71)) + 1372|0);
    $73 = $4;
    $74 = (($73) + 1)|0;
    $75 = (($72) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $5;
    $78 = (($76) + ($77<<1)|0);
    HEAP16[$78>>1] = 12;
   }
   $79 = $3;
   $80 = ((($79)) + 1372|0);
   $81 = $4;
   $82 = (($81) - 1)|0;
   $83 = (($80) + ($82<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   $86 = (($84) + ($85<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = ($88|0)==(11);
   if ($89) {
    $90 = $3;
    $91 = ((($90)) + 1372|0);
    $92 = $4;
    $93 = (($92) - 1)|0;
    $94 = (($91) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $5;
    $97 = (($95) + ($96<<1)|0);
    HEAP16[$97>>1] = 13;
   }
   $98 = $4;
   $99 = $3;
   $100 = ((($99)) + 104|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($98) - ($101))|0;
   $103 = ($102>>>0)<=(20);
   if (!($103)) {
    STACKTOP = sp;return;
   }
   $104 = $5;
   $105 = $3;
   $106 = ((($105)) + 108|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) - ($107))|0;
   $109 = ($108>>>0)<=(15);
   if (!($109)) {
    STACKTOP = sp;return;
   }
   $110 = $3;
   $111 = ((($110)) + 44|0);
   $112 = ((($111)) + 30|0);
   HEAP8[$112>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 347: case 346: case 345: case 344: case 343: case 342: case 341: case 340: case 339: case 338: case 337: case 336: case 322: case 321: case 294: case 293: case 291: case 290: case 289: case 288: case 285: case 284: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $113 = $3;
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114*12421)|0;
   $116 = (($115) + 1)|0;
   $117 = $3;
   HEAP32[$117>>2] = $116;
   $118 = $3;
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & 65535;
   $121 = $120<<1;
   $122 = $121 >> 16;
   $123 = ($122|0)!=(0);
   $124 = $3;
   $125 = ((($124)) + 1372|0);
   $126 = $4;
   if ($123) {
    $127 = (($126) + 1)|0;
    $128 = (($125) + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $5;
    $131 = (($129) + ($130<<1)|0);
    $132 = HEAP16[$131>>1]|0;
    $133 = $132 << 16 >> 16;
    $134 = (11821 + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = ($135<<24>>24)!=(0);
    L21: do {
     if ($136) {
      $137 = $3;
      $138 = ((($137)) + 1372|0);
      $139 = $4;
      $140 = (($139) + 1)|0;
      $141 = (($138) + ($140<<2)|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $5;
      $144 = (($143) + 1)|0;
      $145 = (($142) + ($144<<1)|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146 << 16 >> 16;
      switch ($147|0) {
      case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
       break;
      }
      default: {
       break L21;
      }
      }
      $148 = $3;
      $149 = ((($148)) + 1372|0);
      $150 = $4;
      $151 = (($149) + ($150<<2)|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $5;
      $154 = (($152) + ($153<<1)|0);
      HEAP16[$154>>1] = 155;
      $155 = $3;
      $156 = ((($155)) + 1804|0);
      $157 = $4;
      $158 = (($156) + ($157<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $5;
      $161 = (($159) + ($160<<1)|0);
      HEAP16[$161>>1] = 11;
      $162 = $3;
      $163 = ((($162)) + 1372|0);
      $164 = $4;
      $165 = (($164) + 1)|0;
      $166 = (($163) + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $5;
      $169 = (($167) + ($168<<1)|0);
      HEAP16[$169>>1] = 154;
      $170 = $3;
      $171 = ((($170)) + 1804|0);
      $172 = $4;
      $173 = (($172) + 1)|0;
      $174 = (($171) + ($173<<2)|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $5;
      $177 = (($175) + ($176<<1)|0);
      HEAP16[$177>>1] = 150;
      $178 = $3;
      $179 = ((($178)) + 1372|0);
      $180 = $4;
      $181 = (($179) + ($180<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $5;
      $184 = (($183) + 1)|0;
      $185 = (($182) + ($184<<1)|0);
      $186 = HEAP16[$185>>1]|0;
      $187 = $186 << 16 >> 16;
      $188 = ($187|0)==(290);
      if (!($188)) {
       STACKTOP = sp;return;
      }
      $189 = $3;
      $190 = ((($189)) + 1372|0);
      $191 = $4;
      $192 = (($190) + ($191<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $5;
      $195 = (($194) + 1)|0;
      $196 = (($193) + ($195<<1)|0);
      HEAP16[$196>>1] = 291;
      STACKTOP = sp;return;
     }
    } while(0);
    $197 = $3;
    $198 = ((($197)) + 1372|0);
    $199 = $4;
    $200 = (($199) - 1)|0;
    $201 = (($198) + ($200<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $5;
    $204 = (($202) + ($203<<1)|0);
    $205 = HEAP16[$204>>1]|0;
    $206 = $205 << 16 >> 16;
    $207 = (11821 + ($206)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = ($208<<24>>24)!=(0);
    if (!($209)) {
     break L1;
    }
    $210 = $3;
    $211 = ((($210)) + 1372|0);
    $212 = $4;
    $213 = (($212) - 1)|0;
    $214 = (($211) + ($213<<2)|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $5;
    $217 = (($216) + 1)|0;
    $218 = (($215) + ($217<<1)|0);
    $219 = HEAP16[$218>>1]|0;
    $220 = $219 << 16 >> 16;
    switch ($220|0) {
    case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $221 = $3;
    $222 = ((($221)) + 1372|0);
    $223 = $4;
    $224 = (($222) + ($223<<2)|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $5;
    $227 = (($225) + ($226<<1)|0);
    HEAP16[$227>>1] = 157;
    $228 = $3;
    $229 = ((($228)) + 1804|0);
    $230 = $4;
    $231 = (($229) + ($230<<2)|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $5;
    $234 = (($232) + ($233<<1)|0);
    HEAP16[$234>>1] = 11;
    $235 = $3;
    $236 = ((($235)) + 1372|0);
    $237 = $4;
    $238 = (($237) - 1)|0;
    $239 = (($236) + ($238<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $5;
    $242 = (($240) + ($241<<1)|0);
    HEAP16[$242>>1] = 156;
    $243 = $3;
    $244 = ((($243)) + 1804|0);
    $245 = $4;
    $246 = (($245) - 1)|0;
    $247 = (($244) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $5;
    $250 = (($248) + ($249<<1)|0);
    HEAP16[$250>>1] = 150;
    $251 = $3;
    $252 = ((($251)) + 1372|0);
    $253 = $4;
    $254 = (($252) + ($253<<2)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = $5;
    $257 = (($256) + 1)|0;
    $258 = (($255) + ($257<<1)|0);
    $259 = HEAP16[$258>>1]|0;
    $260 = $259 << 16 >> 16;
    $261 = ($260|0)==(290);
    if (!($261)) {
     STACKTOP = sp;return;
    }
    $262 = $3;
    $263 = ((($262)) + 1372|0);
    $264 = $4;
    $265 = (($263) + ($264<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $5;
    $268 = (($267) + 1)|0;
    $269 = (($266) + ($268<<1)|0);
    HEAP16[$269>>1] = 291;
    STACKTOP = sp;return;
   } else {
    $270 = (($126) - 1)|0;
    $271 = (($125) + ($270<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = $5;
    $274 = (($272) + ($273<<1)|0);
    $275 = HEAP16[$274>>1]|0;
    $276 = $275 << 16 >> 16;
    $277 = (11821 + ($276)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = ($278<<24>>24)!=(0);
    L36: do {
     if ($279) {
      $280 = $3;
      $281 = ((($280)) + 1372|0);
      $282 = $4;
      $283 = (($282) - 1)|0;
      $284 = (($281) + ($283<<2)|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = $5;
      $287 = (($286) + 1)|0;
      $288 = (($285) + ($287<<1)|0);
      $289 = HEAP16[$288>>1]|0;
      $290 = $289 << 16 >> 16;
      switch ($290|0) {
      case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
       break;
      }
      default: {
       break L36;
      }
      }
      $291 = $3;
      $292 = ((($291)) + 1372|0);
      $293 = $4;
      $294 = (($292) + ($293<<2)|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = $5;
      $297 = (($295) + ($296<<1)|0);
      HEAP16[$297>>1] = 157;
      $298 = $3;
      $299 = ((($298)) + 1804|0);
      $300 = $4;
      $301 = (($299) + ($300<<2)|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $5;
      $304 = (($302) + ($303<<1)|0);
      HEAP16[$304>>1] = 11;
      $305 = $3;
      $306 = ((($305)) + 1372|0);
      $307 = $4;
      $308 = (($307) - 1)|0;
      $309 = (($306) + ($308<<2)|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = $5;
      $312 = (($310) + ($311<<1)|0);
      HEAP16[$312>>1] = 156;
      $313 = $3;
      $314 = ((($313)) + 1804|0);
      $315 = $4;
      $316 = (($315) - 1)|0;
      $317 = (($314) + ($316<<2)|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = $5;
      $320 = (($318) + ($319<<1)|0);
      HEAP16[$320>>1] = 150;
      $321 = $3;
      $322 = ((($321)) + 1372|0);
      $323 = $4;
      $324 = (($322) + ($323<<2)|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = $5;
      $327 = (($326) + 1)|0;
      $328 = (($325) + ($327<<1)|0);
      $329 = HEAP16[$328>>1]|0;
      $330 = $329 << 16 >> 16;
      $331 = ($330|0)==(290);
      if (!($331)) {
       STACKTOP = sp;return;
      }
      $332 = $3;
      $333 = ((($332)) + 1372|0);
      $334 = $4;
      $335 = (($333) + ($334<<2)|0);
      $336 = HEAP32[$335>>2]|0;
      $337 = $5;
      $338 = (($337) + 1)|0;
      $339 = (($336) + ($338<<1)|0);
      HEAP16[$339>>1] = 291;
      STACKTOP = sp;return;
     }
    } while(0);
    $340 = $3;
    $341 = ((($340)) + 1372|0);
    $342 = $4;
    $343 = (($342) + 1)|0;
    $344 = (($341) + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = $5;
    $347 = (($345) + ($346<<1)|0);
    $348 = HEAP16[$347>>1]|0;
    $349 = $348 << 16 >> 16;
    $350 = (11821 + ($349)|0);
    $351 = HEAP8[$350>>0]|0;
    $352 = ($351<<24>>24)!=(0);
    if (!($352)) {
     break L1;
    }
    $353 = $3;
    $354 = ((($353)) + 1372|0);
    $355 = $4;
    $356 = (($355) + 1)|0;
    $357 = (($354) + ($356<<2)|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $5;
    $360 = (($359) + 1)|0;
    $361 = (($358) + ($360<<1)|0);
    $362 = HEAP16[$361>>1]|0;
    $363 = $362 << 16 >> 16;
    switch ($363|0) {
    case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $364 = $3;
    $365 = ((($364)) + 1372|0);
    $366 = $4;
    $367 = (($365) + ($366<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $5;
    $370 = (($368) + ($369<<1)|0);
    HEAP16[$370>>1] = 155;
    $371 = $3;
    $372 = ((($371)) + 1804|0);
    $373 = $4;
    $374 = (($372) + ($373<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $5;
    $377 = (($375) + ($376<<1)|0);
    HEAP16[$377>>1] = 11;
    $378 = $3;
    $379 = ((($378)) + 1372|0);
    $380 = $4;
    $381 = (($380) + 1)|0;
    $382 = (($379) + ($381<<2)|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = $5;
    $385 = (($383) + ($384<<1)|0);
    HEAP16[$385>>1] = 154;
    $386 = $3;
    $387 = ((($386)) + 1804|0);
    $388 = $4;
    $389 = (($388) + 1)|0;
    $390 = (($387) + ($389<<2)|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = $5;
    $393 = (($391) + ($392<<1)|0);
    HEAP16[$393>>1] = 150;
    $394 = $3;
    $395 = ((($394)) + 1372|0);
    $396 = $4;
    $397 = (($395) + ($396<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $5;
    $400 = (($399) + 1)|0;
    $401 = (($398) + ($400<<1)|0);
    $402 = HEAP16[$401>>1]|0;
    $403 = $402 << 16 >> 16;
    $404 = ($403|0)==(290);
    if (!($404)) {
     STACKTOP = sp;return;
    }
    $405 = $3;
    $406 = ((($405)) + 1372|0);
    $407 = $4;
    $408 = (($406) + ($407<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $5;
    $411 = (($410) + 1)|0;
    $412 = (($409) + ($411<<1)|0);
    HEAP16[$412>>1] = 291;
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $413 = $3;
 $414 = ((($413)) + 348|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = (($415) + 1)|0;
 HEAP32[$414>>2] = $416;
 $417 = ($416|0)>(50);
 if (!($417)) {
  STACKTOP = sp;return;
 }
 $418 = $3;
 $419 = HEAP32[$418>>2]|0;
 $420 = ($419*12421)|0;
 $421 = (($420) + 1)|0;
 $422 = $3;
 HEAP32[$422>>2] = $421;
 $423 = $3;
 $424 = HEAP32[$423>>2]|0;
 $425 = $424 & 65535;
 $426 = $425<<3;
 $427 = $426 >> 16;
 $428 = $3;
 $429 = ((($428)) + 348|0);
 HEAP32[$429>>2] = $427;
 $430 = $3;
 $431 = ((($430)) + 1372|0);
 $432 = $4;
 $433 = (($431) + ($432<<2)|0);
 $434 = HEAP32[$433>>2]|0;
 $435 = $5;
 $436 = (($434) + ($435<<1)|0);
 HEAP16[$436>>1] = 158;
 STACKTOP = sp;return;
}
function _Lemerald_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 153;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 152;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 151;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 153;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 149;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 149;
  STACKTOP = sp;return;
 }
 }
}
function _Lemerald_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 153;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 152;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 151;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 153;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 285: case 284:  {
  $113 = $3;
  $114 = ((($113)) + 392|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)!=(0);
  if ($116) {
   $117 = $3;
   $118 = ((($117)) + 388|0);
   HEAP32[$118>>2] = 1;
   $119 = $3;
   $120 = ((($119)) + 1372|0);
   $121 = $4;
   $122 = (($120) + ($121<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $5;
   $125 = (($123) + ($124<<1)|0);
   HEAP16[$125>>1] = 153;
   $126 = $3;
   $127 = ((($126)) + 1804|0);
   $128 = $4;
   $129 = (($127) + ($128<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $5;
   $132 = (($130) + ($131<<1)|0);
   HEAP16[$132>>1] = 11;
   $133 = $3;
   $134 = ((($133)) + 1372|0);
   $135 = $4;
   $136 = (($134) + ($135<<2)|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $5;
   $139 = (($138) + 2)|0;
   $140 = (($137) + ($139<<1)|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141 << 16 >> 16;
   $143 = (11821 + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = ($144<<24>>24)!=(0);
   if ($145) {
    $146 = $3;
    $147 = ((($146)) + 1372|0);
    $148 = $4;
    $149 = (($147) + ($148<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $5;
    $152 = (($151) + 2)|0;
    $153 = (($150) + ($152<<1)|0);
    HEAP16[$153>>1] = 163;
    $154 = $3;
    $155 = ((($154)) + 1804|0);
    $156 = $4;
    $157 = (($155) + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $5;
    $160 = (($159) + 2)|0;
    $161 = (($158) + ($160<<1)|0);
    HEAP16[$161>>1] = 162;
   }
   $162 = $3;
   $163 = ((($162)) + 44|0);
   $164 = ((($163)) + 16|0);
   HEAP8[$164>>0] = 1;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
 }
 }
 $165 = $3;
 $166 = ((($165)) + 1372|0);
 $167 = $4;
 $168 = (($166) + ($167<<2)|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $5;
 $171 = (($169) + ($170<<1)|0);
 HEAP16[$171>>1] = 149;
 $172 = $3;
 $173 = ((($172)) + 1804|0);
 $174 = $4;
 $175 = (($173) + ($174<<2)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $5;
 $178 = (($176) + ($177<<1)|0);
 HEAP16[$178>>1] = 149;
 $179 = $4;
 $180 = $3;
 $181 = ((($180)) + 104|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($179) - ($182))|0;
 $184 = ($183>>>0)<=(20);
 if (!($184)) {
  STACKTOP = sp;return;
 }
 $185 = $5;
 $186 = $3;
 $187 = ((($186)) + 108|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($185) - ($188))|0;
 $190 = ($189>>>0)<=(15);
 if (!($190)) {
  STACKTOP = sp;return;
 }
 $191 = $3;
 $192 = ((($191)) + 44|0);
 $193 = ((($192)) + 24|0);
 HEAP8[$193>>0] = 1;
 STACKTOP = sp;return;
}
function _Ldiamond($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 L1: do {
  switch ($15|0) {
  case 13: case 12: case 11:  {
   $16 = $3;
   $17 = ((($16)) + 1372|0);
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21<<1)|0);
   HEAP16[$22>>1] = 164;
   $23 = $3;
   $24 = ((($23)) + 1804|0);
   $25 = $4;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + ($28<<1)|0);
   HEAP16[$29>>1] = 11;
   $30 = $3;
   $31 = ((($30)) + 1372|0);
   $32 = $4;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = (($35) + 1)|0;
   $37 = (($34) + ($36<<1)|0);
   HEAP16[$37>>1] = 163;
   $38 = $3;
   $39 = ((($38)) + 1804|0);
   $40 = $4;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = (($43) + 1)|0;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = 162;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $46 = $3;
   $47 = ((($46)) + 1372|0);
   $48 = $4;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $5;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 164;
   $53 = $3;
   $54 = ((($53)) + 1804|0);
   $55 = $4;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $5;
   $59 = (($57) + ($58<<1)|0);
   HEAP16[$59>>1] = 11;
   $60 = $3;
   $61 = ((($60)) + 1372|0);
   $62 = $4;
   $63 = (($62) + 1)|0;
   $64 = (($61) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = (($65) + ($66<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68 << 16 >> 16;
   $70 = ($69|0)==(11);
   if ($70) {
    $71 = $3;
    $72 = ((($71)) + 1372|0);
    $73 = $4;
    $74 = (($73) + 1)|0;
    $75 = (($72) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $5;
    $78 = (($76) + ($77<<1)|0);
    HEAP16[$78>>1] = 12;
   }
   $79 = $3;
   $80 = ((($79)) + 1372|0);
   $81 = $4;
   $82 = (($81) - 1)|0;
   $83 = (($80) + ($82<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   $86 = (($84) + ($85<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = ($88|0)==(11);
   if ($89) {
    $90 = $3;
    $91 = ((($90)) + 1372|0);
    $92 = $4;
    $93 = (($92) - 1)|0;
    $94 = (($91) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $5;
    $97 = (($95) + ($96<<1)|0);
    HEAP16[$97>>1] = 13;
   }
   $98 = $4;
   $99 = $3;
   $100 = ((($99)) + 104|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($98) - ($101))|0;
   $103 = ($102>>>0)<=(20);
   if (!($103)) {
    STACKTOP = sp;return;
   }
   $104 = $5;
   $105 = $3;
   $106 = ((($105)) + 108|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) - ($107))|0;
   $109 = ($108>>>0)<=(15);
   if (!($109)) {
    STACKTOP = sp;return;
   }
   $110 = $3;
   $111 = ((($110)) + 44|0);
   $112 = ((($111)) + 30|0);
   HEAP8[$112>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 347: case 346: case 345: case 344: case 343: case 342: case 341: case 340: case 339: case 338: case 337: case 336: case 322: case 321: case 294: case 293: case 291: case 290: case 289: case 288: case 285: case 284: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $113 = $3;
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114*12421)|0;
   $116 = (($115) + 1)|0;
   $117 = $3;
   HEAP32[$117>>2] = $116;
   $118 = $3;
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & 65535;
   $121 = $120<<1;
   $122 = $121 >> 16;
   $123 = ($122|0)!=(0);
   $124 = $3;
   $125 = ((($124)) + 1372|0);
   $126 = $4;
   if ($123) {
    $127 = (($126) + 1)|0;
    $128 = (($125) + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $5;
    $131 = (($129) + ($130<<1)|0);
    $132 = HEAP16[$131>>1]|0;
    $133 = $132 << 16 >> 16;
    $134 = (11821 + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = ($135<<24>>24)!=(0);
    L21: do {
     if ($136) {
      $137 = $3;
      $138 = ((($137)) + 1372|0);
      $139 = $4;
      $140 = (($139) + 1)|0;
      $141 = (($138) + ($140<<2)|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $5;
      $144 = (($143) + 1)|0;
      $145 = (($142) + ($144<<1)|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146 << 16 >> 16;
      switch ($147|0) {
      case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
       break;
      }
      default: {
       break L21;
      }
      }
      $148 = $3;
      $149 = ((($148)) + 1372|0);
      $150 = $4;
      $151 = (($149) + ($150<<2)|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $5;
      $154 = (($152) + ($153<<1)|0);
      HEAP16[$154>>1] = 166;
      $155 = $3;
      $156 = ((($155)) + 1804|0);
      $157 = $4;
      $158 = (($156) + ($157<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $5;
      $161 = (($159) + ($160<<1)|0);
      HEAP16[$161>>1] = 11;
      $162 = $3;
      $163 = ((($162)) + 1372|0);
      $164 = $4;
      $165 = (($164) + 1)|0;
      $166 = (($163) + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $5;
      $169 = (($167) + ($168<<1)|0);
      HEAP16[$169>>1] = 165;
      $170 = $3;
      $171 = ((($170)) + 1804|0);
      $172 = $4;
      $173 = (($172) + 1)|0;
      $174 = (($171) + ($173<<2)|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $5;
      $177 = (($175) + ($176<<1)|0);
      HEAP16[$177>>1] = 161;
      $178 = $3;
      $179 = ((($178)) + 1372|0);
      $180 = $4;
      $181 = (($179) + ($180<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $5;
      $184 = (($183) + 1)|0;
      $185 = (($182) + ($184<<1)|0);
      $186 = HEAP16[$185>>1]|0;
      $187 = $186 << 16 >> 16;
      $188 = ($187|0)==(290);
      if (!($188)) {
       STACKTOP = sp;return;
      }
      $189 = $3;
      $190 = ((($189)) + 1372|0);
      $191 = $4;
      $192 = (($190) + ($191<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $5;
      $195 = (($194) + 1)|0;
      $196 = (($193) + ($195<<1)|0);
      HEAP16[$196>>1] = 291;
      STACKTOP = sp;return;
     }
    } while(0);
    $197 = $3;
    $198 = ((($197)) + 1372|0);
    $199 = $4;
    $200 = (($199) - 1)|0;
    $201 = (($198) + ($200<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $5;
    $204 = (($202) + ($203<<1)|0);
    $205 = HEAP16[$204>>1]|0;
    $206 = $205 << 16 >> 16;
    $207 = (11821 + ($206)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = ($208<<24>>24)!=(0);
    if (!($209)) {
     break L1;
    }
    $210 = $3;
    $211 = ((($210)) + 1372|0);
    $212 = $4;
    $213 = (($212) - 1)|0;
    $214 = (($211) + ($213<<2)|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $5;
    $217 = (($216) + 1)|0;
    $218 = (($215) + ($217<<1)|0);
    $219 = HEAP16[$218>>1]|0;
    $220 = $219 << 16 >> 16;
    switch ($220|0) {
    case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $221 = $3;
    $222 = ((($221)) + 1372|0);
    $223 = $4;
    $224 = (($222) + ($223<<2)|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = $5;
    $227 = (($225) + ($226<<1)|0);
    HEAP16[$227>>1] = 168;
    $228 = $3;
    $229 = ((($228)) + 1804|0);
    $230 = $4;
    $231 = (($229) + ($230<<2)|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $5;
    $234 = (($232) + ($233<<1)|0);
    HEAP16[$234>>1] = 11;
    $235 = $3;
    $236 = ((($235)) + 1372|0);
    $237 = $4;
    $238 = (($237) - 1)|0;
    $239 = (($236) + ($238<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $5;
    $242 = (($240) + ($241<<1)|0);
    HEAP16[$242>>1] = 167;
    $243 = $3;
    $244 = ((($243)) + 1804|0);
    $245 = $4;
    $246 = (($245) - 1)|0;
    $247 = (($244) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $5;
    $250 = (($248) + ($249<<1)|0);
    HEAP16[$250>>1] = 161;
    $251 = $3;
    $252 = ((($251)) + 1372|0);
    $253 = $4;
    $254 = (($252) + ($253<<2)|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = $5;
    $257 = (($256) + 1)|0;
    $258 = (($255) + ($257<<1)|0);
    $259 = HEAP16[$258>>1]|0;
    $260 = $259 << 16 >> 16;
    $261 = ($260|0)==(290);
    if (!($261)) {
     STACKTOP = sp;return;
    }
    $262 = $3;
    $263 = ((($262)) + 1372|0);
    $264 = $4;
    $265 = (($263) + ($264<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $5;
    $268 = (($267) + 1)|0;
    $269 = (($266) + ($268<<1)|0);
    HEAP16[$269>>1] = 291;
    STACKTOP = sp;return;
   } else {
    $270 = (($126) - 1)|0;
    $271 = (($125) + ($270<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = $5;
    $274 = (($272) + ($273<<1)|0);
    $275 = HEAP16[$274>>1]|0;
    $276 = $275 << 16 >> 16;
    $277 = (11821 + ($276)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = ($278<<24>>24)!=(0);
    L36: do {
     if ($279) {
      $280 = $3;
      $281 = ((($280)) + 1372|0);
      $282 = $4;
      $283 = (($282) - 1)|0;
      $284 = (($281) + ($283<<2)|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = $5;
      $287 = (($286) + 1)|0;
      $288 = (($285) + ($287<<1)|0);
      $289 = HEAP16[$288>>1]|0;
      $290 = $289 << 16 >> 16;
      switch ($290|0) {
      case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
       break;
      }
      default: {
       break L36;
      }
      }
      $291 = $3;
      $292 = ((($291)) + 1372|0);
      $293 = $4;
      $294 = (($292) + ($293<<2)|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = $5;
      $297 = (($295) + ($296<<1)|0);
      HEAP16[$297>>1] = 168;
      $298 = $3;
      $299 = ((($298)) + 1804|0);
      $300 = $4;
      $301 = (($299) + ($300<<2)|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $5;
      $304 = (($302) + ($303<<1)|0);
      HEAP16[$304>>1] = 11;
      $305 = $3;
      $306 = ((($305)) + 1372|0);
      $307 = $4;
      $308 = (($307) - 1)|0;
      $309 = (($306) + ($308<<2)|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = $5;
      $312 = (($310) + ($311<<1)|0);
      HEAP16[$312>>1] = 167;
      $313 = $3;
      $314 = ((($313)) + 1804|0);
      $315 = $4;
      $316 = (($315) - 1)|0;
      $317 = (($314) + ($316<<2)|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = $5;
      $320 = (($318) + ($319<<1)|0);
      HEAP16[$320>>1] = 161;
      $321 = $3;
      $322 = ((($321)) + 1372|0);
      $323 = $4;
      $324 = (($322) + ($323<<2)|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = $5;
      $327 = (($326) + 1)|0;
      $328 = (($325) + ($327<<1)|0);
      $329 = HEAP16[$328>>1]|0;
      $330 = $329 << 16 >> 16;
      $331 = ($330|0)==(290);
      if (!($331)) {
       STACKTOP = sp;return;
      }
      $332 = $3;
      $333 = ((($332)) + 1372|0);
      $334 = $4;
      $335 = (($333) + ($334<<2)|0);
      $336 = HEAP32[$335>>2]|0;
      $337 = $5;
      $338 = (($337) + 1)|0;
      $339 = (($336) + ($338<<1)|0);
      HEAP16[$339>>1] = 291;
      STACKTOP = sp;return;
     }
    } while(0);
    $340 = $3;
    $341 = ((($340)) + 1372|0);
    $342 = $4;
    $343 = (($342) + 1)|0;
    $344 = (($341) + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = $5;
    $347 = (($345) + ($346<<1)|0);
    $348 = HEAP16[$347>>1]|0;
    $349 = $348 << 16 >> 16;
    $350 = (11821 + ($349)|0);
    $351 = HEAP8[$350>>0]|0;
    $352 = ($351<<24>>24)!=(0);
    if (!($352)) {
     break L1;
    }
    $353 = $3;
    $354 = ((($353)) + 1372|0);
    $355 = $4;
    $356 = (($355) + 1)|0;
    $357 = (($354) + ($356<<2)|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = $5;
    $360 = (($359) + 1)|0;
    $361 = (($358) + ($360<<1)|0);
    $362 = HEAP16[$361>>1]|0;
    $363 = $362 << 16 >> 16;
    switch ($363|0) {
    case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $364 = $3;
    $365 = ((($364)) + 1372|0);
    $366 = $4;
    $367 = (($365) + ($366<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $5;
    $370 = (($368) + ($369<<1)|0);
    HEAP16[$370>>1] = 166;
    $371 = $3;
    $372 = ((($371)) + 1804|0);
    $373 = $4;
    $374 = (($372) + ($373<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $5;
    $377 = (($375) + ($376<<1)|0);
    HEAP16[$377>>1] = 11;
    $378 = $3;
    $379 = ((($378)) + 1372|0);
    $380 = $4;
    $381 = (($380) + 1)|0;
    $382 = (($379) + ($381<<2)|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = $5;
    $385 = (($383) + ($384<<1)|0);
    HEAP16[$385>>1] = 165;
    $386 = $3;
    $387 = ((($386)) + 1804|0);
    $388 = $4;
    $389 = (($388) + 1)|0;
    $390 = (($387) + ($389<<2)|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = $5;
    $393 = (($391) + ($392<<1)|0);
    HEAP16[$393>>1] = 161;
    $394 = $3;
    $395 = ((($394)) + 1372|0);
    $396 = $4;
    $397 = (($395) + ($396<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = $5;
    $400 = (($399) + 1)|0;
    $401 = (($398) + ($400<<1)|0);
    $402 = HEAP16[$401>>1]|0;
    $403 = $402 << 16 >> 16;
    $404 = ($403|0)==(290);
    if (!($404)) {
     STACKTOP = sp;return;
    }
    $405 = $3;
    $406 = ((($405)) + 1372|0);
    $407 = $4;
    $408 = (($406) + ($407<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $5;
    $411 = (($410) + 1)|0;
    $412 = (($409) + ($411<<1)|0);
    HEAP16[$412>>1] = 291;
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $413 = $3;
 $414 = ((($413)) + 348|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = (($415) + 1)|0;
 HEAP32[$414>>2] = $416;
 $417 = ($416|0)>(50);
 if (!($417)) {
  STACKTOP = sp;return;
 }
 $418 = $3;
 $419 = HEAP32[$418>>2]|0;
 $420 = ($419*12421)|0;
 $421 = (($420) + 1)|0;
 $422 = $3;
 HEAP32[$422>>2] = $421;
 $423 = $3;
 $424 = HEAP32[$423>>2]|0;
 $425 = $424 & 65535;
 $426 = $425<<3;
 $427 = $426 >> 16;
 $428 = $3;
 $429 = ((($428)) + 348|0);
 HEAP32[$429>>2] = $427;
 $430 = $3;
 $431 = ((($430)) + 1372|0);
 $432 = $4;
 $433 = (($431) + ($432<<2)|0);
 $434 = HEAP32[$433>>2]|0;
 $435 = $5;
 $436 = (($434) + ($435<<1)|0);
 HEAP16[$436>>1] = 169;
 STACKTOP = sp;return;
}
function _Ldiamond_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 164;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 163;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 162;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 164;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 160;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 160;
  STACKTOP = sp;return;
 }
 }
}
function _Ldiamond_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 164;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 163;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 162;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 164;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 285: case 284:  {
  $113 = $3;
  $114 = ((($113)) + 392|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)!=(0);
  if ($116) {
   $117 = $3;
   $118 = ((($117)) + 388|0);
   HEAP32[$118>>2] = 1;
   $119 = $3;
   $120 = ((($119)) + 1372|0);
   $121 = $4;
   $122 = (($120) + ($121<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $5;
   $125 = (($123) + ($124<<1)|0);
   HEAP16[$125>>1] = 164;
   $126 = $3;
   $127 = ((($126)) + 1804|0);
   $128 = $4;
   $129 = (($127) + ($128<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $5;
   $132 = (($130) + ($131<<1)|0);
   HEAP16[$132>>1] = 11;
   $133 = $3;
   $134 = ((($133)) + 1372|0);
   $135 = $4;
   $136 = (($134) + ($135<<2)|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $5;
   $139 = (($138) + 2)|0;
   $140 = (($137) + ($139<<1)|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141 << 16 >> 16;
   $143 = (11821 + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = ($144<<24>>24)!=(0);
   if ($145) {
    $146 = $3;
    $147 = ((($146)) + 1372|0);
    $148 = $4;
    $149 = (($147) + ($148<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $5;
    $152 = (($151) + 2)|0;
    $153 = (($150) + ($152<<1)|0);
    HEAP16[$153>>1] = 175;
    $154 = $3;
    $155 = ((($154)) + 1804|0);
    $156 = $4;
    $157 = (($155) + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $5;
    $160 = (($159) + 2)|0;
    $161 = (($158) + ($160<<1)|0);
    HEAP16[$161>>1] = 174;
   }
   $162 = $3;
   $163 = ((($162)) + 44|0);
   $164 = ((($163)) + 16|0);
   HEAP8[$164>>0] = 1;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
 }
 }
 $165 = $3;
 $166 = ((($165)) + 1372|0);
 $167 = $4;
 $168 = (($166) + ($167<<2)|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $5;
 $171 = (($169) + ($170<<1)|0);
 HEAP16[$171>>1] = 160;
 $172 = $3;
 $173 = ((($172)) + 1804|0);
 $174 = $4;
 $175 = (($173) + ($174<<2)|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $5;
 $178 = (($176) + ($177<<1)|0);
 HEAP16[$178>>1] = 160;
 $179 = $4;
 $180 = $3;
 $181 = ((($180)) + 104|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($179) - ($182))|0;
 $184 = ($183>>>0)<=(20);
 if (!($184)) {
  STACKTOP = sp;return;
 }
 $185 = $5;
 $186 = $3;
 $187 = ((($186)) + 108|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($185) - ($188))|0;
 $190 = ($189>>>0)<=(15);
 if (!($190)) {
  STACKTOP = sp;return;
 }
 $191 = $3;
 $192 = ((($191)) + 44|0);
 $193 = ((($192)) + 24|0);
 HEAP8[$193>>0] = 1;
 STACKTOP = sp;return;
}
function _Lstone($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 176;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 175;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 174;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 176;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 305:  {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 307;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 308;
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($132) + 1)|0;
  $134 = (($131) + ($133<<1)|0);
  HEAP16[$134>>1] = 311;
  $135 = $3;
  $136 = ((($135)) + 1804|0);
  $137 = $4;
  $138 = (($136) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $5;
  $141 = (($140) + 1)|0;
  $142 = (($139) + ($141<<1)|0);
  HEAP16[$142>>1] = 312;
  STACKTOP = sp;return;
  break;
 }
 case 343: case 342: case 341: case 340: case 322: case 321: case 304: case 303: case 294: case 293: case 291: case 290: case 289: case 288: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
  $143 = $3;
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144*12421)|0;
  $146 = (($145) + 1)|0;
  $147 = $3;
  HEAP32[$147>>2] = $146;
  $148 = $3;
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 & 65535;
  $151 = $150<<1;
  $152 = $151 >> 16;
  $153 = ($152|0)!=(0);
  $154 = $3;
  $155 = ((($154)) + 1372|0);
  $156 = $4;
  if ($153) {
   $157 = (($156) + 1)|0;
   $158 = (($155) + ($157<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $5;
   $161 = (($159) + ($160<<1)|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = $162 << 16 >> 16;
   $164 = (11821 + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = ($165<<24>>24)!=(0);
   L23: do {
    if ($166) {
     $167 = $3;
     $168 = ((($167)) + 1372|0);
     $169 = $4;
     $170 = (($169) + 1)|0;
     $171 = (($168) + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $5;
     $174 = (($173) + 1)|0;
     $175 = (($172) + ($174<<1)|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = $176 << 16 >> 16;
     switch ($177|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L23;
     }
     }
     $178 = $3;
     $179 = ((($178)) + 1372|0);
     $180 = $4;
     $181 = (($179) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $5;
     $184 = (($182) + ($183<<1)|0);
     HEAP16[$184>>1] = 178;
     $185 = $3;
     $186 = ((($185)) + 1804|0);
     $187 = $4;
     $188 = (($186) + ($187<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $5;
     $191 = (($189) + ($190<<1)|0);
     HEAP16[$191>>1] = 11;
     $192 = $3;
     $193 = ((($192)) + 1372|0);
     $194 = $4;
     $195 = (($194) + 1)|0;
     $196 = (($193) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $5;
     $199 = (($197) + ($198<<1)|0);
     HEAP16[$199>>1] = 177;
     $200 = $3;
     $201 = ((($200)) + 1804|0);
     $202 = $4;
     $203 = (($202) + 1)|0;
     $204 = (($201) + ($203<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $5;
     $207 = (($205) + ($206<<1)|0);
     HEAP16[$207>>1] = 173;
     $208 = $3;
     $209 = ((($208)) + 1372|0);
     $210 = $4;
     $211 = (($209) + ($210<<2)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = $5;
     $214 = (($213) + 1)|0;
     $215 = (($212) + ($214<<1)|0);
     $216 = HEAP16[$215>>1]|0;
     $217 = $216 << 16 >> 16;
     $218 = ($217|0)==(290);
     if (!($218)) {
      STACKTOP = sp;return;
     }
     $219 = $3;
     $220 = ((($219)) + 1372|0);
     $221 = $4;
     $222 = (($220) + ($221<<2)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $5;
     $225 = (($224) + 1)|0;
     $226 = (($223) + ($225<<1)|0);
     HEAP16[$226>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $227 = $3;
   $228 = ((($227)) + 1372|0);
   $229 = $4;
   $230 = (($229) - 1)|0;
   $231 = (($228) + ($230<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $5;
   $234 = (($232) + ($233<<1)|0);
   $235 = HEAP16[$234>>1]|0;
   $236 = $235 << 16 >> 16;
   $237 = (11821 + ($236)|0);
   $238 = HEAP8[$237>>0]|0;
   $239 = ($238<<24>>24)!=(0);
   if (!($239)) {
    STACKTOP = sp;return;
   }
   $240 = $3;
   $241 = ((($240)) + 1372|0);
   $242 = $4;
   $243 = (($242) - 1)|0;
   $244 = (($241) + ($243<<2)|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $5;
   $247 = (($246) + 1)|0;
   $248 = (($245) + ($247<<1)|0);
   $249 = HEAP16[$248>>1]|0;
   $250 = $249 << 16 >> 16;
   switch ($250|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $251 = $3;
   $252 = ((($251)) + 1372|0);
   $253 = $4;
   $254 = (($252) + ($253<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $5;
   $257 = (($255) + ($256<<1)|0);
   HEAP16[$257>>1] = 180;
   $258 = $3;
   $259 = ((($258)) + 1804|0);
   $260 = $4;
   $261 = (($259) + ($260<<2)|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $5;
   $264 = (($262) + ($263<<1)|0);
   HEAP16[$264>>1] = 11;
   $265 = $3;
   $266 = ((($265)) + 1372|0);
   $267 = $4;
   $268 = (($267) - 1)|0;
   $269 = (($266) + ($268<<2)|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $5;
   $272 = (($270) + ($271<<1)|0);
   HEAP16[$272>>1] = 179;
   $273 = $3;
   $274 = ((($273)) + 1804|0);
   $275 = $4;
   $276 = (($275) - 1)|0;
   $277 = (($274) + ($276<<2)|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = $5;
   $280 = (($278) + ($279<<1)|0);
   HEAP16[$280>>1] = 173;
   $281 = $3;
   $282 = ((($281)) + 1372|0);
   $283 = $4;
   $284 = (($282) + ($283<<2)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $5;
   $287 = (($286) + 1)|0;
   $288 = (($285) + ($287<<1)|0);
   $289 = HEAP16[$288>>1]|0;
   $290 = $289 << 16 >> 16;
   $291 = ($290|0)==(290);
   if (!($291)) {
    STACKTOP = sp;return;
   }
   $292 = $3;
   $293 = ((($292)) + 1372|0);
   $294 = $4;
   $295 = (($293) + ($294<<2)|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $5;
   $298 = (($297) + 1)|0;
   $299 = (($296) + ($298<<1)|0);
   HEAP16[$299>>1] = 291;
   STACKTOP = sp;return;
  } else {
   $300 = (($156) - 1)|0;
   $301 = (($155) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $5;
   $304 = (($302) + ($303<<1)|0);
   $305 = HEAP16[$304>>1]|0;
   $306 = $305 << 16 >> 16;
   $307 = (11821 + ($306)|0);
   $308 = HEAP8[$307>>0]|0;
   $309 = ($308<<24>>24)!=(0);
   L42: do {
    if ($309) {
     $310 = $3;
     $311 = ((($310)) + 1372|0);
     $312 = $4;
     $313 = (($312) - 1)|0;
     $314 = (($311) + ($313<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = $5;
     $317 = (($316) + 1)|0;
     $318 = (($315) + ($317<<1)|0);
     $319 = HEAP16[$318>>1]|0;
     $320 = $319 << 16 >> 16;
     switch ($320|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L42;
     }
     }
     $321 = $3;
     $322 = ((($321)) + 1372|0);
     $323 = $4;
     $324 = (($322) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $5;
     $327 = (($325) + ($326<<1)|0);
     HEAP16[$327>>1] = 180;
     $328 = $3;
     $329 = ((($328)) + 1804|0);
     $330 = $4;
     $331 = (($329) + ($330<<2)|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $5;
     $334 = (($332) + ($333<<1)|0);
     HEAP16[$334>>1] = 11;
     $335 = $3;
     $336 = ((($335)) + 1372|0);
     $337 = $4;
     $338 = (($337) - 1)|0;
     $339 = (($336) + ($338<<2)|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = $5;
     $342 = (($340) + ($341<<1)|0);
     HEAP16[$342>>1] = 179;
     $343 = $3;
     $344 = ((($343)) + 1804|0);
     $345 = $4;
     $346 = (($345) - 1)|0;
     $347 = (($344) + ($346<<2)|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = $5;
     $350 = (($348) + ($349<<1)|0);
     HEAP16[$350>>1] = 173;
     $351 = $3;
     $352 = ((($351)) + 1372|0);
     $353 = $4;
     $354 = (($352) + ($353<<2)|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $5;
     $357 = (($356) + 1)|0;
     $358 = (($355) + ($357<<1)|0);
     $359 = HEAP16[$358>>1]|0;
     $360 = $359 << 16 >> 16;
     $361 = ($360|0)==(290);
     if (!($361)) {
      STACKTOP = sp;return;
     }
     $362 = $3;
     $363 = ((($362)) + 1372|0);
     $364 = $4;
     $365 = (($363) + ($364<<2)|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $5;
     $368 = (($367) + 1)|0;
     $369 = (($366) + ($368<<1)|0);
     HEAP16[$369>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $370 = $3;
   $371 = ((($370)) + 1372|0);
   $372 = $4;
   $373 = (($372) + 1)|0;
   $374 = (($371) + ($373<<2)|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $5;
   $377 = (($375) + ($376<<1)|0);
   $378 = HEAP16[$377>>1]|0;
   $379 = $378 << 16 >> 16;
   $380 = (11821 + ($379)|0);
   $381 = HEAP8[$380>>0]|0;
   $382 = ($381<<24>>24)!=(0);
   if (!($382)) {
    STACKTOP = sp;return;
   }
   $383 = $3;
   $384 = ((($383)) + 1372|0);
   $385 = $4;
   $386 = (($385) + 1)|0;
   $387 = (($384) + ($386<<2)|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = $5;
   $390 = (($389) + 1)|0;
   $391 = (($388) + ($390<<1)|0);
   $392 = HEAP16[$391>>1]|0;
   $393 = $392 << 16 >> 16;
   switch ($393|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $394 = $3;
   $395 = ((($394)) + 1372|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($398) + ($399<<1)|0);
   HEAP16[$400>>1] = 178;
   $401 = $3;
   $402 = ((($401)) + 1804|0);
   $403 = $4;
   $404 = (($402) + ($403<<2)|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $5;
   $407 = (($405) + ($406<<1)|0);
   HEAP16[$407>>1] = 11;
   $408 = $3;
   $409 = ((($408)) + 1372|0);
   $410 = $4;
   $411 = (($410) + 1)|0;
   $412 = (($409) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $5;
   $415 = (($413) + ($414<<1)|0);
   HEAP16[$415>>1] = 177;
   $416 = $3;
   $417 = ((($416)) + 1804|0);
   $418 = $4;
   $419 = (($418) + 1)|0;
   $420 = (($417) + ($419<<2)|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = $5;
   $423 = (($421) + ($422<<1)|0);
   HEAP16[$423>>1] = 173;
   $424 = $3;
   $425 = ((($424)) + 1372|0);
   $426 = $4;
   $427 = (($425) + ($426<<2)|0);
   $428 = HEAP32[$427>>2]|0;
   $429 = $5;
   $430 = (($429) + 1)|0;
   $431 = (($428) + ($430<<1)|0);
   $432 = HEAP16[$431>>1]|0;
   $433 = $432 << 16 >> 16;
   $434 = ($433|0)==(290);
   if (!($434)) {
    STACKTOP = sp;return;
   }
   $435 = $3;
   $436 = ((($435)) + 1372|0);
   $437 = $4;
   $438 = (($436) + ($437<<2)|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = $5;
   $441 = (($440) + 1)|0;
   $442 = (($439) + ($441<<1)|0);
   HEAP16[$442>>1] = 291;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lstone_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 176;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 175;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 174;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 176;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 172;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 172;
  STACKTOP = sp;return;
 }
 }
}
function _Lstone_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 do {
  switch ($15|0) {
  case 13: case 12: case 11: case 406:  {
   $16 = $3;
   $17 = ((($16)) + 1372|0);
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21<<1)|0);
   HEAP16[$22>>1] = 176;
   $23 = $3;
   $24 = ((($23)) + 1804|0);
   $25 = $4;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + ($28<<1)|0);
   HEAP16[$29>>1] = 11;
   $30 = $3;
   $31 = ((($30)) + 1372|0);
   $32 = $4;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = (($35) + 1)|0;
   $37 = (($34) + ($36<<1)|0);
   HEAP16[$37>>1] = 175;
   $38 = $3;
   $39 = ((($38)) + 1804|0);
   $40 = $4;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = (($43) + 1)|0;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = 174;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $46 = $3;
   $47 = ((($46)) + 1372|0);
   $48 = $4;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $5;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 176;
   $53 = $3;
   $54 = ((($53)) + 1804|0);
   $55 = $4;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $5;
   $59 = (($57) + ($58<<1)|0);
   HEAP16[$59>>1] = 11;
   $60 = $3;
   $61 = ((($60)) + 1372|0);
   $62 = $4;
   $63 = (($62) + 1)|0;
   $64 = (($61) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = (($65) + ($66<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68 << 16 >> 16;
   $70 = ($69|0)==(11);
   if ($70) {
    $71 = $3;
    $72 = ((($71)) + 1372|0);
    $73 = $4;
    $74 = (($73) + 1)|0;
    $75 = (($72) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $5;
    $78 = (($76) + ($77<<1)|0);
    HEAP16[$78>>1] = 12;
   }
   $79 = $3;
   $80 = ((($79)) + 1372|0);
   $81 = $4;
   $82 = (($81) - 1)|0;
   $83 = (($80) + ($82<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   $86 = (($84) + ($85<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = ($88|0)==(11);
   if ($89) {
    $90 = $3;
    $91 = ((($90)) + 1372|0);
    $92 = $4;
    $93 = (($92) - 1)|0;
    $94 = (($91) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $5;
    $97 = (($95) + ($96<<1)|0);
    HEAP16[$97>>1] = 13;
   }
   $98 = $4;
   $99 = $3;
   $100 = ((($99)) + 104|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($98) - ($101))|0;
   $103 = ($102>>>0)<=(20);
   if (!($103)) {
    STACKTOP = sp;return;
   }
   $104 = $5;
   $105 = $3;
   $106 = ((($105)) + 108|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) - ($107))|0;
   $109 = ($108>>>0)<=(15);
   if (!($109)) {
    STACKTOP = sp;return;
   }
   $110 = $3;
   $111 = ((($110)) + 44|0);
   $112 = ((($111)) + 30|0);
   HEAP8[$112>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 62: case 61: case 60: case 59:  {
   $113 = $3;
   $114 = ((($113)) + 1372|0);
   $115 = $4;
   $116 = (($114) + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $5;
   $119 = (($117) + ($118<<1)|0);
   HEAP16[$119>>1] = 176;
   $120 = $3;
   $121 = ((($120)) + 1804|0);
   $122 = $4;
   $123 = (($121) + ($122<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $5;
   $126 = (($124) + ($125<<1)|0);
   HEAP16[$126>>1] = 11;
   $127 = $3;
   $128 = ((($127)) + 1372|0);
   $129 = $4;
   $130 = (($128) + ($129<<2)|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $5;
   $133 = (($132) + 1)|0;
   $134 = (($131) + ($133<<1)|0);
   HEAP16[$134>>1] = 71;
   $135 = $3;
   $136 = ((($135)) + 1804|0);
   $137 = $4;
   $138 = (($136) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $5;
   $141 = (($140) + 1)|0;
   $142 = (($139) + ($141<<1)|0);
   HEAP16[$142>>1] = 4;
   $143 = $3;
   $144 = ((($143)) + 296|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $3;
   $147 = ((($146)) + 12|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + ($145))|0;
   HEAP32[$147>>2] = $149;
   STACKTOP = sp;return;
   break;
  }
  case 74: case 73:  {
   $150 = $3;
   $151 = ((($150)) + 1372|0);
   $152 = $4;
   $153 = (($151) + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $5;
   $156 = (($154) + ($155<<1)|0);
   HEAP16[$156>>1] = 176;
   $157 = $3;
   $158 = ((($157)) + 1804|0);
   $159 = $4;
   $160 = (($158) + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $5;
   $163 = (($161) + ($162<<1)|0);
   HEAP16[$163>>1] = 11;
   $164 = $3;
   $165 = ((($164)) + 1372|0);
   $166 = $4;
   $167 = (($165) + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $5;
   $170 = (($169) + 1)|0;
   $171 = (($168) + ($170<<1)|0);
   HEAP16[$171>>1] = 83;
   $172 = $3;
   $173 = ((($172)) + 1804|0);
   $174 = $4;
   $175 = (($173) + ($174<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $5;
   $178 = (($177) + 1)|0;
   $179 = (($176) + ($178<<1)|0);
   HEAP16[$179>>1] = 3;
   $180 = $3;
   $181 = ((($180)) + 232|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $3;
   $184 = ((($183)) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + ($182))|0;
   HEAP32[$184>>2] = $186;
   STACKTOP = sp;return;
   break;
  }
  case 86: case 85:  {
   $187 = $3;
   $188 = ((($187)) + 1372|0);
   $189 = $4;
   $190 = (($188) + ($189<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($191) + ($192<<1)|0);
   HEAP16[$193>>1] = 176;
   $194 = $3;
   $195 = ((($194)) + 1804|0);
   $196 = $4;
   $197 = (($195) + ($196<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $5;
   $200 = (($198) + ($199<<1)|0);
   HEAP16[$200>>1] = 11;
   $201 = $3;
   $202 = ((($201)) + 1372|0);
   $203 = $4;
   $204 = (($202) + ($203<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $5;
   $207 = (($206) + 1)|0;
   $208 = (($205) + ($207<<1)|0);
   HEAP16[$208>>1] = 109;
   $209 = $3;
   $210 = ((($209)) + 1804|0);
   $211 = $4;
   $212 = (($210) + ($211<<2)|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $5;
   $215 = (($214) + 1)|0;
   $216 = (($213) + ($215<<1)|0);
   HEAP16[$216>>1] = 2;
   $217 = $3;
   $218 = ((($217)) + 272|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $3;
   $221 = ((($220)) + 12|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($219))|0;
   HEAP32[$221>>2] = $223;
   STACKTOP = sp;return;
   break;
  }
  case 88: case 87:  {
   $224 = $3;
   $225 = ((($224)) + 1372|0);
   $226 = $4;
   $227 = (($225) + ($226<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $5;
   $230 = (($228) + ($229<<1)|0);
   HEAP16[$230>>1] = 176;
   $231 = $3;
   $232 = ((($231)) + 1804|0);
   $233 = $4;
   $234 = (($232) + ($233<<2)|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $5;
   $237 = (($235) + ($236<<1)|0);
   HEAP16[$237>>1] = 11;
   $238 = $3;
   $239 = ((($238)) + 1372|0);
   $240 = $4;
   $241 = (($239) + ($240<<2)|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $5;
   $244 = (($243) + 1)|0;
   $245 = (($242) + ($244<<1)|0);
   HEAP16[$245>>1] = 110;
   $246 = $3;
   $247 = ((($246)) + 1804|0);
   $248 = $4;
   $249 = (($247) + ($248<<2)|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = $5;
   $252 = (($251) + 1)|0;
   $253 = (($250) + ($252<<1)|0);
   HEAP16[$253>>1] = 2;
   $254 = $3;
   $255 = ((($254)) + 272|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $3;
   $258 = ((($257)) + 12|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($259) + ($256))|0;
   HEAP32[$258>>2] = $260;
   STACKTOP = sp;return;
   break;
  }
  case 90: case 89:  {
   $261 = $3;
   $262 = ((($261)) + 1372|0);
   $263 = $4;
   $264 = (($262) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $5;
   $267 = (($265) + ($266<<1)|0);
   HEAP16[$267>>1] = 176;
   $268 = $3;
   $269 = ((($268)) + 1804|0);
   $270 = $4;
   $271 = (($269) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $5;
   $274 = (($272) + ($273<<1)|0);
   HEAP16[$274>>1] = 11;
   $275 = $3;
   $276 = ((($275)) + 1372|0);
   $277 = $4;
   $278 = (($276) + ($277<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $5;
   $281 = (($280) + 1)|0;
   $282 = (($279) + ($281<<1)|0);
   HEAP16[$282>>1] = 111;
   $283 = $3;
   $284 = ((($283)) + 1804|0);
   $285 = $4;
   $286 = (($284) + ($285<<2)|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $5;
   $289 = (($288) + 1)|0;
   $290 = (($287) + ($289<<1)|0);
   HEAP16[$290>>1] = 2;
   $291 = $3;
   $292 = ((($291)) + 272|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $3;
   $295 = ((($294)) + 12|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (($296) + ($293))|0;
   HEAP32[$295>>2] = $297;
   STACKTOP = sp;return;
   break;
  }
  case 92: case 91:  {
   $298 = $3;
   $299 = ((($298)) + 1372|0);
   $300 = $4;
   $301 = (($299) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $5;
   $304 = (($302) + ($303<<1)|0);
   HEAP16[$304>>1] = 176;
   $305 = $3;
   $306 = ((($305)) + 1804|0);
   $307 = $4;
   $308 = (($306) + ($307<<2)|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $5;
   $311 = (($309) + ($310<<1)|0);
   HEAP16[$311>>1] = 11;
   $312 = $3;
   $313 = ((($312)) + 1372|0);
   $314 = $4;
   $315 = (($313) + ($314<<2)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $5;
   $318 = (($317) + 1)|0;
   $319 = (($316) + ($318<<1)|0);
   HEAP16[$319>>1] = 112;
   $320 = $3;
   $321 = ((($320)) + 1804|0);
   $322 = $4;
   $323 = (($321) + ($322<<2)|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = $5;
   $326 = (($325) + 1)|0;
   $327 = (($324) + ($326<<1)|0);
   HEAP16[$327>>1] = 2;
   $328 = $3;
   $329 = ((($328)) + 272|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $3;
   $332 = ((($331)) + 12|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + ($330))|0;
   HEAP32[$332>>2] = $334;
   STACKTOP = sp;return;
   break;
  }
  case 118: case 117:  {
   $335 = $3;
   $336 = ((($335)) + 1372|0);
   $337 = $4;
   $338 = (($336) + ($337<<2)|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $5;
   $341 = (($339) + ($340<<1)|0);
   HEAP16[$341>>1] = 176;
   $342 = $3;
   $343 = ((($342)) + 1804|0);
   $344 = $4;
   $345 = (($343) + ($344<<2)|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = $5;
   $348 = (($346) + ($347<<1)|0);
   HEAP16[$348>>1] = 11;
   $349 = $3;
   $350 = ((($349)) + 1372|0);
   $351 = $4;
   $352 = (($350) + ($351<<2)|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = $5;
   $355 = (($354) + 1)|0;
   $356 = (($353) + ($355<<1)|0);
   HEAP16[$356>>1] = 141;
   $357 = $3;
   $358 = ((($357)) + 1804|0);
   $359 = $4;
   $360 = (($358) + ($359<<2)|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $5;
   $363 = (($362) + 1)|0;
   $364 = (($361) + ($363<<1)|0);
   HEAP16[$364>>1] = 3;
   $365 = $3;
   $366 = ((($365)) + 356|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = $3;
   $369 = ((($368)) + 12|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = (($370) + ($367))|0;
   HEAP32[$369>>2] = $371;
   STACKTOP = sp;return;
   break;
  }
  case 120: case 119:  {
   $372 = $3;
   $373 = ((($372)) + 1372|0);
   $374 = $4;
   $375 = (($373) + ($374<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $5;
   $378 = (($376) + ($377<<1)|0);
   HEAP16[$378>>1] = 176;
   $379 = $3;
   $380 = ((($379)) + 1804|0);
   $381 = $4;
   $382 = (($380) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $5;
   $385 = (($383) + ($384<<1)|0);
   HEAP16[$385>>1] = 11;
   $386 = $3;
   $387 = ((($386)) + 1372|0);
   $388 = $4;
   $389 = (($387) + ($388<<2)|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $5;
   $392 = (($391) + 1)|0;
   $393 = (($390) + ($392<<1)|0);
   HEAP16[$393>>1] = 142;
   $394 = $3;
   $395 = ((($394)) + 1804|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) + 1)|0;
   $401 = (($398) + ($400<<1)|0);
   HEAP16[$401>>1] = 3;
   $402 = $3;
   $403 = ((($402)) + 356|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = $3;
   $406 = ((($405)) + 12|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + ($404))|0;
   HEAP32[$406>>2] = $408;
   STACKTOP = sp;return;
   break;
  }
  case 122: case 121:  {
   $409 = $3;
   $410 = ((($409)) + 1372|0);
   $411 = $4;
   $412 = (($410) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $5;
   $415 = (($413) + ($414<<1)|0);
   HEAP16[$415>>1] = 176;
   $416 = $3;
   $417 = ((($416)) + 1804|0);
   $418 = $4;
   $419 = (($417) + ($418<<2)|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = $5;
   $422 = (($420) + ($421<<1)|0);
   HEAP16[$422>>1] = 11;
   $423 = $3;
   $424 = ((($423)) + 1372|0);
   $425 = $4;
   $426 = (($424) + ($425<<2)|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $5;
   $429 = (($428) + 1)|0;
   $430 = (($427) + ($429<<1)|0);
   HEAP16[$430>>1] = 143;
   $431 = $3;
   $432 = ((($431)) + 1804|0);
   $433 = $4;
   $434 = (($432) + ($433<<2)|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = $5;
   $437 = (($436) + 1)|0;
   $438 = (($435) + ($437<<1)|0);
   HEAP16[$438>>1] = 3;
   $439 = $3;
   $440 = ((($439)) + 356|0);
   $441 = HEAP32[$440>>2]|0;
   $442 = $3;
   $443 = ((($442)) + 12|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + ($441))|0;
   HEAP32[$443>>2] = $445;
   STACKTOP = sp;return;
   break;
  }
  case 124: case 123:  {
   $446 = $3;
   $447 = ((($446)) + 1372|0);
   $448 = $4;
   $449 = (($447) + ($448<<2)|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = $5;
   $452 = (($450) + ($451<<1)|0);
   HEAP16[$452>>1] = 176;
   $453 = $3;
   $454 = ((($453)) + 1804|0);
   $455 = $4;
   $456 = (($454) + ($455<<2)|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $5;
   $459 = (($457) + ($458<<1)|0);
   HEAP16[$459>>1] = 11;
   $460 = $3;
   $461 = ((($460)) + 1372|0);
   $462 = $4;
   $463 = (($461) + ($462<<2)|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = $5;
   $466 = (($465) + 1)|0;
   $467 = (($464) + ($466<<1)|0);
   HEAP16[$467>>1] = 144;
   $468 = $3;
   $469 = ((($468)) + 1804|0);
   $470 = $4;
   $471 = (($469) + ($470<<2)|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $5;
   $474 = (($473) + 1)|0;
   $475 = (($472) + ($474<<1)|0);
   HEAP16[$475>>1] = 3;
   $476 = $3;
   $477 = ((($476)) + 356|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $3;
   $480 = ((($479)) + 12|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = (($481) + ($478))|0;
   HEAP32[$480>>2] = $482;
   STACKTOP = sp;return;
   break;
  }
  case 161: case 160:  {
   $483 = $3;
   $484 = ((($483)) + 1372|0);
   $485 = $4;
   $486 = (($484) + ($485<<2)|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = $5;
   $489 = (($488) + 2)|0;
   $490 = (($487) + ($489<<1)|0);
   $491 = HEAP16[$490>>1]|0;
   $492 = $491 << 16 >> 16;
   switch ($492|0) {
   case 292: case 203: case 193: case 183: case 174: case 162: case 151: case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 406:  {
    break;
   }
   default: {
    $522 = $3;
    $523 = ((($522)) + 1372|0);
    $524 = $4;
    $525 = (($523) + ($524<<2)|0);
    $526 = HEAP32[$525>>2]|0;
    $527 = $5;
    $528 = (($526) + ($527<<1)|0);
    HEAP16[$528>>1] = 176;
    $529 = $3;
    $530 = ((($529)) + 1804|0);
    $531 = $4;
    $532 = (($530) + ($531<<2)|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = $5;
    $535 = (($533) + ($534<<1)|0);
    HEAP16[$535>>1] = 11;
    $536 = $3;
    $537 = ((($536)) + 1372|0);
    $538 = $4;
    $539 = (($537) + ($538<<2)|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = $5;
    $542 = (($541) + 1)|0;
    $543 = (($540) + ($542<<1)|0);
    HEAP16[$543>>1] = 171;
    $544 = $3;
    $545 = ((($544)) + 1804|0);
    $546 = $4;
    $547 = (($545) + ($546<<2)|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = $5;
    $550 = (($549) + 1)|0;
    $551 = (($548) + ($550<<1)|0);
    HEAP16[$551>>1] = 173;
    $552 = $3;
    $553 = ((($552)) + 44|0);
    $554 = ((($553)) + 16|0);
    HEAP8[$554>>0] = 1;
    STACKTOP = sp;return;
   }
   }
   $493 = $3;
   $494 = ((($493)) + 1372|0);
   $495 = $4;
   $496 = (($494) + ($495<<2)|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = $5;
   $499 = (($497) + ($498<<1)|0);
   HEAP16[$499>>1] = 172;
   $500 = $3;
   $501 = ((($500)) + 1804|0);
   $502 = $4;
   $503 = (($501) + ($502<<2)|0);
   $504 = HEAP32[$503>>2]|0;
   $505 = $5;
   $506 = (($504) + ($505<<1)|0);
   HEAP16[$506>>1] = 172;
   $507 = $4;
   $508 = $3;
   $509 = ((($508)) + 104|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = (($507) - ($510))|0;
   $512 = ($511>>>0)<=(20);
   if (!($512)) {
    STACKTOP = sp;return;
   }
   $513 = $5;
   $514 = $3;
   $515 = ((($514)) + 108|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = (($513) - ($516))|0;
   $518 = ($517>>>0)<=(15);
   if (!($518)) {
    STACKTOP = sp;return;
   }
   $519 = $3;
   $520 = ((($519)) + 44|0);
   $521 = ((($520)) + 22|0);
   HEAP8[$521>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 182: case 181:  {
   $555 = $3;
   $556 = ((($555)) + 1372|0);
   $557 = $4;
   $558 = (($556) + ($557<<2)|0);
   $559 = HEAP32[$558>>2]|0;
   $560 = $5;
   $561 = (($559) + ($560<<1)|0);
   HEAP16[$561>>1] = 172;
   $562 = $3;
   $563 = ((($562)) + 1804|0);
   $564 = $4;
   $565 = (($563) + ($564<<2)|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = $5;
   $568 = (($566) + ($567<<1)|0);
   HEAP16[$568>>1] = 172;
   $569 = $3;
   $570 = ((($569)) + 1372|0);
   $571 = $4;
   $572 = (($570) + ($571<<2)|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = $5;
   $575 = (($574) + 1)|0;
   $576 = (($573) + ($575<<1)|0);
   HEAP16[$576>>1] = 190;
   $577 = $3;
   $578 = ((($577)) + 1804|0);
   $579 = $4;
   $580 = (($578) + ($579<<2)|0);
   $581 = HEAP32[$580>>2]|0;
   $582 = $5;
   $583 = (($582) + 1)|0;
   $584 = (($581) + ($583<<1)|0);
   HEAP16[$584>>1] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 192: case 191:  {
   $585 = $3;
   $586 = ((($585)) + 1372|0);
   $587 = $4;
   $588 = (($586) + ($587<<2)|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = $5;
   $591 = (($589) + ($590<<1)|0);
   HEAP16[$591>>1] = 172;
   $592 = $3;
   $593 = ((($592)) + 1804|0);
   $594 = $4;
   $595 = (($593) + ($594<<2)|0);
   $596 = HEAP32[$595>>2]|0;
   $597 = $5;
   $598 = (($596) + ($597<<1)|0);
   HEAP16[$598>>1] = 172;
   $599 = $3;
   $600 = ((($599)) + 1372|0);
   $601 = $4;
   $602 = (($600) + ($601<<2)|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = $5;
   $605 = (($604) + 1)|0;
   $606 = (($603) + ($605<<1)|0);
   HEAP16[$606>>1] = 200;
   $607 = $3;
   $608 = ((($607)) + 1804|0);
   $609 = $4;
   $610 = (($608) + ($609<<2)|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = $5;
   $613 = (($612) + 1)|0;
   $614 = (($611) + ($613<<1)|0);
   HEAP16[$614>>1] = 149;
   $615 = $3;
   $616 = ((($615)) + 44|0);
   $617 = ((($616)) + 17|0);
   HEAP8[$617>>0] = 1;
   $618 = $3;
   $619 = ((($618)) + 344|0);
   $620 = HEAP32[$619>>2]|0;
   $621 = $3;
   $622 = ((($621)) + 12|0);
   $623 = HEAP32[$622>>2]|0;
   $624 = (($623) + ($620))|0;
   HEAP32[$622>>2] = $624;
   STACKTOP = sp;return;
   break;
  }
  case 201:  {
   $625 = $3;
   $626 = HEAP32[$625>>2]|0;
   $627 = ($626*12421)|0;
   $628 = (($627) + 1)|0;
   $629 = $3;
   HEAP32[$629>>2] = $628;
   $630 = $3;
   $631 = HEAP32[$630>>2]|0;
   $632 = $631 & 65535;
   $633 = $632<<1;
   $634 = $633 >> 16;
   $635 = ($634|0)!=(0);
   $636 = $3;
   $637 = ((($636)) + 1372|0);
   $638 = $4;
   $639 = (($637) + ($638<<2)|0);
   $640 = HEAP32[$639>>2]|0;
   $641 = $5;
   $642 = (($641) + 1)|0;
   $643 = (($640) + ($642<<1)|0);
   L55: do {
    if ($635) {
     HEAP16[$643>>1] = 205;
     $644 = $3;
     $645 = ((($644)) + 1372|0);
     $646 = $4;
     $647 = (($646) + 1)|0;
     $648 = (($645) + ($647<<2)|0);
     $649 = HEAP32[$648>>2]|0;
     $650 = $5;
     $651 = (($650) + 1)|0;
     $652 = (($649) + ($651<<1)|0);
     $653 = HEAP16[$652>>1]|0;
     $654 = $653 << 16 >> 16;
     switch ($654|0) {
     case 82: case 81: case 80: case 79: case 78: case 77: case 76: case 75: case 74: case 73: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L55;
     }
     }
     $655 = $3;
     $656 = ((($655)) + 1372|0);
     $657 = $4;
     $658 = (($656) + ($657<<2)|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = $5;
     $661 = (($660) + 1)|0;
     $662 = (($659) + ($661<<1)|0);
     HEAP16[$662>>1] = 204;
    } else {
     HEAP16[$643>>1] = 204;
     $663 = $3;
     $664 = ((($663)) + 1372|0);
     $665 = $4;
     $666 = (($665) - 1)|0;
     $667 = (($664) + ($666<<2)|0);
     $668 = HEAP32[$667>>2]|0;
     $669 = $5;
     $670 = (($669) + 1)|0;
     $671 = (($668) + ($670<<1)|0);
     $672 = HEAP16[$671>>1]|0;
     $673 = $672 << 16 >> 16;
     switch ($673|0) {
     case 82: case 81: case 80: case 79: case 78: case 77: case 76: case 75: case 74: case 73: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L55;
     }
     }
     $674 = $3;
     $675 = ((($674)) + 1372|0);
     $676 = $4;
     $677 = (($675) + ($676<<2)|0);
     $678 = HEAP32[$677>>2]|0;
     $679 = $5;
     $680 = (($679) + 1)|0;
     $681 = (($678) + ($680<<1)|0);
     HEAP16[$681>>1] = 205;
    }
   } while(0);
   $682 = $3;
   $683 = ((($682)) + 1372|0);
   $684 = $4;
   $685 = (($683) + ($684<<2)|0);
   $686 = HEAP32[$685>>2]|0;
   $687 = $5;
   $688 = (($686) + ($687<<1)|0);
   HEAP16[$688>>1] = 172;
   $689 = $3;
   $690 = ((($689)) + 1804|0);
   $691 = $4;
   $692 = (($690) + ($691<<2)|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = $5;
   $695 = (($693) + ($694<<1)|0);
   HEAP16[$695>>1] = 172;
   $696 = $4;
   $697 = $3;
   $698 = ((($697)) + 104|0);
   $699 = HEAP32[$698>>2]|0;
   $700 = (($696) - ($699))|0;
   $701 = ($700>>>0)<=(20);
   if (!($701)) {
    STACKTOP = sp;return;
   }
   $702 = $5;
   $703 = $3;
   $704 = ((($703)) + 108|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = (($702) - ($705))|0;
   $707 = ($706>>>0)<=(15);
   if (!($707)) {
    STACKTOP = sp;return;
   }
   $708 = $3;
   $709 = ((($708)) + 44|0);
   $710 = ((($709)) + 23|0);
   HEAP8[$710>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 285: case 284:  {
   $711 = $3;
   $712 = ((($711)) + 392|0);
   $713 = HEAP32[$712>>2]|0;
   $714 = ($713|0)!=(0);
   if ($714) {
    $715 = $3;
    $716 = ((($715)) + 388|0);
    HEAP32[$716>>2] = 1;
    $717 = $3;
    $718 = ((($717)) + 1372|0);
    $719 = $4;
    $720 = (($718) + ($719<<2)|0);
    $721 = HEAP32[$720>>2]|0;
    $722 = $5;
    $723 = (($721) + ($722<<1)|0);
    HEAP16[$723>>1] = 176;
    $724 = $3;
    $725 = ((($724)) + 1804|0);
    $726 = $4;
    $727 = (($725) + ($726<<2)|0);
    $728 = HEAP32[$727>>2]|0;
    $729 = $5;
    $730 = (($728) + ($729<<1)|0);
    HEAP16[$730>>1] = 11;
    $731 = $3;
    $732 = ((($731)) + 1372|0);
    $733 = $4;
    $734 = (($732) + ($733<<2)|0);
    $735 = HEAP32[$734>>2]|0;
    $736 = $5;
    $737 = (($736) + 2)|0;
    $738 = (($735) + ($737<<1)|0);
    $739 = HEAP16[$738>>1]|0;
    $740 = $739 << 16 >> 16;
    $741 = (11821 + ($740)|0);
    $742 = HEAP8[$741>>0]|0;
    $743 = ($742<<24>>24)!=(0);
    if ($743) {
     $744 = $3;
     $745 = ((($744)) + 1372|0);
     $746 = $4;
     $747 = (($745) + ($746<<2)|0);
     $748 = HEAP32[$747>>2]|0;
     $749 = $5;
     $750 = (($749) + 2)|0;
     $751 = (($748) + ($750<<1)|0);
     HEAP16[$751>>1] = 152;
     $752 = $3;
     $753 = ((($752)) + 1804|0);
     $754 = $4;
     $755 = (($753) + ($754<<2)|0);
     $756 = HEAP32[$755>>2]|0;
     $757 = $5;
     $758 = (($757) + 2)|0;
     $759 = (($756) + ($758<<1)|0);
     HEAP16[$759>>1] = 151;
    }
    $760 = $3;
    $761 = ((($760)) + 44|0);
    $762 = ((($761)) + 16|0);
    HEAP8[$762>>0] = 1;
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $763 = $3;
 $764 = ((($763)) + 1372|0);
 $765 = $4;
 $766 = (($764) + ($765<<2)|0);
 $767 = HEAP32[$766>>2]|0;
 $768 = $5;
 $769 = (($767) + ($768<<1)|0);
 HEAP16[$769>>1] = 172;
 $770 = $3;
 $771 = ((($770)) + 1804|0);
 $772 = $4;
 $773 = (($771) + ($772<<2)|0);
 $774 = HEAP32[$773>>2]|0;
 $775 = $5;
 $776 = (($774) + ($775<<1)|0);
 HEAP16[$776>>1] = 172;
 $777 = $4;
 $778 = $3;
 $779 = ((($778)) + 104|0);
 $780 = HEAP32[$779>>2]|0;
 $781 = (($777) - ($780))|0;
 $782 = ($781>>>0)<=(20);
 if (!($782)) {
  STACKTOP = sp;return;
 }
 $783 = $5;
 $784 = $3;
 $785 = ((($784)) + 108|0);
 $786 = HEAP32[$785>>2]|0;
 $787 = (($783) - ($786))|0;
 $788 = ($787>>>0)<=(15);
 if (!($788)) {
  STACKTOP = sp;return;
 }
 $789 = $3;
 $790 = ((($789)) + 44|0);
 $791 = ((($790)) + 22|0);
 HEAP8[$791>>0] = 1;
 STACKTOP = sp;return;
}
function _Lbomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 185;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 184;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 183;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 185;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 343: case 342: case 341: case 340: case 322: case 321: case 294: case 293: case 291: case 290: case 289: case 288: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
  $113 = $3;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114*12421)|0;
  $116 = (($115) + 1)|0;
  $117 = $3;
  HEAP32[$117>>2] = $116;
  $118 = $3;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119 & 65535;
  $121 = $120<<1;
  $122 = $121 >> 16;
  $123 = ($122|0)!=(0);
  $124 = $3;
  $125 = ((($124)) + 1372|0);
  $126 = $4;
  if ($123) {
   $127 = (($126) + 1)|0;
   $128 = (($125) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $5;
   $131 = (($129) + ($130<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132 << 16 >> 16;
   $134 = (11821 + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = ($135<<24>>24)!=(0);
   L21: do {
    if ($136) {
     $137 = $3;
     $138 = ((($137)) + 1372|0);
     $139 = $4;
     $140 = (($139) + 1)|0;
     $141 = (($138) + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $5;
     $144 = (($143) + 1)|0;
     $145 = (($142) + ($144<<1)|0);
     $146 = HEAP16[$145>>1]|0;
     $147 = $146 << 16 >> 16;
     switch ($147|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L21;
     }
     }
     $148 = $3;
     $149 = ((($148)) + 1372|0);
     $150 = $4;
     $151 = (($149) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $5;
     $154 = (($152) + ($153<<1)|0);
     HEAP16[$154>>1] = 187;
     $155 = $3;
     $156 = ((($155)) + 1804|0);
     $157 = $4;
     $158 = (($156) + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $5;
     $161 = (($159) + ($160<<1)|0);
     HEAP16[$161>>1] = 11;
     $162 = $3;
     $163 = ((($162)) + 1372|0);
     $164 = $4;
     $165 = (($164) + 1)|0;
     $166 = (($163) + ($165<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = $5;
     $169 = (($167) + ($168<<1)|0);
     HEAP16[$169>>1] = 186;
     $170 = $3;
     $171 = ((($170)) + 1804|0);
     $172 = $4;
     $173 = (($172) + 1)|0;
     $174 = (($171) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $5;
     $177 = (($175) + ($176<<1)|0);
     HEAP16[$177>>1] = 182;
     $178 = $3;
     $179 = ((($178)) + 1372|0);
     $180 = $4;
     $181 = (($179) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $5;
     $184 = (($183) + 1)|0;
     $185 = (($182) + ($184<<1)|0);
     $186 = HEAP16[$185>>1]|0;
     $187 = $186 << 16 >> 16;
     $188 = ($187|0)==(290);
     if (!($188)) {
      STACKTOP = sp;return;
     }
     $189 = $3;
     $190 = ((($189)) + 1372|0);
     $191 = $4;
     $192 = (($190) + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $5;
     $195 = (($194) + 1)|0;
     $196 = (($193) + ($195<<1)|0);
     HEAP16[$196>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $197 = $3;
   $198 = ((($197)) + 1372|0);
   $199 = $4;
   $200 = (($199) - 1)|0;
   $201 = (($198) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $5;
   $204 = (($202) + ($203<<1)|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205 << 16 >> 16;
   $207 = (11821 + ($206)|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = ($208<<24>>24)!=(0);
   if (!($209)) {
    STACKTOP = sp;return;
   }
   $210 = $3;
   $211 = ((($210)) + 1372|0);
   $212 = $4;
   $213 = (($212) - 1)|0;
   $214 = (($211) + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $5;
   $217 = (($216) + 1)|0;
   $218 = (($215) + ($217<<1)|0);
   $219 = HEAP16[$218>>1]|0;
   $220 = $219 << 16 >> 16;
   switch ($220|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $221 = $3;
   $222 = ((($221)) + 1372|0);
   $223 = $4;
   $224 = (($222) + ($223<<2)|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $5;
   $227 = (($225) + ($226<<1)|0);
   HEAP16[$227>>1] = 189;
   $228 = $3;
   $229 = ((($228)) + 1804|0);
   $230 = $4;
   $231 = (($229) + ($230<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $5;
   $234 = (($232) + ($233<<1)|0);
   HEAP16[$234>>1] = 11;
   $235 = $3;
   $236 = ((($235)) + 1372|0);
   $237 = $4;
   $238 = (($237) - 1)|0;
   $239 = (($236) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $5;
   $242 = (($240) + ($241<<1)|0);
   HEAP16[$242>>1] = 188;
   $243 = $3;
   $244 = ((($243)) + 1804|0);
   $245 = $4;
   $246 = (($245) - 1)|0;
   $247 = (($244) + ($246<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $5;
   $250 = (($248) + ($249<<1)|0);
   HEAP16[$250>>1] = 182;
   $251 = $3;
   $252 = ((($251)) + 1372|0);
   $253 = $4;
   $254 = (($252) + ($253<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $5;
   $257 = (($256) + 1)|0;
   $258 = (($255) + ($257<<1)|0);
   $259 = HEAP16[$258>>1]|0;
   $260 = $259 << 16 >> 16;
   $261 = ($260|0)==(290);
   if (!($261)) {
    STACKTOP = sp;return;
   }
   $262 = $3;
   $263 = ((($262)) + 1372|0);
   $264 = $4;
   $265 = (($263) + ($264<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $5;
   $268 = (($267) + 1)|0;
   $269 = (($266) + ($268<<1)|0);
   HEAP16[$269>>1] = 291;
   STACKTOP = sp;return;
  } else {
   $270 = (($126) - 1)|0;
   $271 = (($125) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $5;
   $274 = (($272) + ($273<<1)|0);
   $275 = HEAP16[$274>>1]|0;
   $276 = $275 << 16 >> 16;
   $277 = (11821 + ($276)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = ($278<<24>>24)!=(0);
   L40: do {
    if ($279) {
     $280 = $3;
     $281 = ((($280)) + 1372|0);
     $282 = $4;
     $283 = (($282) - 1)|0;
     $284 = (($281) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $5;
     $287 = (($286) + 1)|0;
     $288 = (($285) + ($287<<1)|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = $289 << 16 >> 16;
     switch ($290|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L40;
     }
     }
     $291 = $3;
     $292 = ((($291)) + 1372|0);
     $293 = $4;
     $294 = (($292) + ($293<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $5;
     $297 = (($295) + ($296<<1)|0);
     HEAP16[$297>>1] = 189;
     $298 = $3;
     $299 = ((($298)) + 1804|0);
     $300 = $4;
     $301 = (($299) + ($300<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $5;
     $304 = (($302) + ($303<<1)|0);
     HEAP16[$304>>1] = 11;
     $305 = $3;
     $306 = ((($305)) + 1372|0);
     $307 = $4;
     $308 = (($307) - 1)|0;
     $309 = (($306) + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $5;
     $312 = (($310) + ($311<<1)|0);
     HEAP16[$312>>1] = 188;
     $313 = $3;
     $314 = ((($313)) + 1804|0);
     $315 = $4;
     $316 = (($315) - 1)|0;
     $317 = (($314) + ($316<<2)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $5;
     $320 = (($318) + ($319<<1)|0);
     HEAP16[$320>>1] = 182;
     $321 = $3;
     $322 = ((($321)) + 1372|0);
     $323 = $4;
     $324 = (($322) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $5;
     $327 = (($326) + 1)|0;
     $328 = (($325) + ($327<<1)|0);
     $329 = HEAP16[$328>>1]|0;
     $330 = $329 << 16 >> 16;
     $331 = ($330|0)==(290);
     if (!($331)) {
      STACKTOP = sp;return;
     }
     $332 = $3;
     $333 = ((($332)) + 1372|0);
     $334 = $4;
     $335 = (($333) + ($334<<2)|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $5;
     $338 = (($337) + 1)|0;
     $339 = (($336) + ($338<<1)|0);
     HEAP16[$339>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $340 = $3;
   $341 = ((($340)) + 1372|0);
   $342 = $4;
   $343 = (($342) + 1)|0;
   $344 = (($341) + ($343<<2)|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $5;
   $347 = (($345) + ($346<<1)|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348 << 16 >> 16;
   $350 = (11821 + ($349)|0);
   $351 = HEAP8[$350>>0]|0;
   $352 = ($351<<24>>24)!=(0);
   if (!($352)) {
    STACKTOP = sp;return;
   }
   $353 = $3;
   $354 = ((($353)) + 1372|0);
   $355 = $4;
   $356 = (($355) + 1)|0;
   $357 = (($354) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $5;
   $360 = (($359) + 1)|0;
   $361 = (($358) + ($360<<1)|0);
   $362 = HEAP16[$361>>1]|0;
   $363 = $362 << 16 >> 16;
   switch ($363|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $364 = $3;
   $365 = ((($364)) + 1372|0);
   $366 = $4;
   $367 = (($365) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $5;
   $370 = (($368) + ($369<<1)|0);
   HEAP16[$370>>1] = 187;
   $371 = $3;
   $372 = ((($371)) + 1804|0);
   $373 = $4;
   $374 = (($372) + ($373<<2)|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $5;
   $377 = (($375) + ($376<<1)|0);
   HEAP16[$377>>1] = 11;
   $378 = $3;
   $379 = ((($378)) + 1372|0);
   $380 = $4;
   $381 = (($380) + 1)|0;
   $382 = (($379) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $5;
   $385 = (($383) + ($384<<1)|0);
   HEAP16[$385>>1] = 186;
   $386 = $3;
   $387 = ((($386)) + 1804|0);
   $388 = $4;
   $389 = (($388) + 1)|0;
   $390 = (($387) + ($389<<2)|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $5;
   $393 = (($391) + ($392<<1)|0);
   HEAP16[$393>>1] = 182;
   $394 = $3;
   $395 = ((($394)) + 1372|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) + 1)|0;
   $401 = (($398) + ($400<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402 << 16 >> 16;
   $404 = ($403|0)==(290);
   if (!($404)) {
    STACKTOP = sp;return;
   }
   $405 = $3;
   $406 = ((($405)) + 1372|0);
   $407 = $4;
   $408 = (($406) + ($407<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = $5;
   $411 = (($410) + 1)|0;
   $412 = (($409) + ($411<<1)|0);
   HEAP16[$412>>1] = 291;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lbomb_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 185;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 184;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 183;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 185;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 181;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 181;
  STACKTOP = sp;return;
 }
 }
}
function _Lbomb_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 185;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 184;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 183;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 185;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 190;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 3;
  STACKTOP = sp;return;
 }
 }
}
function _Lnut($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 195;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 194;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 193;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 195;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 343: case 342: case 341: case 340: case 322: case 321: case 294: case 293: case 291: case 290: case 289: case 288: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
  $113 = $3;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114*12421)|0;
  $116 = (($115) + 1)|0;
  $117 = $3;
  HEAP32[$117>>2] = $116;
  $118 = $3;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119 & 65535;
  $121 = $120<<1;
  $122 = $121 >> 16;
  $123 = ($122|0)!=(0);
  $124 = $3;
  $125 = ((($124)) + 1372|0);
  $126 = $4;
  if ($123) {
   $127 = (($126) + 1)|0;
   $128 = (($125) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $5;
   $131 = (($129) + ($130<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132 << 16 >> 16;
   $134 = (11821 + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = ($135<<24>>24)!=(0);
   L21: do {
    if ($136) {
     $137 = $3;
     $138 = ((($137)) + 1372|0);
     $139 = $4;
     $140 = (($139) + 1)|0;
     $141 = (($138) + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $5;
     $144 = (($143) + 1)|0;
     $145 = (($142) + ($144<<1)|0);
     $146 = HEAP16[$145>>1]|0;
     $147 = $146 << 16 >> 16;
     switch ($147|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L21;
     }
     }
     $148 = $3;
     $149 = ((($148)) + 1372|0);
     $150 = $4;
     $151 = (($149) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $5;
     $154 = (($152) + ($153<<1)|0);
     HEAP16[$154>>1] = 197;
     $155 = $3;
     $156 = ((($155)) + 1804|0);
     $157 = $4;
     $158 = (($156) + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $5;
     $161 = (($159) + ($160<<1)|0);
     HEAP16[$161>>1] = 11;
     $162 = $3;
     $163 = ((($162)) + 1372|0);
     $164 = $4;
     $165 = (($164) + 1)|0;
     $166 = (($163) + ($165<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = $5;
     $169 = (($167) + ($168<<1)|0);
     HEAP16[$169>>1] = 196;
     $170 = $3;
     $171 = ((($170)) + 1804|0);
     $172 = $4;
     $173 = (($172) + 1)|0;
     $174 = (($171) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $5;
     $177 = (($175) + ($176<<1)|0);
     HEAP16[$177>>1] = 192;
     $178 = $3;
     $179 = ((($178)) + 1372|0);
     $180 = $4;
     $181 = (($179) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $5;
     $184 = (($183) + 1)|0;
     $185 = (($182) + ($184<<1)|0);
     $186 = HEAP16[$185>>1]|0;
     $187 = $186 << 16 >> 16;
     $188 = ($187|0)==(290);
     if (!($188)) {
      STACKTOP = sp;return;
     }
     $189 = $3;
     $190 = ((($189)) + 1372|0);
     $191 = $4;
     $192 = (($190) + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $5;
     $195 = (($194) + 1)|0;
     $196 = (($193) + ($195<<1)|0);
     HEAP16[$196>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $197 = $3;
   $198 = ((($197)) + 1372|0);
   $199 = $4;
   $200 = (($199) - 1)|0;
   $201 = (($198) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $5;
   $204 = (($202) + ($203<<1)|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205 << 16 >> 16;
   $207 = (11821 + ($206)|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = ($208<<24>>24)!=(0);
   if (!($209)) {
    STACKTOP = sp;return;
   }
   $210 = $3;
   $211 = ((($210)) + 1372|0);
   $212 = $4;
   $213 = (($212) - 1)|0;
   $214 = (($211) + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $5;
   $217 = (($216) + 1)|0;
   $218 = (($215) + ($217<<1)|0);
   $219 = HEAP16[$218>>1]|0;
   $220 = $219 << 16 >> 16;
   switch ($220|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $221 = $3;
   $222 = ((($221)) + 1372|0);
   $223 = $4;
   $224 = (($222) + ($223<<2)|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $5;
   $227 = (($225) + ($226<<1)|0);
   HEAP16[$227>>1] = 199;
   $228 = $3;
   $229 = ((($228)) + 1804|0);
   $230 = $4;
   $231 = (($229) + ($230<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $5;
   $234 = (($232) + ($233<<1)|0);
   HEAP16[$234>>1] = 11;
   $235 = $3;
   $236 = ((($235)) + 1372|0);
   $237 = $4;
   $238 = (($237) - 1)|0;
   $239 = (($236) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $5;
   $242 = (($240) + ($241<<1)|0);
   HEAP16[$242>>1] = 198;
   $243 = $3;
   $244 = ((($243)) + 1804|0);
   $245 = $4;
   $246 = (($245) - 1)|0;
   $247 = (($244) + ($246<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $5;
   $250 = (($248) + ($249<<1)|0);
   HEAP16[$250>>1] = 192;
   $251 = $3;
   $252 = ((($251)) + 1372|0);
   $253 = $4;
   $254 = (($252) + ($253<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $5;
   $257 = (($256) + 1)|0;
   $258 = (($255) + ($257<<1)|0);
   $259 = HEAP16[$258>>1]|0;
   $260 = $259 << 16 >> 16;
   $261 = ($260|0)==(290);
   if (!($261)) {
    STACKTOP = sp;return;
   }
   $262 = $3;
   $263 = ((($262)) + 1372|0);
   $264 = $4;
   $265 = (($263) + ($264<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $5;
   $268 = (($267) + 1)|0;
   $269 = (($266) + ($268<<1)|0);
   HEAP16[$269>>1] = 291;
   STACKTOP = sp;return;
  } else {
   $270 = (($126) - 1)|0;
   $271 = (($125) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $5;
   $274 = (($272) + ($273<<1)|0);
   $275 = HEAP16[$274>>1]|0;
   $276 = $275 << 16 >> 16;
   $277 = (11821 + ($276)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = ($278<<24>>24)!=(0);
   L40: do {
    if ($279) {
     $280 = $3;
     $281 = ((($280)) + 1372|0);
     $282 = $4;
     $283 = (($282) - 1)|0;
     $284 = (($281) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $5;
     $287 = (($286) + 1)|0;
     $288 = (($285) + ($287<<1)|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = $289 << 16 >> 16;
     switch ($290|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L40;
     }
     }
     $291 = $3;
     $292 = ((($291)) + 1372|0);
     $293 = $4;
     $294 = (($292) + ($293<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $5;
     $297 = (($295) + ($296<<1)|0);
     HEAP16[$297>>1] = 199;
     $298 = $3;
     $299 = ((($298)) + 1804|0);
     $300 = $4;
     $301 = (($299) + ($300<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $5;
     $304 = (($302) + ($303<<1)|0);
     HEAP16[$304>>1] = 11;
     $305 = $3;
     $306 = ((($305)) + 1372|0);
     $307 = $4;
     $308 = (($307) - 1)|0;
     $309 = (($306) + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $5;
     $312 = (($310) + ($311<<1)|0);
     HEAP16[$312>>1] = 198;
     $313 = $3;
     $314 = ((($313)) + 1804|0);
     $315 = $4;
     $316 = (($315) - 1)|0;
     $317 = (($314) + ($316<<2)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $5;
     $320 = (($318) + ($319<<1)|0);
     HEAP16[$320>>1] = 192;
     $321 = $3;
     $322 = ((($321)) + 1372|0);
     $323 = $4;
     $324 = (($322) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $5;
     $327 = (($326) + 1)|0;
     $328 = (($325) + ($327<<1)|0);
     $329 = HEAP16[$328>>1]|0;
     $330 = $329 << 16 >> 16;
     $331 = ($330|0)==(290);
     if (!($331)) {
      STACKTOP = sp;return;
     }
     $332 = $3;
     $333 = ((($332)) + 1372|0);
     $334 = $4;
     $335 = (($333) + ($334<<2)|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $5;
     $338 = (($337) + 1)|0;
     $339 = (($336) + ($338<<1)|0);
     HEAP16[$339>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $340 = $3;
   $341 = ((($340)) + 1372|0);
   $342 = $4;
   $343 = (($342) + 1)|0;
   $344 = (($341) + ($343<<2)|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $5;
   $347 = (($345) + ($346<<1)|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348 << 16 >> 16;
   $350 = (11821 + ($349)|0);
   $351 = HEAP8[$350>>0]|0;
   $352 = ($351<<24>>24)!=(0);
   if (!($352)) {
    STACKTOP = sp;return;
   }
   $353 = $3;
   $354 = ((($353)) + 1372|0);
   $355 = $4;
   $356 = (($355) + 1)|0;
   $357 = (($354) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $5;
   $360 = (($359) + 1)|0;
   $361 = (($358) + ($360<<1)|0);
   $362 = HEAP16[$361>>1]|0;
   $363 = $362 << 16 >> 16;
   switch ($363|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $364 = $3;
   $365 = ((($364)) + 1372|0);
   $366 = $4;
   $367 = (($365) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $5;
   $370 = (($368) + ($369<<1)|0);
   HEAP16[$370>>1] = 197;
   $371 = $3;
   $372 = ((($371)) + 1804|0);
   $373 = $4;
   $374 = (($372) + ($373<<2)|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $5;
   $377 = (($375) + ($376<<1)|0);
   HEAP16[$377>>1] = 11;
   $378 = $3;
   $379 = ((($378)) + 1372|0);
   $380 = $4;
   $381 = (($380) + 1)|0;
   $382 = (($379) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $5;
   $385 = (($383) + ($384<<1)|0);
   HEAP16[$385>>1] = 196;
   $386 = $3;
   $387 = ((($386)) + 1804|0);
   $388 = $4;
   $389 = (($388) + 1)|0;
   $390 = (($387) + ($389<<2)|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $5;
   $393 = (($391) + ($392<<1)|0);
   HEAP16[$393>>1] = 192;
   $394 = $3;
   $395 = ((($394)) + 1372|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) + 1)|0;
   $401 = (($398) + ($400<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402 << 16 >> 16;
   $404 = ($403|0)==(290);
   if (!($404)) {
    STACKTOP = sp;return;
   }
   $405 = $3;
   $406 = ((($405)) + 1372|0);
   $407 = $4;
   $408 = (($406) + ($407<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = $5;
   $411 = (($410) + 1)|0;
   $412 = (($409) + ($411<<1)|0);
   HEAP16[$412>>1] = 291;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lnut_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 195;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 194;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 193;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 195;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 191;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 191;
  STACKTOP = sp;return;
 }
 }
}
function _Lnut_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 195;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 194;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 193;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 195;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 191;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 191;
  $127 = $4;
  $128 = $3;
  $129 = ((($128)) + 104|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($127) - ($130))|0;
  $132 = ($131>>>0)<=(20);
  if (!($132)) {
   STACKTOP = sp;return;
  }
  $133 = $5;
  $134 = $3;
  $135 = ((($134)) + 108|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($133) - ($136))|0;
  $138 = ($137>>>0)<=(15);
  if (!($138)) {
   STACKTOP = sp;return;
  }
  $139 = $3;
  $140 = ((($139)) + 44|0);
  $141 = ((($140)) + 25|0);
  HEAP8[$141>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lspring($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 207;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 206;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 203;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 207;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 343: case 342: case 341: case 340: case 322: case 321: case 294: case 293: case 291: case 290: case 289: case 288: case 270: case 269: case 268: case 267: case 258: case 241: case 240: case 239: case 238: case 237: case 236: case 235: case 234: case 205: case 204: case 202: case 201: case 192: case 191: case 182: case 181: case 173: case 172: case 161: case 160: case 150: case 149: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
  $113 = $3;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114*12421)|0;
  $116 = (($115) + 1)|0;
  $117 = $3;
  HEAP32[$117>>2] = $116;
  $118 = $3;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119 & 65535;
  $121 = $120<<1;
  $122 = $121 >> 16;
  $123 = ($122|0)!=(0);
  $124 = $3;
  $125 = ((($124)) + 1372|0);
  $126 = $4;
  if ($123) {
   $127 = (($126) + 1)|0;
   $128 = (($125) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $5;
   $131 = (($129) + ($130<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132 << 16 >> 16;
   $134 = (11821 + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = ($135<<24>>24)!=(0);
   L21: do {
    if ($136) {
     $137 = $3;
     $138 = ((($137)) + 1372|0);
     $139 = $4;
     $140 = (($139) + 1)|0;
     $141 = (($138) + ($140<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $5;
     $144 = (($143) + 1)|0;
     $145 = (($142) + ($144<<1)|0);
     $146 = HEAP16[$145>>1]|0;
     $147 = $146 << 16 >> 16;
     switch ($147|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L21;
     }
     }
     $148 = $3;
     $149 = ((($148)) + 1372|0);
     $150 = $4;
     $151 = (($149) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $5;
     $154 = (($152) + ($153<<1)|0);
     HEAP16[$154>>1] = 209;
     $155 = $3;
     $156 = ((($155)) + 1804|0);
     $157 = $4;
     $158 = (($156) + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $5;
     $161 = (($159) + ($160<<1)|0);
     HEAP16[$161>>1] = 11;
     $162 = $3;
     $163 = ((($162)) + 1372|0);
     $164 = $4;
     $165 = (($164) + 1)|0;
     $166 = (($163) + ($165<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = $5;
     $169 = (($167) + ($168<<1)|0);
     HEAP16[$169>>1] = 208;
     $170 = $3;
     $171 = ((($170)) + 1804|0);
     $172 = $4;
     $173 = (($172) + 1)|0;
     $174 = (($171) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $5;
     $177 = (($175) + ($176<<1)|0);
     HEAP16[$177>>1] = 204;
     $178 = $3;
     $179 = ((($178)) + 1372|0);
     $180 = $4;
     $181 = (($179) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $5;
     $184 = (($183) + 1)|0;
     $185 = (($182) + ($184<<1)|0);
     $186 = HEAP16[$185>>1]|0;
     $187 = $186 << 16 >> 16;
     $188 = ($187|0)==(290);
     if (!($188)) {
      STACKTOP = sp;return;
     }
     $189 = $3;
     $190 = ((($189)) + 1372|0);
     $191 = $4;
     $192 = (($190) + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = $5;
     $195 = (($194) + 1)|0;
     $196 = (($193) + ($195<<1)|0);
     HEAP16[$196>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $197 = $3;
   $198 = ((($197)) + 1372|0);
   $199 = $4;
   $200 = (($199) - 1)|0;
   $201 = (($198) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $5;
   $204 = (($202) + ($203<<1)|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205 << 16 >> 16;
   $207 = (11821 + ($206)|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = ($208<<24>>24)!=(0);
   if (!($209)) {
    STACKTOP = sp;return;
   }
   $210 = $3;
   $211 = ((($210)) + 1372|0);
   $212 = $4;
   $213 = (($212) - 1)|0;
   $214 = (($211) + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $5;
   $217 = (($216) + 1)|0;
   $218 = (($215) + ($217<<1)|0);
   $219 = HEAP16[$218>>1]|0;
   $220 = $219 << 16 >> 16;
   switch ($220|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $221 = $3;
   $222 = ((($221)) + 1372|0);
   $223 = $4;
   $224 = (($222) + ($223<<2)|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $5;
   $227 = (($225) + ($226<<1)|0);
   HEAP16[$227>>1] = 211;
   $228 = $3;
   $229 = ((($228)) + 1804|0);
   $230 = $4;
   $231 = (($229) + ($230<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $5;
   $234 = (($232) + ($233<<1)|0);
   HEAP16[$234>>1] = 11;
   $235 = $3;
   $236 = ((($235)) + 1372|0);
   $237 = $4;
   $238 = (($237) - 1)|0;
   $239 = (($236) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $5;
   $242 = (($240) + ($241<<1)|0);
   HEAP16[$242>>1] = 210;
   $243 = $3;
   $244 = ((($243)) + 1804|0);
   $245 = $4;
   $246 = (($245) - 1)|0;
   $247 = (($244) + ($246<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $5;
   $250 = (($248) + ($249<<1)|0);
   HEAP16[$250>>1] = 205;
   $251 = $3;
   $252 = ((($251)) + 1372|0);
   $253 = $4;
   $254 = (($252) + ($253<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $5;
   $257 = (($256) + 1)|0;
   $258 = (($255) + ($257<<1)|0);
   $259 = HEAP16[$258>>1]|0;
   $260 = $259 << 16 >> 16;
   $261 = ($260|0)==(290);
   if (!($261)) {
    STACKTOP = sp;return;
   }
   $262 = $3;
   $263 = ((($262)) + 1372|0);
   $264 = $4;
   $265 = (($263) + ($264<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $5;
   $268 = (($267) + 1)|0;
   $269 = (($266) + ($268<<1)|0);
   HEAP16[$269>>1] = 291;
   STACKTOP = sp;return;
  } else {
   $270 = (($126) - 1)|0;
   $271 = (($125) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $5;
   $274 = (($272) + ($273<<1)|0);
   $275 = HEAP16[$274>>1]|0;
   $276 = $275 << 16 >> 16;
   $277 = (11821 + ($276)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = ($278<<24>>24)!=(0);
   L40: do {
    if ($279) {
     $280 = $3;
     $281 = ((($280)) + 1372|0);
     $282 = $4;
     $283 = (($282) - 1)|0;
     $284 = (($281) + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $5;
     $287 = (($286) + 1)|0;
     $288 = (($285) + ($287<<1)|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = $289 << 16 >> 16;
     switch ($290|0) {
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
      break;
     }
     default: {
      break L40;
     }
     }
     $291 = $3;
     $292 = ((($291)) + 1372|0);
     $293 = $4;
     $294 = (($292) + ($293<<2)|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $5;
     $297 = (($295) + ($296<<1)|0);
     HEAP16[$297>>1] = 211;
     $298 = $3;
     $299 = ((($298)) + 1804|0);
     $300 = $4;
     $301 = (($299) + ($300<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $5;
     $304 = (($302) + ($303<<1)|0);
     HEAP16[$304>>1] = 11;
     $305 = $3;
     $306 = ((($305)) + 1372|0);
     $307 = $4;
     $308 = (($307) - 1)|0;
     $309 = (($306) + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $5;
     $312 = (($310) + ($311<<1)|0);
     HEAP16[$312>>1] = 210;
     $313 = $3;
     $314 = ((($313)) + 1804|0);
     $315 = $4;
     $316 = (($315) - 1)|0;
     $317 = (($314) + ($316<<2)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $5;
     $320 = (($318) + ($319<<1)|0);
     HEAP16[$320>>1] = 205;
     $321 = $3;
     $322 = ((($321)) + 1372|0);
     $323 = $4;
     $324 = (($322) + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = $5;
     $327 = (($326) + 1)|0;
     $328 = (($325) + ($327<<1)|0);
     $329 = HEAP16[$328>>1]|0;
     $330 = $329 << 16 >> 16;
     $331 = ($330|0)==(290);
     if (!($331)) {
      STACKTOP = sp;return;
     }
     $332 = $3;
     $333 = ((($332)) + 1372|0);
     $334 = $4;
     $335 = (($333) + ($334<<2)|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $5;
     $338 = (($337) + 1)|0;
     $339 = (($336) + ($338<<1)|0);
     HEAP16[$339>>1] = 291;
     STACKTOP = sp;return;
    }
   } while(0);
   $340 = $3;
   $341 = ((($340)) + 1372|0);
   $342 = $4;
   $343 = (($342) + 1)|0;
   $344 = (($341) + ($343<<2)|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $5;
   $347 = (($345) + ($346<<1)|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348 << 16 >> 16;
   $350 = (11821 + ($349)|0);
   $351 = HEAP8[$350>>0]|0;
   $352 = ($351<<24>>24)!=(0);
   if (!($352)) {
    STACKTOP = sp;return;
   }
   $353 = $3;
   $354 = ((($353)) + 1372|0);
   $355 = $4;
   $356 = (($355) + 1)|0;
   $357 = (($354) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $5;
   $360 = (($359) + 1)|0;
   $361 = (($358) + ($360<<1)|0);
   $362 = HEAP16[$361>>1]|0;
   $363 = $362 << 16 >> 16;
   switch ($363|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 13: case 12: case 11:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $364 = $3;
   $365 = ((($364)) + 1372|0);
   $366 = $4;
   $367 = (($365) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $5;
   $370 = (($368) + ($369<<1)|0);
   HEAP16[$370>>1] = 209;
   $371 = $3;
   $372 = ((($371)) + 1804|0);
   $373 = $4;
   $374 = (($372) + ($373<<2)|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $5;
   $377 = (($375) + ($376<<1)|0);
   HEAP16[$377>>1] = 11;
   $378 = $3;
   $379 = ((($378)) + 1372|0);
   $380 = $4;
   $381 = (($380) + 1)|0;
   $382 = (($379) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $5;
   $385 = (($383) + ($384<<1)|0);
   HEAP16[$385>>1] = 208;
   $386 = $3;
   $387 = ((($386)) + 1804|0);
   $388 = $4;
   $389 = (($388) + 1)|0;
   $390 = (($387) + ($389<<2)|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $5;
   $393 = (($391) + ($392<<1)|0);
   HEAP16[$393>>1] = 204;
   $394 = $3;
   $395 = ((($394)) + 1372|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) + 1)|0;
   $401 = (($398) + ($400<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402 << 16 >> 16;
   $404 = ($403|0)==(290);
   if (!($404)) {
    STACKTOP = sp;return;
   }
   $405 = $3;
   $406 = ((($405)) + 1372|0);
   $407 = $4;
   $408 = (($406) + ($407<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = $5;
   $411 = (($410) + 1)|0;
   $412 = (($409) + ($411<<1)|0);
   HEAP16[$412>>1] = 291;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lspring_pause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 207;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 206;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 203;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 207;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 201;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 201;
  STACKTOP = sp;return;
 }
 }
}
function _Lspring_fall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 do {
  switch ($15|0) {
  case 13: case 12: case 11: case 406:  {
   $16 = $3;
   $17 = ((($16)) + 1372|0);
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = (($20) + ($21<<1)|0);
   HEAP16[$22>>1] = 207;
   $23 = $3;
   $24 = ((($23)) + 1804|0);
   $25 = $4;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + ($28<<1)|0);
   HEAP16[$29>>1] = 11;
   $30 = $3;
   $31 = ((($30)) + 1372|0);
   $32 = $4;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = (($35) + 1)|0;
   $37 = (($34) + ($36<<1)|0);
   HEAP16[$37>>1] = 206;
   $38 = $3;
   $39 = ((($38)) + 1804|0);
   $40 = $4;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = (($43) + 1)|0;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = 203;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $46 = $3;
   $47 = ((($46)) + 1372|0);
   $48 = $4;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $5;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 207;
   $53 = $3;
   $54 = ((($53)) + 1804|0);
   $55 = $4;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $5;
   $59 = (($57) + ($58<<1)|0);
   HEAP16[$59>>1] = 11;
   $60 = $3;
   $61 = ((($60)) + 1372|0);
   $62 = $4;
   $63 = (($62) + 1)|0;
   $64 = (($61) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $5;
   $67 = (($65) + ($66<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68 << 16 >> 16;
   $70 = ($69|0)==(11);
   if ($70) {
    $71 = $3;
    $72 = ((($71)) + 1372|0);
    $73 = $4;
    $74 = (($73) + 1)|0;
    $75 = (($72) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $5;
    $78 = (($76) + ($77<<1)|0);
    HEAP16[$78>>1] = 12;
   }
   $79 = $3;
   $80 = ((($79)) + 1372|0);
   $81 = $4;
   $82 = (($81) - 1)|0;
   $83 = (($80) + ($82<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $5;
   $86 = (($84) + ($85<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = ($88|0)==(11);
   if ($89) {
    $90 = $3;
    $91 = ((($90)) + 1372|0);
    $92 = $4;
    $93 = (($92) - 1)|0;
    $94 = (($91) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $5;
    $97 = (($95) + ($96<<1)|0);
    HEAP16[$97>>1] = 13;
   }
   $98 = $4;
   $99 = $3;
   $100 = ((($99)) + 104|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($98) - ($101))|0;
   $103 = ($102>>>0)<=(20);
   if (!($103)) {
    STACKTOP = sp;return;
   }
   $104 = $5;
   $105 = $3;
   $106 = ((($105)) + 108|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) - ($107))|0;
   $109 = ($108>>>0)<=(15);
   if (!($109)) {
    STACKTOP = sp;return;
   }
   $110 = $3;
   $111 = ((($110)) + 44|0);
   $112 = ((($111)) + 30|0);
   HEAP8[$112>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 62: case 61: case 60: case 59:  {
   $113 = $3;
   $114 = ((($113)) + 1372|0);
   $115 = $4;
   $116 = (($114) + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $5;
   $119 = (($117) + ($118<<1)|0);
   HEAP16[$119>>1] = 207;
   $120 = $3;
   $121 = ((($120)) + 1804|0);
   $122 = $4;
   $123 = (($121) + ($122<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $5;
   $126 = (($124) + ($125<<1)|0);
   HEAP16[$126>>1] = 11;
   $127 = $3;
   $128 = ((($127)) + 1372|0);
   $129 = $4;
   $130 = (($128) + ($129<<2)|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $5;
   $133 = (($132) + 1)|0;
   $134 = (($131) + ($133<<1)|0);
   HEAP16[$134>>1] = 72;
   $135 = $3;
   $136 = ((($135)) + 1804|0);
   $137 = $4;
   $138 = (($136) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $5;
   $141 = (($140) + 1)|0;
   $142 = (($139) + ($141<<1)|0);
   HEAP16[$142>>1] = 4;
   $143 = $3;
   $144 = ((($143)) + 296|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $3;
   $147 = ((($146)) + 12|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + ($145))|0;
   HEAP32[$147>>2] = $149;
   STACKTOP = sp;return;
   break;
  }
  case 74: case 73:  {
   $150 = $3;
   $151 = ((($150)) + 1372|0);
   $152 = $4;
   $153 = (($151) + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $5;
   $156 = (($154) + ($155<<1)|0);
   HEAP16[$156>>1] = 207;
   $157 = $3;
   $158 = ((($157)) + 1804|0);
   $159 = $4;
   $160 = (($158) + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $5;
   $163 = (($161) + ($162<<1)|0);
   HEAP16[$163>>1] = 11;
   $164 = $3;
   $165 = ((($164)) + 1372|0);
   $166 = $4;
   $167 = (($165) + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $5;
   $170 = (($169) + 1)|0;
   $171 = (($168) + ($170<<1)|0);
   HEAP16[$171>>1] = 84;
   $172 = $3;
   $173 = ((($172)) + 1804|0);
   $174 = $4;
   $175 = (($173) + ($174<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $5;
   $178 = (($177) + 1)|0;
   $179 = (($176) + ($178<<1)|0);
   HEAP16[$179>>1] = 3;
   $180 = $3;
   $181 = ((($180)) + 232|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $3;
   $184 = ((($183)) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + ($182))|0;
   HEAP32[$184>>2] = $186;
   STACKTOP = sp;return;
   break;
  }
  case 86: case 85:  {
   $187 = $3;
   $188 = ((($187)) + 1372|0);
   $189 = $4;
   $190 = (($188) + ($189<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $5;
   $193 = (($191) + ($192<<1)|0);
   HEAP16[$193>>1] = 207;
   $194 = $3;
   $195 = ((($194)) + 1804|0);
   $196 = $4;
   $197 = (($195) + ($196<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $5;
   $200 = (($198) + ($199<<1)|0);
   HEAP16[$200>>1] = 11;
   $201 = $3;
   $202 = ((($201)) + 1372|0);
   $203 = $4;
   $204 = (($202) + ($203<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $5;
   $207 = (($206) + 1)|0;
   $208 = (($205) + ($207<<1)|0);
   HEAP16[$208>>1] = 113;
   $209 = $3;
   $210 = ((($209)) + 1804|0);
   $211 = $4;
   $212 = (($210) + ($211<<2)|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $5;
   $215 = (($214) + 1)|0;
   $216 = (($213) + ($215<<1)|0);
   HEAP16[$216>>1] = 2;
   $217 = $3;
   $218 = ((($217)) + 272|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $3;
   $221 = ((($220)) + 12|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($219))|0;
   HEAP32[$221>>2] = $223;
   STACKTOP = sp;return;
   break;
  }
  case 88: case 87:  {
   $224 = $3;
   $225 = ((($224)) + 1372|0);
   $226 = $4;
   $227 = (($225) + ($226<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $5;
   $230 = (($228) + ($229<<1)|0);
   HEAP16[$230>>1] = 207;
   $231 = $3;
   $232 = ((($231)) + 1804|0);
   $233 = $4;
   $234 = (($232) + ($233<<2)|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $5;
   $237 = (($235) + ($236<<1)|0);
   HEAP16[$237>>1] = 11;
   $238 = $3;
   $239 = ((($238)) + 1372|0);
   $240 = $4;
   $241 = (($239) + ($240<<2)|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = $5;
   $244 = (($243) + 1)|0;
   $245 = (($242) + ($244<<1)|0);
   HEAP16[$245>>1] = 114;
   $246 = $3;
   $247 = ((($246)) + 1804|0);
   $248 = $4;
   $249 = (($247) + ($248<<2)|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = $5;
   $252 = (($251) + 1)|0;
   $253 = (($250) + ($252<<1)|0);
   HEAP16[$253>>1] = 2;
   $254 = $3;
   $255 = ((($254)) + 272|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $3;
   $258 = ((($257)) + 12|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($259) + ($256))|0;
   HEAP32[$258>>2] = $260;
   STACKTOP = sp;return;
   break;
  }
  case 90: case 89:  {
   $261 = $3;
   $262 = ((($261)) + 1372|0);
   $263 = $4;
   $264 = (($262) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $5;
   $267 = (($265) + ($266<<1)|0);
   HEAP16[$267>>1] = 207;
   $268 = $3;
   $269 = ((($268)) + 1804|0);
   $270 = $4;
   $271 = (($269) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $5;
   $274 = (($272) + ($273<<1)|0);
   HEAP16[$274>>1] = 11;
   $275 = $3;
   $276 = ((($275)) + 1372|0);
   $277 = $4;
   $278 = (($276) + ($277<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $5;
   $281 = (($280) + 1)|0;
   $282 = (($279) + ($281<<1)|0);
   HEAP16[$282>>1] = 115;
   $283 = $3;
   $284 = ((($283)) + 1804|0);
   $285 = $4;
   $286 = (($284) + ($285<<2)|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $5;
   $289 = (($288) + 1)|0;
   $290 = (($287) + ($289<<1)|0);
   HEAP16[$290>>1] = 2;
   $291 = $3;
   $292 = ((($291)) + 272|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $3;
   $295 = ((($294)) + 12|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (($296) + ($293))|0;
   HEAP32[$295>>2] = $297;
   STACKTOP = sp;return;
   break;
  }
  case 92: case 91:  {
   $298 = $3;
   $299 = ((($298)) + 1372|0);
   $300 = $4;
   $301 = (($299) + ($300<<2)|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $5;
   $304 = (($302) + ($303<<1)|0);
   HEAP16[$304>>1] = 207;
   $305 = $3;
   $306 = ((($305)) + 1804|0);
   $307 = $4;
   $308 = (($306) + ($307<<2)|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $5;
   $311 = (($309) + ($310<<1)|0);
   HEAP16[$311>>1] = 11;
   $312 = $3;
   $313 = ((($312)) + 1372|0);
   $314 = $4;
   $315 = (($313) + ($314<<2)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $5;
   $318 = (($317) + 1)|0;
   $319 = (($316) + ($318<<1)|0);
   HEAP16[$319>>1] = 116;
   $320 = $3;
   $321 = ((($320)) + 1804|0);
   $322 = $4;
   $323 = (($321) + ($322<<2)|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = $5;
   $326 = (($325) + 1)|0;
   $327 = (($324) + ($326<<1)|0);
   HEAP16[$327>>1] = 2;
   $328 = $3;
   $329 = ((($328)) + 272|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $3;
   $332 = ((($331)) + 12|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + ($330))|0;
   HEAP32[$332>>2] = $334;
   STACKTOP = sp;return;
   break;
  }
  case 118: case 117:  {
   $335 = $3;
   $336 = ((($335)) + 1372|0);
   $337 = $4;
   $338 = (($336) + ($337<<2)|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $5;
   $341 = (($339) + ($340<<1)|0);
   HEAP16[$341>>1] = 207;
   $342 = $3;
   $343 = ((($342)) + 1804|0);
   $344 = $4;
   $345 = (($343) + ($344<<2)|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = $5;
   $348 = (($346) + ($347<<1)|0);
   HEAP16[$348>>1] = 11;
   $349 = $3;
   $350 = ((($349)) + 1372|0);
   $351 = $4;
   $352 = (($350) + ($351<<2)|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = $5;
   $355 = (($354) + 1)|0;
   $356 = (($353) + ($355<<1)|0);
   HEAP16[$356>>1] = 145;
   $357 = $3;
   $358 = ((($357)) + 1804|0);
   $359 = $4;
   $360 = (($358) + ($359<<2)|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $5;
   $363 = (($362) + 1)|0;
   $364 = (($361) + ($363<<1)|0);
   HEAP16[$364>>1] = 3;
   $365 = $3;
   $366 = ((($365)) + 356|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = $3;
   $369 = ((($368)) + 12|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = (($370) + ($367))|0;
   HEAP32[$369>>2] = $371;
   STACKTOP = sp;return;
   break;
  }
  case 120: case 119:  {
   $372 = $3;
   $373 = ((($372)) + 1372|0);
   $374 = $4;
   $375 = (($373) + ($374<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $5;
   $378 = (($376) + ($377<<1)|0);
   HEAP16[$378>>1] = 207;
   $379 = $3;
   $380 = ((($379)) + 1804|0);
   $381 = $4;
   $382 = (($380) + ($381<<2)|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $5;
   $385 = (($383) + ($384<<1)|0);
   HEAP16[$385>>1] = 11;
   $386 = $3;
   $387 = ((($386)) + 1372|0);
   $388 = $4;
   $389 = (($387) + ($388<<2)|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = $5;
   $392 = (($391) + 1)|0;
   $393 = (($390) + ($392<<1)|0);
   HEAP16[$393>>1] = 146;
   $394 = $3;
   $395 = ((($394)) + 1804|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) + 1)|0;
   $401 = (($398) + ($400<<1)|0);
   HEAP16[$401>>1] = 3;
   $402 = $3;
   $403 = ((($402)) + 356|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = $3;
   $406 = ((($405)) + 12|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + ($404))|0;
   HEAP32[$406>>2] = $408;
   STACKTOP = sp;return;
   break;
  }
  case 122: case 121:  {
   $409 = $3;
   $410 = ((($409)) + 1372|0);
   $411 = $4;
   $412 = (($410) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $5;
   $415 = (($413) + ($414<<1)|0);
   HEAP16[$415>>1] = 207;
   $416 = $3;
   $417 = ((($416)) + 1804|0);
   $418 = $4;
   $419 = (($417) + ($418<<2)|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = $5;
   $422 = (($420) + ($421<<1)|0);
   HEAP16[$422>>1] = 11;
   $423 = $3;
   $424 = ((($423)) + 1372|0);
   $425 = $4;
   $426 = (($424) + ($425<<2)|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $5;
   $429 = (($428) + 1)|0;
   $430 = (($427) + ($429<<1)|0);
   HEAP16[$430>>1] = 147;
   $431 = $3;
   $432 = ((($431)) + 1804|0);
   $433 = $4;
   $434 = (($432) + ($433<<2)|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = $5;
   $437 = (($436) + 1)|0;
   $438 = (($435) + ($437<<1)|0);
   HEAP16[$438>>1] = 3;
   $439 = $3;
   $440 = ((($439)) + 356|0);
   $441 = HEAP32[$440>>2]|0;
   $442 = $3;
   $443 = ((($442)) + 12|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + ($441))|0;
   HEAP32[$443>>2] = $445;
   STACKTOP = sp;return;
   break;
  }
  case 124: case 123:  {
   $446 = $3;
   $447 = ((($446)) + 1372|0);
   $448 = $4;
   $449 = (($447) + ($448<<2)|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = $5;
   $452 = (($450) + ($451<<1)|0);
   HEAP16[$452>>1] = 207;
   $453 = $3;
   $454 = ((($453)) + 1804|0);
   $455 = $4;
   $456 = (($454) + ($455<<2)|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $5;
   $459 = (($457) + ($458<<1)|0);
   HEAP16[$459>>1] = 11;
   $460 = $3;
   $461 = ((($460)) + 1372|0);
   $462 = $4;
   $463 = (($461) + ($462<<2)|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = $5;
   $466 = (($465) + 1)|0;
   $467 = (($464) + ($466<<1)|0);
   HEAP16[$467>>1] = 148;
   $468 = $3;
   $469 = ((($468)) + 1804|0);
   $470 = $4;
   $471 = (($469) + ($470<<2)|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $5;
   $474 = (($473) + 1)|0;
   $475 = (($472) + ($474<<1)|0);
   HEAP16[$475>>1] = 3;
   $476 = $3;
   $477 = ((($476)) + 356|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $3;
   $480 = ((($479)) + 12|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = (($481) + ($478))|0;
   HEAP32[$480>>2] = $482;
   STACKTOP = sp;return;
   break;
  }
  case 182: case 181:  {
   $483 = $3;
   $484 = ((($483)) + 1372|0);
   $485 = $4;
   $486 = (($484) + ($485<<2)|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = $5;
   $489 = (($487) + ($488<<1)|0);
   HEAP16[$489>>1] = 201;
   $490 = $3;
   $491 = ((($490)) + 1804|0);
   $492 = $4;
   $493 = (($491) + ($492<<2)|0);
   $494 = HEAP32[$493>>2]|0;
   $495 = $5;
   $496 = (($494) + ($495<<1)|0);
   HEAP16[$496>>1] = 201;
   $497 = $3;
   $498 = ((($497)) + 1372|0);
   $499 = $4;
   $500 = (($498) + ($499<<2)|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = $5;
   $503 = (($502) + 1)|0;
   $504 = (($501) + ($503<<1)|0);
   HEAP16[$504>>1] = 190;
   $505 = $3;
   $506 = ((($505)) + 1804|0);
   $507 = $4;
   $508 = (($506) + ($507<<2)|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = $5;
   $511 = (($510) + 1)|0;
   $512 = (($509) + ($511<<1)|0);
   HEAP16[$512>>1] = 3;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $513 = $3;
   $514 = ((($513)) + 1372|0);
   $515 = $4;
   $516 = (($514) + ($515<<2)|0);
   $517 = HEAP32[$516>>2]|0;
   $518 = $5;
   $519 = (($517) + ($518<<1)|0);
   HEAP16[$519>>1] = 201;
   $520 = $3;
   $521 = ((($520)) + 1804|0);
   $522 = $4;
   $523 = (($521) + ($522<<2)|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $5;
   $526 = (($524) + ($525<<1)|0);
   HEAP16[$526>>1] = 201;
   $527 = $4;
   $528 = $3;
   $529 = ((($528)) + 104|0);
   $530 = HEAP32[$529>>2]|0;
   $531 = (($527) - ($530))|0;
   $532 = ($531>>>0)<=(20);
   if (!($532)) {
    STACKTOP = sp;return;
   }
   $533 = $5;
   $534 = $3;
   $535 = ((($534)) + 108|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = (($533) - ($536))|0;
   $538 = ($537>>>0)<=(15);
   if (!($538)) {
    STACKTOP = sp;return;
   }
   $539 = $3;
   $540 = ((($539)) + 44|0);
   $541 = ((($540)) + 23|0);
   HEAP8[$541>>0] = 1;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _Lspring_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 207;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 206;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 203;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 207;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 290:  {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($118) + 1)|0;
  $120 = (($117) + ($119<<1)|0);
  HEAP16[$120>>1] = 291;
  break;
 }
 default: {
 }
 }
 $121 = $3;
 $122 = ((($121)) + 1372|0);
 $123 = $4;
 $124 = (($123) + 1)|0;
 $125 = (($122) + ($124<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $5;
 $128 = (($126) + ($127<<1)|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = $129 << 16 >> 16;
 switch ($130|0) {
 case 82: case 80: case 78: case 76: case 13: case 12: case 11:  {
  $131 = $3;
  $132 = ((($131)) + 1372|0);
  $133 = $4;
  $134 = (($132) + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $5;
  $137 = (($135) + ($136<<1)|0);
  HEAP16[$137>>1] = 209;
  $138 = $3;
  $139 = ((($138)) + 1804|0);
  $140 = $4;
  $141 = (($139) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $5;
  $144 = (($142) + ($143<<1)|0);
  HEAP16[$144>>1] = 11;
  $145 = $3;
  $146 = ((($145)) + 1372|0);
  $147 = $4;
  $148 = (($147) + 1)|0;
  $149 = (($146) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $5;
  $152 = (($150) + ($151<<1)|0);
  HEAP16[$152>>1] = 208;
  $153 = $3;
  $154 = ((($153)) + 1804|0);
  $155 = $4;
  $156 = (($155) + 1)|0;
  $157 = (($154) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $5;
  $160 = (($158) + ($159<<1)|0);
  HEAP16[$160>>1] = 204;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $161 = $3;
  $162 = ((($161)) + 1372|0);
  $163 = $4;
  $164 = (($162) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $5;
  $167 = (($165) + ($166<<1)|0);
  HEAP16[$167>>1] = 209;
  $168 = $3;
  $169 = ((($168)) + 1804|0);
  $170 = $4;
  $171 = (($169) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $5;
  $174 = (($172) + ($173<<1)|0);
  HEAP16[$174>>1] = 11;
  $175 = $3;
  $176 = ((($175)) + 1372|0);
  $177 = $4;
  $178 = (($177) + 2)|0;
  $179 = (($176) + ($178<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $5;
  $182 = (($181) - 1)|0;
  $183 = (($180) + ($182<<1)|0);
  $184 = HEAP16[$183>>1]|0;
  $185 = $184 << 16 >> 16;
  $186 = ($185|0)==(11);
  if ($186) {
   $187 = $3;
   $188 = ((($187)) + 1372|0);
   $189 = $4;
   $190 = (($189) + 2)|0;
   $191 = (($188) + ($190<<2)|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $5;
   $194 = (($193) - 1)|0;
   $195 = (($192) + ($194<<1)|0);
   HEAP16[$195>>1] = 12;
  }
  $196 = $3;
  $197 = ((($196)) + 1372|0);
  $198 = $4;
  $199 = (($197) + ($198<<2)|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $5;
  $202 = (($201) - 1)|0;
  $203 = (($200) + ($202<<1)|0);
  $204 = HEAP16[$203>>1]|0;
  $205 = $204 << 16 >> 16;
  $206 = ($205|0)==(11);
  if ($206) {
   $207 = $3;
   $208 = ((($207)) + 1372|0);
   $209 = $4;
   $210 = (($208) + ($209<<2)|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $5;
   $213 = (($212) - 1)|0;
   $214 = (($211) + ($213<<1)|0);
   HEAP16[$214>>1] = 13;
  }
  $215 = $4;
  $216 = $3;
  $217 = ((($216)) + 104|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($215) - ($218))|0;
  $220 = ($219>>>0)<=(20);
  if (!($220)) {
   STACKTOP = sp;return;
  }
  $221 = $5;
  $222 = $3;
  $223 = ((($222)) + 108|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($221) - ($224))|0;
  $226 = ($225>>>0)<=(15);
  if (!($226)) {
   STACKTOP = sp;return;
  }
  $227 = $3;
  $228 = ((($227)) + 44|0);
  $229 = ((($228)) + 30|0);
  HEAP8[$229>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 81: case 79: case 77: case 75: case 74: case 73:  {
  $230 = $3;
  $231 = ((($230)) + 1372|0);
  $232 = $4;
  $233 = (($231) + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $5;
  $236 = (($234) + ($235<<1)|0);
  HEAP16[$236>>1] = 213;
  $237 = $3;
  $238 = ((($237)) + 1804|0);
  $239 = $4;
  $240 = (($238) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $5;
  $243 = (($241) + ($242<<1)|0);
  HEAP16[$243>>1] = 11;
  $244 = $3;
  $245 = ((($244)) + 1372|0);
  $246 = $4;
  $247 = (($246) + 1)|0;
  $248 = (($245) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $5;
  $251 = (($249) + ($250<<1)|0);
  HEAP16[$251>>1] = 212;
  $252 = $3;
  $253 = ((($252)) + 1804|0);
  $254 = $4;
  $255 = (($254) + 1)|0;
  $256 = (($253) + ($255<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $5;
  $259 = (($257) + ($258<<1)|0);
  HEAP16[$259>>1] = 204;
  $260 = $3;
  $261 = ((($260)) + 44|0);
  $262 = ((($261)) + 18|0);
  HEAP8[$262>>0] = 1;
  $263 = $3;
  $264 = ((($263)) + 352|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $3;
  $267 = ((($266)) + 12|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + ($265))|0;
  HEAP32[$267>>2] = $269;
  STACKTOP = sp;return;
  break;
 }
 case 291: case 290:  {
  $270 = $3;
  $271 = ((($270)) + 1372|0);
  $272 = $4;
  $273 = (($272) + 1)|0;
  $274 = (($271) + ($273<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $5;
  $277 = (($275) + ($276<<1)|0);
  HEAP16[$277>>1] = 291;
  $278 = $3;
  $279 = ((($278)) + 1804|0);
  $280 = $4;
  $281 = (($279) + ($280<<2)|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $5;
  $284 = (($282) + ($283<<1)|0);
  HEAP16[$284>>1] = 205;
  $285 = $4;
  $286 = $3;
  $287 = ((($286)) + 104|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($285) - ($288))|0;
  $290 = ($289>>>0)<=(20);
  if (!($290)) {
   STACKTOP = sp;return;
  }
  $291 = $5;
  $292 = $3;
  $293 = ((($292)) + 108|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($291) - ($294))|0;
  $296 = ($295>>>0)<=(15);
  if (!($296)) {
   STACKTOP = sp;return;
  }
  $297 = $3;
  $298 = ((($297)) + 44|0);
  $299 = ((($298)) + 23|0);
  HEAP8[$299>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $300 = $3;
  $301 = ((($300)) + 1372|0);
  $302 = $4;
  $303 = (($301) + ($302<<2)|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $5;
  $306 = (($304) + ($305<<1)|0);
  HEAP16[$306>>1] = 201;
  $307 = $3;
  $308 = ((($307)) + 1804|0);
  $309 = $4;
  $310 = (($308) + ($309<<2)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $5;
  $313 = (($311) + ($312<<1)|0);
  HEAP16[$313>>1] = 201;
  $314 = $4;
  $315 = $3;
  $316 = ((($315)) + 104|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($314) - ($317))|0;
  $319 = ($318>>>0)<=(20);
  if (!($319)) {
   STACKTOP = sp;return;
  }
  $320 = $5;
  $321 = $3;
  $322 = ((($321)) + 108|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = (($320) - ($323))|0;
  $325 = ($324>>>0)<=(15);
  if (!($325)) {
   STACKTOP = sp;return;
  }
  $326 = $3;
  $327 = ((($326)) + 44|0);
  $328 = ((($327)) + 23|0);
  HEAP8[$328>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lspring_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 207;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 206;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 203;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 207;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 11;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 290:  {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($118) + 1)|0;
  $120 = (($117) + ($119<<1)|0);
  HEAP16[$120>>1] = 291;
  break;
 }
 default: {
 }
 }
 $121 = $3;
 $122 = ((($121)) + 1372|0);
 $123 = $4;
 $124 = (($123) - 1)|0;
 $125 = (($122) + ($124<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $5;
 $128 = (($126) + ($127<<1)|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = $129 << 16 >> 16;
 switch ($130|0) {
 case 82: case 80: case 78: case 76: case 13: case 12: case 11:  {
  $131 = $3;
  $132 = ((($131)) + 1372|0);
  $133 = $4;
  $134 = (($132) + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $5;
  $137 = (($135) + ($136<<1)|0);
  HEAP16[$137>>1] = 211;
  $138 = $3;
  $139 = ((($138)) + 1804|0);
  $140 = $4;
  $141 = (($139) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $5;
  $144 = (($142) + ($143<<1)|0);
  HEAP16[$144>>1] = 11;
  $145 = $3;
  $146 = ((($145)) + 1372|0);
  $147 = $4;
  $148 = (($147) - 1)|0;
  $149 = (($146) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $5;
  $152 = (($150) + ($151<<1)|0);
  HEAP16[$152>>1] = 210;
  $153 = $3;
  $154 = ((($153)) + 1804|0);
  $155 = $4;
  $156 = (($155) - 1)|0;
  $157 = (($154) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $5;
  $160 = (($158) + ($159<<1)|0);
  HEAP16[$160>>1] = 205;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $161 = $3;
  $162 = ((($161)) + 1372|0);
  $163 = $4;
  $164 = (($162) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $5;
  $167 = (($165) + ($166<<1)|0);
  HEAP16[$167>>1] = 211;
  $168 = $3;
  $169 = ((($168)) + 1804|0);
  $170 = $4;
  $171 = (($169) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $5;
  $174 = (($172) + ($173<<1)|0);
  HEAP16[$174>>1] = 11;
  $175 = $3;
  $176 = ((($175)) + 1372|0);
  $177 = $4;
  $178 = (($176) + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $5;
  $181 = (($180) - 1)|0;
  $182 = (($179) + ($181<<1)|0);
  $183 = HEAP16[$182>>1]|0;
  $184 = $183 << 16 >> 16;
  $185 = ($184|0)==(11);
  if ($185) {
   $186 = $3;
   $187 = ((($186)) + 1372|0);
   $188 = $4;
   $189 = (($187) + ($188<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $5;
   $192 = (($191) - 1)|0;
   $193 = (($190) + ($192<<1)|0);
   HEAP16[$193>>1] = 12;
  }
  $194 = $3;
  $195 = ((($194)) + 1372|0);
  $196 = $4;
  $197 = (($196) - 2)|0;
  $198 = (($195) + ($197<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $5;
  $201 = (($200) - 1)|0;
  $202 = (($199) + ($201<<1)|0);
  $203 = HEAP16[$202>>1]|0;
  $204 = $203 << 16 >> 16;
  $205 = ($204|0)==(11);
  if ($205) {
   $206 = $3;
   $207 = ((($206)) + 1372|0);
   $208 = $4;
   $209 = (($208) - 2)|0;
   $210 = (($207) + ($209<<2)|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $5;
   $213 = (($212) - 1)|0;
   $214 = (($211) + ($213<<1)|0);
   HEAP16[$214>>1] = 13;
  }
  $215 = $4;
  $216 = $3;
  $217 = ((($216)) + 104|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($215) - ($218))|0;
  $220 = ($219>>>0)<=(20);
  if (!($220)) {
   STACKTOP = sp;return;
  }
  $221 = $5;
  $222 = $3;
  $223 = ((($222)) + 108|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($221) - ($224))|0;
  $226 = ($225>>>0)<=(15);
  if (!($226)) {
   STACKTOP = sp;return;
  }
  $227 = $3;
  $228 = ((($227)) + 44|0);
  $229 = ((($228)) + 30|0);
  HEAP8[$229>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 81: case 79: case 77: case 75: case 74: case 73:  {
  $230 = $3;
  $231 = ((($230)) + 1372|0);
  $232 = $4;
  $233 = (($231) + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $5;
  $236 = (($234) + ($235<<1)|0);
  HEAP16[$236>>1] = 215;
  $237 = $3;
  $238 = ((($237)) + 1804|0);
  $239 = $4;
  $240 = (($238) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $5;
  $243 = (($241) + ($242<<1)|0);
  HEAP16[$243>>1] = 11;
  $244 = $3;
  $245 = ((($244)) + 1372|0);
  $246 = $4;
  $247 = (($246) - 1)|0;
  $248 = (($245) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $5;
  $251 = (($249) + ($250<<1)|0);
  HEAP16[$251>>1] = 214;
  $252 = $3;
  $253 = ((($252)) + 1804|0);
  $254 = $4;
  $255 = (($254) - 1)|0;
  $256 = (($253) + ($255<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $5;
  $259 = (($257) + ($258<<1)|0);
  HEAP16[$259>>1] = 205;
  $260 = $3;
  $261 = ((($260)) + 44|0);
  $262 = ((($261)) + 18|0);
  HEAP8[$262>>0] = 1;
  $263 = $3;
  $264 = ((($263)) + 352|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $3;
  $267 = ((($266)) + 12|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + ($265))|0;
  HEAP32[$267>>2] = $269;
  STACKTOP = sp;return;
  break;
 }
 case 291: case 290:  {
  $270 = $3;
  $271 = ((($270)) + 1372|0);
  $272 = $4;
  $273 = (($272) - 1)|0;
  $274 = (($271) + ($273<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $5;
  $277 = (($275) + ($276<<1)|0);
  HEAP16[$277>>1] = 291;
  $278 = $3;
  $279 = ((($278)) + 1804|0);
  $280 = $4;
  $281 = (($279) + ($280<<2)|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $5;
  $284 = (($282) + ($283<<1)|0);
  HEAP16[$284>>1] = 204;
  $285 = $4;
  $286 = $3;
  $287 = ((($286)) + 104|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($285) - ($288))|0;
  $290 = ($289>>>0)<=(20);
  if (!($290)) {
   STACKTOP = sp;return;
  }
  $291 = $5;
  $292 = $3;
  $293 = ((($292)) + 108|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($291) - ($294))|0;
  $296 = ($295>>>0)<=(15);
  if (!($296)) {
   STACKTOP = sp;return;
  }
  $297 = $3;
  $298 = ((($297)) + 44|0);
  $299 = ((($298)) + 23|0);
  HEAP8[$299>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $300 = $3;
  $301 = ((($300)) + 1372|0);
  $302 = $4;
  $303 = (($301) + ($302<<2)|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $5;
  $306 = (($304) + ($305<<1)|0);
  HEAP16[$306>>1] = 201;
  $307 = $3;
  $308 = ((($307)) + 1804|0);
  $309 = $4;
  $310 = (($308) + ($309<<2)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $5;
  $313 = (($311) + ($312<<1)|0);
  HEAP16[$313>>1] = 201;
  $314 = $4;
  $315 = $3;
  $316 = ((($315)) + 104|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($314) - ($317))|0;
  $319 = ($318>>>0)<=(20);
  if (!($319)) {
   STACKTOP = sp;return;
  }
  $320 = $5;
  $321 = $3;
  $322 = ((($321)) + 108|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = (($320) - ($323))|0;
  $325 = ($324>>>0)<=(15);
  if (!($325)) {
   STACKTOP = sp;return;
  }
  $326 = $3;
  $327 = ((($326)) + 44|0);
  $328 = ((($327)) + 23|0);
  HEAP8[$328>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_emerald_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 155;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 154;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 150;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_emerald_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 157;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 156;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 150;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_diamond_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 166;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 165;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 161;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_diamond_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 168;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 167;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 161;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_stone_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 178;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 177;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 173;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_stone_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 180;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 179;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 173;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_bomb_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 187;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 186;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 182;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_bomb_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 189;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 188;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 182;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_nut_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 197;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 196;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 192;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_nut_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 199;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 198;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 192;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_spring_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 209;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) + 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 2)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) - 1)|0;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = ($40|0)==(11);
  if ($41) {
   $42 = $3;
   $43 = ((($42)) + 1372|0);
   $44 = $4;
   $45 = (($44) + 2)|0;
   $46 = (($43) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = (($48) - 1)|0;
   $50 = (($47) + ($49<<1)|0);
   HEAP16[$50>>1] = 12;
  }
  $51 = $3;
  $52 = ((($51)) + 1372|0);
  $53 = $4;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $5;
  $57 = (($56) - 1)|0;
  $58 = (($55) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(11);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $4;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) + 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 208;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) + 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 204;
  STACKTOP = sp;return;
 }
 }
}
function _Lpush_spring_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 211;
 $13 = $3;
 $14 = ((($13)) + 1804|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = 11;
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($22) - 1)|0;
 $24 = (($21) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (($25) + ($26<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 switch ($29|0) {
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)==(11);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 1372|0);
   $43 = $4;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) - 1)|0;
   $48 = (($45) + ($47<<1)|0);
   HEAP16[$48>>1] = 12;
  }
  $49 = $3;
  $50 = ((($49)) + 1372|0);
  $51 = $4;
  $52 = (($51) - 2)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($55) - 1)|0;
  $57 = (($54) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($59|0)==(11);
  if ($60) {
   $61 = $3;
   $62 = ((($61)) + 1372|0);
   $63 = $4;
   $64 = (($63) - 2)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $5;
   $68 = (($67) - 1)|0;
   $69 = (($66) + ($68<<1)|0);
   HEAP16[$69>>1] = 13;
  }
  $70 = $4;
  $71 = $3;
  $72 = ((($71)) + 104|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) - ($73))|0;
  $75 = ($74>>>0)<=(20);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = $5;
  $77 = $3;
  $78 = ((($77)) + 108|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) - ($79))|0;
  $81 = ($80>>>0)<=(15);
  if (!($81)) {
   STACKTOP = sp;return;
  }
  $82 = $3;
  $83 = ((($82)) + 44|0);
  $84 = ((($83)) + 30|0);
  HEAP8[$84>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $85 = $3;
  $86 = ((($85)) + 1372|0);
  $87 = $4;
  $88 = (($87) - 1)|0;
  $89 = (($86) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $5;
  $92 = (($90) + ($91<<1)|0);
  HEAP16[$92>>1] = 210;
  $93 = $3;
  $94 = ((($93)) + 1804|0);
  $95 = $4;
  $96 = (($95) - 1)|0;
  $97 = (($94) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = 205;
  STACKTOP = sp;return;
 }
 }
}
function _Ldynamite_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 231;
 $13 = $3;
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 4|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function _Ldynamite_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 232;
 $13 = $3;
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 4|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function _Ldynamite_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 233;
 $13 = $3;
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 4|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function _Ldynamite_4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 5;
 $13 = $3;
 $14 = ((($13)) + 44|0);
 $15 = ((($14)) + 4|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function _Lfake_door_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 242;
 STACKTOP = sp;return;
}
function _Lfake_door_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 243;
 STACKTOP = sp;return;
}
function _Lfake_door_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 244;
 STACKTOP = sp;return;
}
function _Lfake_door_4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 245;
 STACKTOP = sp;return;
}
function _Lfake_door_5($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 246;
 STACKTOP = sp;return;
}
function _Lfake_door_6($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 247;
 STACKTOP = sp;return;
}
function _Lfake_door_7($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 248;
 STACKTOP = sp;return;
}
function _Lfake_door_8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 249;
 STACKTOP = sp;return;
}
function _Lballoon($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 376|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 380|0);
 $12 = HEAP32[$11>>2]|0;
 switch ($12|0) {
 case 0:  {
  $13 = $3;
  $14 = ((($13)) + 1372|0);
  $15 = $4;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = (($18) - 1)|0;
  $20 = (($17) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  switch ($22|0) {
  case 13: case 12: case 11:  {
   $23 = $3;
   $24 = ((($23)) + 1372|0);
   $25 = $4;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + ($28<<1)|0);
   HEAP16[$29>>1] = 260;
   $30 = $3;
   $31 = ((($30)) + 1804|0);
   $32 = $4;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = (($34) + ($35<<1)|0);
   HEAP16[$36>>1] = 11;
   $37 = $3;
   $38 = ((($37)) + 1372|0);
   $39 = $4;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $5;
   $43 = (($42) - 1)|0;
   $44 = (($41) + ($43<<1)|0);
   HEAP16[$44>>1] = 259;
   $45 = $3;
   $46 = ((($45)) + 1804|0);
   $47 = $4;
   $48 = (($46) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $5;
   $51 = (($50) - 1)|0;
   $52 = (($49) + ($51<<1)|0);
   HEAP16[$52>>1] = 258;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $53 = $3;
   $54 = ((($53)) + 1372|0);
   $55 = $4;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $5;
   $59 = (($57) + ($58<<1)|0);
   HEAP16[$59>>1] = 260;
   $60 = $3;
   $61 = ((($60)) + 1804|0);
   $62 = $4;
   $63 = (($61) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $5;
   $66 = (($64) + ($65<<1)|0);
   HEAP16[$66>>1] = 11;
   $67 = $3;
   $68 = ((($67)) + 1372|0);
   $69 = $4;
   $70 = (($69) + 1)|0;
   $71 = (($68) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $5;
   $74 = (($73) - 2)|0;
   $75 = (($72) + ($74<<1)|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76 << 16 >> 16;
   $78 = ($77|0)==(11);
   if ($78) {
    $79 = $3;
    $80 = ((($79)) + 1372|0);
    $81 = $4;
    $82 = (($81) + 1)|0;
    $83 = (($80) + ($82<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $5;
    $86 = (($85) - 2)|0;
    $87 = (($84) + ($86<<1)|0);
    HEAP16[$87>>1] = 12;
   }
   $88 = $3;
   $89 = ((($88)) + 1372|0);
   $90 = $4;
   $91 = (($90) - 1)|0;
   $92 = (($89) + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $5;
   $95 = (($94) - 2)|0;
   $96 = (($93) + ($95<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97 << 16 >> 16;
   $99 = ($98|0)==(11);
   if ($99) {
    $100 = $3;
    $101 = ((($100)) + 1372|0);
    $102 = $4;
    $103 = (($102) - 1)|0;
    $104 = (($101) + ($103<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $5;
    $107 = (($106) - 2)|0;
    $108 = (($105) + ($107<<1)|0);
    HEAP16[$108>>1] = 13;
   }
   $109 = $4;
   $110 = $3;
   $111 = ((($110)) + 104|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($109) - ($112))|0;
   $114 = ($113>>>0)<=(20);
   if (!($114)) {
    STACKTOP = sp;return;
   }
   $115 = $5;
   $116 = $3;
   $117 = ((($116)) + 108|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($115) - ($118))|0;
   $120 = ($119>>>0)<=(15);
   if (!($120)) {
    STACKTOP = sp;return;
   }
   $121 = $3;
   $122 = ((($121)) + 44|0);
   $123 = ((($122)) + 30|0);
   HEAP8[$123>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 1:  {
  $124 = $3;
  $125 = ((($124)) + 1372|0);
  $126 = $4;
  $127 = (($126) + 1)|0;
  $128 = (($125) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $5;
  $131 = (($129) + ($130<<1)|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  switch ($133|0) {
  case 13: case 12: case 11:  {
   $134 = $3;
   $135 = ((($134)) + 1372|0);
   $136 = $4;
   $137 = (($135) + ($136<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $5;
   $140 = (($138) + ($139<<1)|0);
   HEAP16[$140>>1] = 262;
   $141 = $3;
   $142 = ((($141)) + 1804|0);
   $143 = $4;
   $144 = (($142) + ($143<<2)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $5;
   $147 = (($145) + ($146<<1)|0);
   HEAP16[$147>>1] = 11;
   $148 = $3;
   $149 = ((($148)) + 1372|0);
   $150 = $4;
   $151 = (($150) + 1)|0;
   $152 = (($149) + ($151<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $5;
   $155 = (($153) + ($154<<1)|0);
   HEAP16[$155>>1] = 261;
   $156 = $3;
   $157 = ((($156)) + 1804|0);
   $158 = $4;
   $159 = (($158) + 1)|0;
   $160 = (($157) + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $5;
   $163 = (($161) + ($162<<1)|0);
   HEAP16[$163>>1] = 258;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $164 = $3;
   $165 = ((($164)) + 1372|0);
   $166 = $4;
   $167 = (($165) + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $5;
   $170 = (($168) + ($169<<1)|0);
   HEAP16[$170>>1] = 262;
   $171 = $3;
   $172 = ((($171)) + 1804|0);
   $173 = $4;
   $174 = (($172) + ($173<<2)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $5;
   $177 = (($175) + ($176<<1)|0);
   HEAP16[$177>>1] = 11;
   $178 = $3;
   $179 = ((($178)) + 1372|0);
   $180 = $4;
   $181 = (($180) + 2)|0;
   $182 = (($179) + ($181<<2)|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $5;
   $185 = (($184) - 1)|0;
   $186 = (($183) + ($185<<1)|0);
   $187 = HEAP16[$186>>1]|0;
   $188 = $187 << 16 >> 16;
   $189 = ($188|0)==(11);
   if ($189) {
    $190 = $3;
    $191 = ((($190)) + 1372|0);
    $192 = $4;
    $193 = (($192) + 2)|0;
    $194 = (($191) + ($193<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $5;
    $197 = (($196) - 1)|0;
    $198 = (($195) + ($197<<1)|0);
    HEAP16[$198>>1] = 12;
   }
   $199 = $3;
   $200 = ((($199)) + 1372|0);
   $201 = $4;
   $202 = (($200) + ($201<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $5;
   $205 = (($204) - 1)|0;
   $206 = (($203) + ($205<<1)|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $207 << 16 >> 16;
   $209 = ($208|0)==(11);
   if ($209) {
    $210 = $3;
    $211 = ((($210)) + 1372|0);
    $212 = $4;
    $213 = (($211) + ($212<<2)|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = $5;
    $216 = (($215) - 1)|0;
    $217 = (($214) + ($216<<1)|0);
    HEAP16[$217>>1] = 13;
   }
   $218 = $4;
   $219 = $3;
   $220 = ((($219)) + 104|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (($218) - ($221))|0;
   $223 = ($222>>>0)<=(20);
   if (!($223)) {
    STACKTOP = sp;return;
   }
   $224 = $5;
   $225 = $3;
   $226 = ((($225)) + 108|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($224) - ($227))|0;
   $229 = ($228>>>0)<=(15);
   if (!($229)) {
    STACKTOP = sp;return;
   }
   $230 = $3;
   $231 = ((($230)) + 44|0);
   $232 = ((($231)) + 30|0);
   HEAP8[$232>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 2:  {
  $233 = $3;
  $234 = ((($233)) + 1372|0);
  $235 = $4;
  $236 = (($234) + ($235<<2)|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $5;
  $239 = (($238) + 1)|0;
  $240 = (($237) + ($239<<1)|0);
  $241 = HEAP16[$240>>1]|0;
  $242 = $241 << 16 >> 16;
  switch ($242|0) {
  case 13: case 12: case 11:  {
   $243 = $3;
   $244 = ((($243)) + 1372|0);
   $245 = $4;
   $246 = (($244) + ($245<<2)|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $5;
   $249 = (($247) + ($248<<1)|0);
   HEAP16[$249>>1] = 264;
   $250 = $3;
   $251 = ((($250)) + 1804|0);
   $252 = $4;
   $253 = (($251) + ($252<<2)|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $5;
   $256 = (($254) + ($255<<1)|0);
   HEAP16[$256>>1] = 11;
   $257 = $3;
   $258 = ((($257)) + 1372|0);
   $259 = $4;
   $260 = (($258) + ($259<<2)|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $5;
   $263 = (($262) + 1)|0;
   $264 = (($261) + ($263<<1)|0);
   HEAP16[$264>>1] = 263;
   $265 = $3;
   $266 = ((($265)) + 1804|0);
   $267 = $4;
   $268 = (($266) + ($267<<2)|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $5;
   $271 = (($270) + 1)|0;
   $272 = (($269) + ($271<<1)|0);
   HEAP16[$272>>1] = 258;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $273 = $3;
   $274 = ((($273)) + 1372|0);
   $275 = $4;
   $276 = (($274) + ($275<<2)|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $5;
   $279 = (($277) + ($278<<1)|0);
   HEAP16[$279>>1] = 264;
   $280 = $3;
   $281 = ((($280)) + 1804|0);
   $282 = $4;
   $283 = (($281) + ($282<<2)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = $5;
   $286 = (($284) + ($285<<1)|0);
   HEAP16[$286>>1] = 11;
   $287 = $3;
   $288 = ((($287)) + 1372|0);
   $289 = $4;
   $290 = (($289) + 1)|0;
   $291 = (($288) + ($290<<2)|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $5;
   $294 = (($292) + ($293<<1)|0);
   $295 = HEAP16[$294>>1]|0;
   $296 = $295 << 16 >> 16;
   $297 = ($296|0)==(11);
   if ($297) {
    $298 = $3;
    $299 = ((($298)) + 1372|0);
    $300 = $4;
    $301 = (($300) + 1)|0;
    $302 = (($299) + ($301<<2)|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $5;
    $305 = (($303) + ($304<<1)|0);
    HEAP16[$305>>1] = 12;
   }
   $306 = $3;
   $307 = ((($306)) + 1372|0);
   $308 = $4;
   $309 = (($308) - 1)|0;
   $310 = (($307) + ($309<<2)|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $5;
   $313 = (($311) + ($312<<1)|0);
   $314 = HEAP16[$313>>1]|0;
   $315 = $314 << 16 >> 16;
   $316 = ($315|0)==(11);
   if ($316) {
    $317 = $3;
    $318 = ((($317)) + 1372|0);
    $319 = $4;
    $320 = (($319) - 1)|0;
    $321 = (($318) + ($320<<2)|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $5;
    $324 = (($322) + ($323<<1)|0);
    HEAP16[$324>>1] = 13;
   }
   $325 = $4;
   $326 = $3;
   $327 = ((($326)) + 104|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($325) - ($328))|0;
   $330 = ($329>>>0)<=(20);
   if (!($330)) {
    STACKTOP = sp;return;
   }
   $331 = $5;
   $332 = $3;
   $333 = ((($332)) + 108|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($331) - ($334))|0;
   $336 = ($335>>>0)<=(15);
   if (!($336)) {
    STACKTOP = sp;return;
   }
   $337 = $3;
   $338 = ((($337)) + 44|0);
   $339 = ((($338)) + 30|0);
   HEAP8[$339>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 3:  {
  $340 = $3;
  $341 = ((($340)) + 1372|0);
  $342 = $4;
  $343 = (($342) - 1)|0;
  $344 = (($341) + ($343<<2)|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = $5;
  $347 = (($345) + ($346<<1)|0);
  $348 = HEAP16[$347>>1]|0;
  $349 = $348 << 16 >> 16;
  switch ($349|0) {
  case 13: case 12: case 11:  {
   $350 = $3;
   $351 = ((($350)) + 1372|0);
   $352 = $4;
   $353 = (($351) + ($352<<2)|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = $5;
   $356 = (($354) + ($355<<1)|0);
   HEAP16[$356>>1] = 266;
   $357 = $3;
   $358 = ((($357)) + 1804|0);
   $359 = $4;
   $360 = (($358) + ($359<<2)|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $5;
   $363 = (($361) + ($362<<1)|0);
   HEAP16[$363>>1] = 11;
   $364 = $3;
   $365 = ((($364)) + 1372|0);
   $366 = $4;
   $367 = (($366) - 1)|0;
   $368 = (($365) + ($367<<2)|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $5;
   $371 = (($369) + ($370<<1)|0);
   HEAP16[$371>>1] = 265;
   $372 = $3;
   $373 = ((($372)) + 1804|0);
   $374 = $4;
   $375 = (($374) - 1)|0;
   $376 = (($373) + ($375<<2)|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = $5;
   $379 = (($377) + ($378<<1)|0);
   HEAP16[$379>>1] = 258;
   STACKTOP = sp;return;
   break;
  }
  case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
   $380 = $3;
   $381 = ((($380)) + 1372|0);
   $382 = $4;
   $383 = (($381) + ($382<<2)|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = $5;
   $386 = (($384) + ($385<<1)|0);
   HEAP16[$386>>1] = 266;
   $387 = $3;
   $388 = ((($387)) + 1804|0);
   $389 = $4;
   $390 = (($388) + ($389<<2)|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $5;
   $393 = (($391) + ($392<<1)|0);
   HEAP16[$393>>1] = 11;
   $394 = $3;
   $395 = ((($394)) + 1372|0);
   $396 = $4;
   $397 = (($395) + ($396<<2)|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $5;
   $400 = (($399) - 1)|0;
   $401 = (($398) + ($400<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $402 << 16 >> 16;
   $404 = ($403|0)==(11);
   if ($404) {
    $405 = $3;
    $406 = ((($405)) + 1372|0);
    $407 = $4;
    $408 = (($406) + ($407<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $5;
    $411 = (($410) - 1)|0;
    $412 = (($409) + ($411<<1)|0);
    HEAP16[$412>>1] = 12;
   }
   $413 = $3;
   $414 = ((($413)) + 1372|0);
   $415 = $4;
   $416 = (($415) - 2)|0;
   $417 = (($414) + ($416<<2)|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = $5;
   $420 = (($419) - 1)|0;
   $421 = (($418) + ($420<<1)|0);
   $422 = HEAP16[$421>>1]|0;
   $423 = $422 << 16 >> 16;
   $424 = ($423|0)==(11);
   if ($424) {
    $425 = $3;
    $426 = ((($425)) + 1372|0);
    $427 = $4;
    $428 = (($427) - 2)|0;
    $429 = (($426) + ($428<<2)|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = $5;
    $432 = (($431) - 1)|0;
    $433 = (($430) + ($432<<1)|0);
    HEAP16[$433>>1] = 13;
   }
   $434 = $4;
   $435 = $3;
   $436 = ((($435)) + 104|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = (($434) - ($437))|0;
   $439 = ($438>>>0)<=(20);
   if (!($439)) {
    STACKTOP = sp;return;
   }
   $440 = $5;
   $441 = $3;
   $442 = ((($441)) + 108|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = (($440) - ($443))|0;
   $445 = ($444>>>0)<=(15);
   if (!($445)) {
    STACKTOP = sp;return;
   }
   $446 = $3;
   $447 = ((($446)) + 44|0);
   $448 = ((($447)) + 30|0);
   HEAP8[$448>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lball_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 264|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 269;
 $17 = $3;
 $18 = ((($17)) + 1804|0);
 $19 = $4;
 $20 = (($18) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = (($21) + ($22<<1)|0);
 HEAP16[$23>>1] = 268;
 $24 = $3;
 $25 = ((($24)) + 256|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $3;
 $29 = $4;
 $30 = $5;
 _Lball_common($28,$29,$30);
 STACKTOP = sp;return;
}
function _Lball_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 264|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 270;
 $17 = $3;
 $18 = ((($17)) + 1804|0);
 $19 = $4;
 $20 = (($18) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = (($21) + ($22<<1)|0);
 HEAP16[$23>>1] = 267;
 $24 = $3;
 $25 = ((($24)) + 256|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $3;
 $29 = $4;
 $30 = $5;
 _Lball_common($28,$29,$30);
 STACKTOP = sp;return;
}
function _Ldrip($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 280;
 STACKTOP = sp;return;
}
function _Ldrip_1_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 1372|0);
 $9 = $4;
 $10 = (($8) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($12) + 1)|0;
 $14 = (($11) + ($13<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 switch ($16|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $17 = $3;
  $18 = ((($17)) + 1372|0);
  $19 = $4;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = (($21) + ($22<<1)|0);
  HEAP16[$23>>1] = 280;
  $24 = $3;
  $25 = ((($24)) + 1804|0);
  $26 = $4;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $5;
  $30 = (($28) + ($29<<1)|0);
  HEAP16[$30>>1] = 281;
  $31 = $3;
  $32 = ((($31)) + 1372|0);
  $33 = $4;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($36) + 1)|0;
  $38 = (($35) + ($37<<1)|0);
  HEAP16[$38>>1] = 282;
  $39 = $3;
  $40 = ((($39)) + 1804|0);
  $41 = $4;
  $42 = (($40) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($44) + 1)|0;
  $46 = (($43) + ($45<<1)|0);
  HEAP16[$46>>1] = 283;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $47 = $3;
  $48 = ((($47)) + 1372|0);
  $49 = $4;
  $50 = (($48) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $5;
  $53 = (($51) + ($52<<1)|0);
  HEAP16[$53>>1] = 280;
  $54 = $3;
  $55 = ((($54)) + 1804|0);
  $56 = $4;
  $57 = (($55) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $5;
  $60 = (($58) + ($59<<1)|0);
  HEAP16[$60>>1] = 281;
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($63) + 1)|0;
  $65 = (($62) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $5;
  $68 = (($66) + ($67<<1)|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ($70|0)==(11);
  if ($71) {
   $72 = $3;
   $73 = ((($72)) + 1372|0);
   $74 = $4;
   $75 = (($74) + 1)|0;
   $76 = (($73) + ($75<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $5;
   $79 = (($77) + ($78<<1)|0);
   HEAP16[$79>>1] = 12;
  }
  $80 = $3;
  $81 = ((($80)) + 1372|0);
  $82 = $4;
  $83 = (($82) - 1)|0;
  $84 = (($81) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $5;
  $87 = (($85) + ($86<<1)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = ($89|0)==(11);
  if ($90) {
   $91 = $3;
   $92 = ((($91)) + 1372|0);
   $93 = $4;
   $94 = (($93) - 1)|0;
   $95 = (($92) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $5;
   $98 = (($96) + ($97<<1)|0);
   HEAP16[$98>>1] = 13;
  }
  $99 = $4;
  $100 = $3;
  $101 = ((($100)) + 104|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($99) - ($102))|0;
  $104 = ($103>>>0)<=(20);
  if (!($104)) {
   STACKTOP = sp;return;
  }
  $105 = $5;
  $106 = $3;
  $107 = ((($106)) + 108|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($105) - ($108))|0;
  $110 = ($109>>>0)<=(15);
  if (!($110)) {
   STACKTOP = sp;return;
  }
  $111 = $3;
  $112 = ((($111)) + 44|0);
  $113 = ((($112)) + 30|0);
  HEAP8[$113>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $6 = 301;
  $114 = $3;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115*12421)|0;
  $117 = (($116) + 1)|0;
  $118 = $3;
  HEAP32[$118>>2] = $117;
  $119 = $3;
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 & 65535;
  $122 = $121<<3;
  $123 = $122 >> 16;
  switch ($123|0) {
  case 0:  {
   $6 = 271;
   break;
  }
  case 1:  {
   $6 = 272;
   break;
  }
  case 2:  {
   $6 = 273;
   break;
  }
  case 3:  {
   $6 = 274;
   break;
  }
  case 4:  {
   $6 = 275;
   break;
  }
  case 5:  {
   $6 = 276;
   break;
  }
  case 6:  {
   $6 = 277;
   break;
  }
  case 7:  {
   $6 = 278;
   break;
  }
  default: {
  }
  }
  $124 = $6;
  $125 = $124&65535;
  $126 = $3;
  $127 = ((($126)) + 1372|0);
  $128 = $4;
  $129 = (($127) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $5;
  $132 = (($130) + ($131<<1)|0);
  HEAP16[$132>>1] = $125;
  $133 = $6;
  $134 = $133&65535;
  $135 = $3;
  $136 = ((($135)) + 1804|0);
  $137 = $4;
  $138 = (($136) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $5;
  $141 = (($139) + ($140<<1)|0);
  HEAP16[$141>>1] = $134;
  $142 = $3;
  $143 = ((($142)) + 44|0);
  $144 = ((($143)) + 19|0);
  HEAP8[$144>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Ldrip_2_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 11;
 STACKTOP = sp;return;
}
function _Ldrip_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 283;
 STACKTOP = sp;return;
}
function _Ldrip_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 280;
 STACKTOP = sp;return;
}
function _Lwonderwall($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 392|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 388|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 1372|0);
 $16 = $4;
 $17 = (($15) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = (($18) + ($19<<1)|0);
 HEAP16[$20>>1] = 285;
 STACKTOP = sp;return;
}
function _Lwheel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 360|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = $3;
 $12 = ((($11)) + 364|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $5;
 $16 = $3;
 $17 = ((($16)) + 368|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==($18|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = ((($20)) + 1372|0);
 $22 = $4;
 $23 = (($21) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $5;
 $26 = (($24) + ($25<<1)|0);
 HEAP16[$26>>1] = 287;
 STACKTOP = sp;return;
}
function _Lswitch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 264|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 289;
 STACKTOP = sp;return;
}
function _Lfake_space($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 320|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 298;
 STACKTOP = sp;return;
}
function _Lfake_grass($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 300;
 STACKTOP = sp;return;
}
function _Lfake_ameuba($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 320|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 1372|0);
 $12 = $4;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = 302;
 STACKTOP = sp;return;
}
function _Lsand_stone($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 13: case 12: case 11:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 317;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 318;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 319;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 320;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $46 = $3;
  $47 = ((($46)) + 1372|0);
  $48 = $4;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $5;
  $52 = (($50) + ($51<<1)|0);
  HEAP16[$52>>1] = 317;
  $53 = $3;
  $54 = ((($53)) + 1804|0);
  $55 = $4;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = (($57) + ($58<<1)|0);
  HEAP16[$59>>1] = 318;
  $60 = $3;
  $61 = ((($60)) + 1372|0);
  $62 = $4;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = ($69|0)==(11);
  if ($70) {
   $71 = $3;
   $72 = ((($71)) + 1372|0);
   $73 = $4;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $5;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 12;
  }
  $79 = $3;
  $80 = ((($79)) + 1372|0);
  $81 = $4;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = (($84) + ($85<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)==(11);
  if ($89) {
   $90 = $3;
   $91 = ((($90)) + 1372|0);
   $92 = $4;
   $93 = (($92) - 1)|0;
   $94 = (($91) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $5;
   $97 = (($95) + ($96<<1)|0);
   HEAP16[$97>>1] = 13;
  }
  $98 = $4;
  $99 = $3;
  $100 = ((($99)) + 104|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) - ($101))|0;
  $103 = ($102>>>0)<=(20);
  if (!($103)) {
   STACKTOP = sp;return;
  }
  $104 = $5;
  $105 = $3;
  $106 = ((($105)) + 108|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($104) - ($107))|0;
  $109 = ($108>>>0)<=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 44|0);
  $112 = ((($111)) + 30|0);
  HEAP8[$112>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 305:  {
  $113 = $3;
  $114 = ((($113)) + 1372|0);
  $115 = $4;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $5;
  $119 = (($117) + ($118<<1)|0);
  HEAP16[$119>>1] = 315;
  $120 = $3;
  $121 = ((($120)) + 1804|0);
  $122 = $4;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $5;
  $126 = (($124) + ($125<<1)|0);
  HEAP16[$126>>1] = 316;
  $127 = $3;
  $128 = ((($127)) + 1372|0);
  $129 = $4;
  $130 = (($128) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($132) + 1)|0;
  $134 = (($131) + ($133<<1)|0);
  HEAP16[$134>>1] = 311;
  $135 = $3;
  $136 = ((($135)) + 1804|0);
  $137 = $4;
  $138 = (($136) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $5;
  $141 = (($140) + 1)|0;
  $142 = (($139) + ($141<<1)|0);
  HEAP16[$142>>1] = 312;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lsand_stone_1_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 308;
 STACKTOP = sp;return;
}
function _Lsand_stone_2_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 309;
 STACKTOP = sp;return;
}
function _Lsand_stone_3_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 310;
 STACKTOP = sp;return;
}
function _Lsand_stone_4_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 11;
 STACKTOP = sp;return;
}
function _Lsand_sand_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 312;
 STACKTOP = sp;return;
}
function _Lsand_sand_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 313;
 STACKTOP = sp;return;
}
function _Lsand_sand_3_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 314;
 STACKTOP = sp;return;
}
function _Lsand_sand_4_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 306;
 STACKTOP = sp;return;
}
function _Lsand_sand_1_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 316;
 STACKTOP = sp;return;
}
function _Lsand_sand_2_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 317;
 STACKTOP = sp;return;
}
function _Lsand_sand_3_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 318;
 STACKTOP = sp;return;
}
function _Lsand_sand_4_sB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 305;
 STACKTOP = sp;return;
}
function _Lsand_stone_1_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 320;
 STACKTOP = sp;return;
}
function _Lsand_stone_2_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 174;
 STACKTOP = sp;return;
}
function _Lslide_ns($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (11821 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $3;
  $20 = ((($19)) + 1372|0);
  $21 = $4;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $5;
  $25 = (($24) - 1)|0;
  $26 = (($23) + ($25<<1)|0);
  HEAP16[$26>>1] = 323;
  $27 = $3;
  $28 = ((($27)) + 1804|0);
  $29 = $4;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<1)|0);
  HEAP16[$34>>1] = 321;
  $35 = $3;
  $36 = ((($35)) + 44|0);
  $37 = ((($36)) + 15|0);
  HEAP8[$37>>0] = 1;
 }
 $38 = $3;
 $39 = ((($38)) + 1372|0);
 $40 = $4;
 $41 = (($39) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $5;
 $44 = (($43) + 1)|0;
 $45 = (($42) + ($44<<1)|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 $48 = (11821 + ($47)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $3;
 $52 = ((($51)) + 1372|0);
 $53 = $4;
 $54 = (($52) + ($53<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $5;
 $57 = (($56) + 1)|0;
 $58 = (($55) + ($57<<1)|0);
 HEAP16[$58>>1] = 323;
 $59 = $3;
 $60 = ((($59)) + 1804|0);
 $61 = $4;
 $62 = (($60) + ($61<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $5;
 $65 = (($64) + 1)|0;
 $66 = (($63) + ($65<<1)|0);
 HEAP16[$66>>1] = 321;
 $67 = $3;
 $68 = ((($67)) + 44|0);
 $69 = ((($68)) + 15|0);
 HEAP8[$69>>0] = 1;
 STACKTOP = sp;return;
}
function _Lslide_ew($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (11821 + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $3;
  $20 = ((($19)) + 1372|0);
  $21 = $4;
  $22 = (($21) + 1)|0;
  $23 = (($20) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = (($24) + ($25<<1)|0);
  HEAP16[$26>>1] = 324;
  $27 = $3;
  $28 = ((($27)) + 1804|0);
  $29 = $4;
  $30 = (($29) + 1)|0;
  $31 = (($28) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = (($32) + ($33<<1)|0);
  HEAP16[$34>>1] = 322;
  $35 = $3;
  $36 = ((($35)) + 44|0);
  $37 = ((($36)) + 15|0);
  HEAP8[$37>>0] = 1;
 }
 $38 = $3;
 $39 = ((($38)) + 1372|0);
 $40 = $4;
 $41 = (($40) - 1)|0;
 $42 = (($39) + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $5;
 $45 = (($43) + ($44<<1)|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 $48 = (11821 + ($47)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $3;
 $52 = ((($51)) + 1372|0);
 $53 = $4;
 $54 = (($53) - 1)|0;
 $55 = (($52) + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $5;
 $58 = (($56) + ($57<<1)|0);
 HEAP16[$58>>1] = 324;
 $59 = $3;
 $60 = ((($59)) + 1804|0);
 $61 = $4;
 $62 = (($61) - 1)|0;
 $63 = (($60) + ($62<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = (($64) + ($65<<1)|0);
 HEAP16[$66>>1] = 322;
 $67 = $3;
 $68 = ((($67)) + 44|0);
 $69 = ((($68)) + 15|0);
 HEAP8[$69>>0] = 1;
 STACKTOP = sp;return;
}
function _Lexit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11*12421)|0;
 $13 = (($12) + 1)|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 65535;
 $18 = ($17*3)|0;
 $19 = $18 >> 16;
 switch ($19|0) {
 case 0:  {
  $20 = $3;
  $21 = ((($20)) + 1372|0);
  $22 = $4;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = (($24) + ($25<<1)|0);
  HEAP16[$26>>1] = 332;
  $27 = $3;
  $28 = ((($27)) + 1804|0);
  $29 = $4;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = (($31) + ($32<<1)|0);
  HEAP16[$33>>1] = 333;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $34 = $3;
  $35 = ((($34)) + 1372|0);
  $36 = $4;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = (($38) + ($39<<1)|0);
  HEAP16[$40>>1] = 333;
  $41 = $3;
  $42 = ((($41)) + 1804|0);
  $43 = $4;
  $44 = (($42) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $5;
  $47 = (($45) + ($46<<1)|0);
  HEAP16[$47>>1] = 334;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $48 = $3;
  $49 = ((($48)) + 1372|0);
  $50 = $4;
  $51 = (($49) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $5;
  $54 = (($52) + ($53<<1)|0);
  HEAP16[$54>>1] = 334;
  $55 = $3;
  $56 = ((($55)) + 1804|0);
  $57 = $4;
  $58 = (($56) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $5;
  $61 = (($59) + ($60<<1)|0);
  HEAP16[$61>>1] = 332;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Lexit_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 333;
 STACKTOP = sp;return;
}
function _Lexit_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 334;
 STACKTOP = sp;return;
}
function _Lexit_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 332;
 STACKTOP = sp;return;
}
function _Lpause($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1804|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<1)|0);
 HEAP16[$12>>1] = 11;
 STACKTOP = sp;return;
}
function _Lball_common($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 44|0);
 $8 = ((($7)) + 14|0);
 HEAP8[$8>>0] = 1;
 $9 = $3;
 $10 = ((($9)) + 260|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $3;
 if (!($12)) {
  $353 = ((($13)) + 540|0);
  $354 = HEAP16[$353>>1]|0;
  $355 = $354 << 16 >> 16;
  $356 = ($355|0)!=(11);
  if ($356) {
   $357 = $3;
   $358 = ((($357)) + 1372|0);
   $359 = $4;
   $360 = (($359) - 1)|0;
   $361 = (($358) + ($360<<2)|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = $5;
   $364 = (($363) - 1)|0;
   $365 = (($362) + ($364<<1)|0);
   $366 = HEAP16[$365>>1]|0;
   $367 = $366 << 16 >> 16;
   $368 = (11821 + ($367)|0);
   $369 = HEAP8[$368>>0]|0;
   $370 = $369 << 24 >> 24;
   $371 = ($370|0)!=(0);
   if ($371) {
    $372 = $3;
    $373 = ((($372)) + 1372|0);
    $374 = $4;
    $375 = (($374) - 1)|0;
    $376 = (($373) + ($375<<2)|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = $5;
    $379 = (($378) - 1)|0;
    $380 = (($377) + ($379<<1)|0);
    HEAP16[$380>>1] = 10;
    $381 = $3;
    $382 = ((($381)) + 540|0);
    $383 = HEAP16[$382>>1]|0;
    $384 = $3;
    $385 = ((($384)) + 1804|0);
    $386 = $4;
    $387 = (($386) - 1)|0;
    $388 = (($385) + ($387<<2)|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = $5;
    $391 = (($390) - 1)|0;
    $392 = (($389) + ($391<<1)|0);
    HEAP16[$392>>1] = $383;
   }
  }
  $393 = $3;
  $394 = ((($393)) + 540|0);
  $395 = ((($394)) + 2|0);
  $396 = HEAP16[$395>>1]|0;
  $397 = $396 << 16 >> 16;
  $398 = ($397|0)!=(11);
  if ($398) {
   $399 = $3;
   $400 = ((($399)) + 1372|0);
   $401 = $4;
   $402 = (($400) + ($401<<2)|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = $5;
   $405 = (($404) - 1)|0;
   $406 = (($403) + ($405<<1)|0);
   $407 = HEAP16[$406>>1]|0;
   $408 = $407 << 16 >> 16;
   $409 = (11821 + ($408)|0);
   $410 = HEAP8[$409>>0]|0;
   $411 = $410 << 24 >> 24;
   $412 = ($411|0)!=(0);
   if ($412) {
    $413 = $3;
    $414 = ((($413)) + 1372|0);
    $415 = $4;
    $416 = (($414) + ($415<<2)|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $5;
    $419 = (($418) - 1)|0;
    $420 = (($417) + ($419<<1)|0);
    HEAP16[$420>>1] = 10;
    $421 = $3;
    $422 = ((($421)) + 540|0);
    $423 = ((($422)) + 2|0);
    $424 = HEAP16[$423>>1]|0;
    $425 = $3;
    $426 = ((($425)) + 1804|0);
    $427 = $4;
    $428 = (($426) + ($427<<2)|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $5;
    $431 = (($430) - 1)|0;
    $432 = (($429) + ($431<<1)|0);
    HEAP16[$432>>1] = $424;
   }
  }
  $433 = $3;
  $434 = ((($433)) + 540|0);
  $435 = ((($434)) + 4|0);
  $436 = HEAP16[$435>>1]|0;
  $437 = $436 << 16 >> 16;
  $438 = ($437|0)!=(11);
  if ($438) {
   $439 = $3;
   $440 = ((($439)) + 1372|0);
   $441 = $4;
   $442 = (($441) + 1)|0;
   $443 = (($440) + ($442<<2)|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = $5;
   $446 = (($445) - 1)|0;
   $447 = (($444) + ($446<<1)|0);
   $448 = HEAP16[$447>>1]|0;
   $449 = $448 << 16 >> 16;
   $450 = (11821 + ($449)|0);
   $451 = HEAP8[$450>>0]|0;
   $452 = $451 << 24 >> 24;
   $453 = ($452|0)!=(0);
   if ($453) {
    $454 = $3;
    $455 = ((($454)) + 1372|0);
    $456 = $4;
    $457 = (($456) + 1)|0;
    $458 = (($455) + ($457<<2)|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $5;
    $461 = (($460) - 1)|0;
    $462 = (($459) + ($461<<1)|0);
    HEAP16[$462>>1] = 10;
    $463 = $3;
    $464 = ((($463)) + 540|0);
    $465 = ((($464)) + 4|0);
    $466 = HEAP16[$465>>1]|0;
    $467 = $3;
    $468 = ((($467)) + 1804|0);
    $469 = $4;
    $470 = (($469) + 1)|0;
    $471 = (($468) + ($470<<2)|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = $5;
    $474 = (($473) - 1)|0;
    $475 = (($472) + ($474<<1)|0);
    HEAP16[$475>>1] = $466;
   }
  }
  $476 = $3;
  $477 = ((($476)) + 540|0);
  $478 = ((($477)) + 6|0);
  $479 = HEAP16[$478>>1]|0;
  $480 = $479 << 16 >> 16;
  $481 = ($480|0)!=(11);
  if ($481) {
   $482 = $3;
   $483 = ((($482)) + 1372|0);
   $484 = $4;
   $485 = (($484) - 1)|0;
   $486 = (($483) + ($485<<2)|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = $5;
   $489 = (($487) + ($488<<1)|0);
   $490 = HEAP16[$489>>1]|0;
   $491 = $490 << 16 >> 16;
   $492 = (11821 + ($491)|0);
   $493 = HEAP8[$492>>0]|0;
   $494 = $493 << 24 >> 24;
   $495 = ($494|0)!=(0);
   if ($495) {
    $496 = $3;
    $497 = ((($496)) + 1372|0);
    $498 = $4;
    $499 = (($498) - 1)|0;
    $500 = (($497) + ($499<<2)|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = $5;
    $503 = (($501) + ($502<<1)|0);
    HEAP16[$503>>1] = 10;
    $504 = $3;
    $505 = ((($504)) + 540|0);
    $506 = ((($505)) + 6|0);
    $507 = HEAP16[$506>>1]|0;
    $508 = $3;
    $509 = ((($508)) + 1804|0);
    $510 = $4;
    $511 = (($510) - 1)|0;
    $512 = (($509) + ($511<<2)|0);
    $513 = HEAP32[$512>>2]|0;
    $514 = $5;
    $515 = (($513) + ($514<<1)|0);
    HEAP16[$515>>1] = $507;
   }
  }
  $516 = $3;
  $517 = ((($516)) + 540|0);
  $518 = ((($517)) + 8|0);
  $519 = HEAP16[$518>>1]|0;
  $520 = $519 << 16 >> 16;
  $521 = ($520|0)!=(11);
  if ($521) {
   $522 = $3;
   $523 = ((($522)) + 1372|0);
   $524 = $4;
   $525 = (($524) + 1)|0;
   $526 = (($523) + ($525<<2)|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $5;
   $529 = (($527) + ($528<<1)|0);
   $530 = HEAP16[$529>>1]|0;
   $531 = $530 << 16 >> 16;
   $532 = (11821 + ($531)|0);
   $533 = HEAP8[$532>>0]|0;
   $534 = $533 << 24 >> 24;
   $535 = ($534|0)!=(0);
   if ($535) {
    $536 = $3;
    $537 = ((($536)) + 1372|0);
    $538 = $4;
    $539 = (($538) + 1)|0;
    $540 = (($537) + ($539<<2)|0);
    $541 = HEAP32[$540>>2]|0;
    $542 = $5;
    $543 = (($541) + ($542<<1)|0);
    HEAP16[$543>>1] = 10;
    $544 = $3;
    $545 = ((($544)) + 540|0);
    $546 = ((($545)) + 8|0);
    $547 = HEAP16[$546>>1]|0;
    $548 = $3;
    $549 = ((($548)) + 1804|0);
    $550 = $4;
    $551 = (($550) + 1)|0;
    $552 = (($549) + ($551<<2)|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $5;
    $555 = (($553) + ($554<<1)|0);
    HEAP16[$555>>1] = $547;
   }
  }
  $556 = $3;
  $557 = ((($556)) + 540|0);
  $558 = ((($557)) + 10|0);
  $559 = HEAP16[$558>>1]|0;
  $560 = $559 << 16 >> 16;
  $561 = ($560|0)!=(11);
  if ($561) {
   $562 = $3;
   $563 = ((($562)) + 1372|0);
   $564 = $4;
   $565 = (($564) - 1)|0;
   $566 = (($563) + ($565<<2)|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = $5;
   $569 = (($568) + 1)|0;
   $570 = (($567) + ($569<<1)|0);
   $571 = HEAP16[$570>>1]|0;
   $572 = $571 << 16 >> 16;
   $573 = (11821 + ($572)|0);
   $574 = HEAP8[$573>>0]|0;
   $575 = $574 << 24 >> 24;
   $576 = ($575|0)!=(0);
   if ($576) {
    $577 = $3;
    $578 = ((($577)) + 1372|0);
    $579 = $4;
    $580 = (($579) - 1)|0;
    $581 = (($578) + ($580<<2)|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = $5;
    $584 = (($583) + 1)|0;
    $585 = (($582) + ($584<<1)|0);
    HEAP16[$585>>1] = 10;
    $586 = $3;
    $587 = ((($586)) + 540|0);
    $588 = ((($587)) + 10|0);
    $589 = HEAP16[$588>>1]|0;
    $590 = $3;
    $591 = ((($590)) + 1804|0);
    $592 = $4;
    $593 = (($592) - 1)|0;
    $594 = (($591) + ($593<<2)|0);
    $595 = HEAP32[$594>>2]|0;
    $596 = $5;
    $597 = (($596) + 1)|0;
    $598 = (($595) + ($597<<1)|0);
    HEAP16[$598>>1] = $589;
   }
  }
  $599 = $3;
  $600 = ((($599)) + 540|0);
  $601 = ((($600)) + 12|0);
  $602 = HEAP16[$601>>1]|0;
  $603 = $602 << 16 >> 16;
  $604 = ($603|0)!=(11);
  if ($604) {
   $605 = $3;
   $606 = ((($605)) + 1372|0);
   $607 = $4;
   $608 = (($606) + ($607<<2)|0);
   $609 = HEAP32[$608>>2]|0;
   $610 = $5;
   $611 = (($610) + 1)|0;
   $612 = (($609) + ($611<<1)|0);
   $613 = HEAP16[$612>>1]|0;
   $614 = $613 << 16 >> 16;
   $615 = (11821 + ($614)|0);
   $616 = HEAP8[$615>>0]|0;
   $617 = $616 << 24 >> 24;
   $618 = ($617|0)!=(0);
   if ($618) {
    $619 = $3;
    $620 = ((($619)) + 1372|0);
    $621 = $4;
    $622 = (($620) + ($621<<2)|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = $5;
    $625 = (($624) + 1)|0;
    $626 = (($623) + ($625<<1)|0);
    HEAP16[$626>>1] = 10;
    $627 = $3;
    $628 = ((($627)) + 540|0);
    $629 = ((($628)) + 12|0);
    $630 = HEAP16[$629>>1]|0;
    $631 = $3;
    $632 = ((($631)) + 1804|0);
    $633 = $4;
    $634 = (($632) + ($633<<2)|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = $5;
    $637 = (($636) + 1)|0;
    $638 = (($635) + ($637<<1)|0);
    HEAP16[$638>>1] = $630;
   }
  }
  $639 = $3;
  $640 = ((($639)) + 540|0);
  $641 = ((($640)) + 14|0);
  $642 = HEAP16[$641>>1]|0;
  $643 = $642 << 16 >> 16;
  $644 = ($643|0)!=(11);
  if (!($644)) {
   STACKTOP = sp;return;
  }
  $645 = $3;
  $646 = ((($645)) + 1372|0);
  $647 = $4;
  $648 = (($647) + 1)|0;
  $649 = (($646) + ($648<<2)|0);
  $650 = HEAP32[$649>>2]|0;
  $651 = $5;
  $652 = (($651) + 1)|0;
  $653 = (($650) + ($652<<1)|0);
  $654 = HEAP16[$653>>1]|0;
  $655 = $654 << 16 >> 16;
  $656 = (11821 + ($655)|0);
  $657 = HEAP8[$656>>0]|0;
  $658 = $657 << 24 >> 24;
  $659 = ($658|0)!=(0);
  if (!($659)) {
   STACKTOP = sp;return;
  }
  $660 = $3;
  $661 = ((($660)) + 1372|0);
  $662 = $4;
  $663 = (($662) + 1)|0;
  $664 = (($661) + ($663<<2)|0);
  $665 = HEAP32[$664>>2]|0;
  $666 = $5;
  $667 = (($666) + 1)|0;
  $668 = (($665) + ($667<<1)|0);
  HEAP16[$668>>1] = 10;
  $669 = $3;
  $670 = ((($669)) + 540|0);
  $671 = ((($670)) + 14|0);
  $672 = HEAP16[$671>>1]|0;
  $673 = $3;
  $674 = ((($673)) + 1804|0);
  $675 = $4;
  $676 = (($675) + 1)|0;
  $677 = (($674) + ($676<<2)|0);
  $678 = HEAP32[$677>>2]|0;
  $679 = $5;
  $680 = (($679) + 1)|0;
  $681 = (($678) + ($680<<1)|0);
  HEAP16[$681>>1] = $672;
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*12421)|0;
 $16 = (($15) + 1)|0;
 $17 = $3;
 HEAP32[$17>>2] = $16;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 65535;
 $21 = $20<<3;
 $22 = $21 >> 16;
 switch ($22|0) {
 case 0:  {
  $23 = $3;
  $24 = ((($23)) + 540|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = ($26|0)!=(11);
  if (!($27)) {
   STACKTOP = sp;return;
  }
  $28 = $3;
  $29 = ((($28)) + 1372|0);
  $30 = $4;
  $31 = (($30) - 1)|0;
  $32 = (($29) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $5;
  $35 = (($34) - 1)|0;
  $36 = (($33) + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = (11821 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   STACKTOP = sp;return;
  }
  $43 = $3;
  $44 = ((($43)) + 1372|0);
  $45 = $4;
  $46 = (($45) - 1)|0;
  $47 = (($44) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $5;
  $50 = (($49) - 1)|0;
  $51 = (($48) + ($50<<1)|0);
  HEAP16[$51>>1] = 10;
  $52 = $3;
  $53 = ((($52)) + 540|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $3;
  $56 = ((($55)) + 1804|0);
  $57 = $4;
  $58 = (($57) - 1)|0;
  $59 = (($56) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = (($61) - 1)|0;
  $63 = (($60) + ($62<<1)|0);
  HEAP16[$63>>1] = $54;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $64 = $3;
  $65 = ((($64)) + 540|0);
  $66 = ((($65)) + 2|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = ($68|0)!=(11);
  if (!($69)) {
   STACKTOP = sp;return;
  }
  $70 = $3;
  $71 = ((($70)) + 1372|0);
  $72 = $4;
  $73 = (($71) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $5;
  $76 = (($75) - 1)|0;
  $77 = (($74) + ($76<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = (11821 + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81 << 24 >> 24;
  $83 = ($82|0)!=(0);
  if (!($83)) {
   STACKTOP = sp;return;
  }
  $84 = $3;
  $85 = ((($84)) + 1372|0);
  $86 = $4;
  $87 = (($85) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $5;
  $90 = (($89) - 1)|0;
  $91 = (($88) + ($90<<1)|0);
  HEAP16[$91>>1] = 10;
  $92 = $3;
  $93 = ((($92)) + 540|0);
  $94 = ((($93)) + 2|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $3;
  $97 = ((($96)) + 1804|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($101) - 1)|0;
  $103 = (($100) + ($102<<1)|0);
  HEAP16[$103>>1] = $95;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $104 = $3;
  $105 = ((($104)) + 540|0);
  $106 = ((($105)) + 4|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107 << 16 >> 16;
  $109 = ($108|0)!=(11);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $3;
  $111 = ((($110)) + 1372|0);
  $112 = $4;
  $113 = (($112) + 1)|0;
  $114 = (($111) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $5;
  $117 = (($116) - 1)|0;
  $118 = (($115) + ($117<<1)|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119 << 16 >> 16;
  $121 = (11821 + ($120)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122 << 24 >> 24;
  $124 = ($123|0)!=(0);
  if (!($124)) {
   STACKTOP = sp;return;
  }
  $125 = $3;
  $126 = ((($125)) + 1372|0);
  $127 = $4;
  $128 = (($127) + 1)|0;
  $129 = (($126) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $5;
  $132 = (($131) - 1)|0;
  $133 = (($130) + ($132<<1)|0);
  HEAP16[$133>>1] = 10;
  $134 = $3;
  $135 = ((($134)) + 540|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $3;
  $139 = ((($138)) + 1804|0);
  $140 = $4;
  $141 = (($140) + 1)|0;
  $142 = (($139) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $5;
  $145 = (($144) - 1)|0;
  $146 = (($143) + ($145<<1)|0);
  HEAP16[$146>>1] = $137;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $147 = $3;
  $148 = ((($147)) + 540|0);
  $149 = ((($148)) + 6|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150 << 16 >> 16;
  $152 = ($151|0)!=(11);
  if (!($152)) {
   STACKTOP = sp;return;
  }
  $153 = $3;
  $154 = ((($153)) + 1372|0);
  $155 = $4;
  $156 = (($155) - 1)|0;
  $157 = (($154) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $5;
  $160 = (($158) + ($159<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161 << 16 >> 16;
  $163 = (11821 + ($162)|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164 << 24 >> 24;
  $166 = ($165|0)!=(0);
  if (!($166)) {
   STACKTOP = sp;return;
  }
  $167 = $3;
  $168 = ((($167)) + 1372|0);
  $169 = $4;
  $170 = (($169) - 1)|0;
  $171 = (($168) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $5;
  $174 = (($172) + ($173<<1)|0);
  HEAP16[$174>>1] = 10;
  $175 = $3;
  $176 = ((($175)) + 540|0);
  $177 = ((($176)) + 6|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $3;
  $180 = ((($179)) + 1804|0);
  $181 = $4;
  $182 = (($181) - 1)|0;
  $183 = (($180) + ($182<<2)|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $5;
  $186 = (($184) + ($185<<1)|0);
  HEAP16[$186>>1] = $178;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $187 = $3;
  $188 = ((($187)) + 540|0);
  $189 = ((($188)) + 8|0);
  $190 = HEAP16[$189>>1]|0;
  $191 = $190 << 16 >> 16;
  $192 = ($191|0)!=(11);
  if (!($192)) {
   STACKTOP = sp;return;
  }
  $193 = $3;
  $194 = ((($193)) + 1372|0);
  $195 = $4;
  $196 = (($195) + 1)|0;
  $197 = (($194) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $5;
  $200 = (($198) + ($199<<1)|0);
  $201 = HEAP16[$200>>1]|0;
  $202 = $201 << 16 >> 16;
  $203 = (11821 + ($202)|0);
  $204 = HEAP8[$203>>0]|0;
  $205 = $204 << 24 >> 24;
  $206 = ($205|0)!=(0);
  if (!($206)) {
   STACKTOP = sp;return;
  }
  $207 = $3;
  $208 = ((($207)) + 1372|0);
  $209 = $4;
  $210 = (($209) + 1)|0;
  $211 = (($208) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $5;
  $214 = (($212) + ($213<<1)|0);
  HEAP16[$214>>1] = 10;
  $215 = $3;
  $216 = ((($215)) + 540|0);
  $217 = ((($216)) + 8|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = $3;
  $220 = ((($219)) + 1804|0);
  $221 = $4;
  $222 = (($221) + 1)|0;
  $223 = (($220) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $5;
  $226 = (($224) + ($225<<1)|0);
  HEAP16[$226>>1] = $218;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $227 = $3;
  $228 = ((($227)) + 540|0);
  $229 = ((($228)) + 10|0);
  $230 = HEAP16[$229>>1]|0;
  $231 = $230 << 16 >> 16;
  $232 = ($231|0)!=(11);
  if (!($232)) {
   STACKTOP = sp;return;
  }
  $233 = $3;
  $234 = ((($233)) + 1372|0);
  $235 = $4;
  $236 = (($235) - 1)|0;
  $237 = (($234) + ($236<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $5;
  $240 = (($239) + 1)|0;
  $241 = (($238) + ($240<<1)|0);
  $242 = HEAP16[$241>>1]|0;
  $243 = $242 << 16 >> 16;
  $244 = (11821 + ($243)|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245 << 24 >> 24;
  $247 = ($246|0)!=(0);
  if (!($247)) {
   STACKTOP = sp;return;
  }
  $248 = $3;
  $249 = ((($248)) + 1372|0);
  $250 = $4;
  $251 = (($250) - 1)|0;
  $252 = (($249) + ($251<<2)|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $5;
  $255 = (($254) + 1)|0;
  $256 = (($253) + ($255<<1)|0);
  HEAP16[$256>>1] = 10;
  $257 = $3;
  $258 = ((($257)) + 540|0);
  $259 = ((($258)) + 10|0);
  $260 = HEAP16[$259>>1]|0;
  $261 = $3;
  $262 = ((($261)) + 1804|0);
  $263 = $4;
  $264 = (($263) - 1)|0;
  $265 = (($262) + ($264<<2)|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = $5;
  $268 = (($267) + 1)|0;
  $269 = (($266) + ($268<<1)|0);
  HEAP16[$269>>1] = $260;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $270 = $3;
  $271 = ((($270)) + 540|0);
  $272 = ((($271)) + 12|0);
  $273 = HEAP16[$272>>1]|0;
  $274 = $273 << 16 >> 16;
  $275 = ($274|0)!=(11);
  if (!($275)) {
   STACKTOP = sp;return;
  }
  $276 = $3;
  $277 = ((($276)) + 1372|0);
  $278 = $4;
  $279 = (($277) + ($278<<2)|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $5;
  $282 = (($281) + 1)|0;
  $283 = (($280) + ($282<<1)|0);
  $284 = HEAP16[$283>>1]|0;
  $285 = $284 << 16 >> 16;
  $286 = (11821 + ($285)|0);
  $287 = HEAP8[$286>>0]|0;
  $288 = $287 << 24 >> 24;
  $289 = ($288|0)!=(0);
  if (!($289)) {
   STACKTOP = sp;return;
  }
  $290 = $3;
  $291 = ((($290)) + 1372|0);
  $292 = $4;
  $293 = (($291) + ($292<<2)|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = $5;
  $296 = (($295) + 1)|0;
  $297 = (($294) + ($296<<1)|0);
  HEAP16[$297>>1] = 10;
  $298 = $3;
  $299 = ((($298)) + 540|0);
  $300 = ((($299)) + 12|0);
  $301 = HEAP16[$300>>1]|0;
  $302 = $3;
  $303 = ((($302)) + 1804|0);
  $304 = $4;
  $305 = (($303) + ($304<<2)|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = $5;
  $308 = (($307) + 1)|0;
  $309 = (($306) + ($308<<1)|0);
  HEAP16[$309>>1] = $301;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $310 = $3;
  $311 = ((($310)) + 540|0);
  $312 = ((($311)) + 14|0);
  $313 = HEAP16[$312>>1]|0;
  $314 = $313 << 16 >> 16;
  $315 = ($314|0)!=(11);
  if (!($315)) {
   STACKTOP = sp;return;
  }
  $316 = $3;
  $317 = ((($316)) + 1372|0);
  $318 = $4;
  $319 = (($318) + 1)|0;
  $320 = (($317) + ($319<<2)|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = $5;
  $323 = (($322) + 1)|0;
  $324 = (($321) + ($323<<1)|0);
  $325 = HEAP16[$324>>1]|0;
  $326 = $325 << 16 >> 16;
  $327 = (11821 + ($326)|0);
  $328 = HEAP8[$327>>0]|0;
  $329 = $328 << 24 >> 24;
  $330 = ($329|0)!=(0);
  if (!($330)) {
   STACKTOP = sp;return;
  }
  $331 = $3;
  $332 = ((($331)) + 1372|0);
  $333 = $4;
  $334 = (($333) + 1)|0;
  $335 = (($332) + ($334<<2)|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $5;
  $338 = (($337) + 1)|0;
  $339 = (($336) + ($338<<1)|0);
  HEAP16[$339>>1] = 10;
  $340 = $3;
  $341 = ((($340)) + 540|0);
  $342 = ((($341)) + 14|0);
  $343 = HEAP16[$342>>1]|0;
  $344 = $3;
  $345 = ((($344)) + 1804|0);
  $346 = $4;
  $347 = (($346) + 1)|0;
  $348 = (($345) + ($347<<2)|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $5;
  $351 = (($350) + 1)|0;
  $352 = (($349) + ($351<<1)|0);
  HEAP16[$352>>1] = $343;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 132;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 131;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 123;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 132;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $5;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $5;
   $92 = (($91) - 1)|0;
   $93 = (($90) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 2)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($100) - 1)|0;
  $102 = (($99) + ($101<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = ($104|0)==(11);
  if ($105) {
   $106 = $3;
   $107 = ((($106)) + 1372|0);
   $108 = $4;
   $109 = (($108) - 2)|0;
   $110 = (($107) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = ((($130)) + 1372|0);
  $132 = $4;
  $133 = (($131) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $5;
  $136 = (($134) + ($135<<1)|0);
  HEAP16[$136>>1] = 133;
  $137 = $3;
  $138 = ((($137)) + 1804|0);
  $139 = $4;
  $140 = (($138) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $5;
  $143 = (($141) + ($142<<1)|0);
  HEAP16[$143>>1] = 118;
  $144 = $4;
  $145 = $3;
  $146 = ((($145)) + 104|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($144) - ($147))|0;
  $149 = ($148>>>0)<=(20);
  if (!($149)) {
   STACKTOP = sp;return;
  }
  $150 = $5;
  $151 = $3;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $155 = ($154>>>0)<=(15);
  if (!($155)) {
   STACKTOP = sp;return;
  }
  $156 = $3;
  $157 = ((($156)) + 44|0);
  $158 = ((($157)) + 27|0);
  HEAP8[$158>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 130;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 129;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 121;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 130;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($80) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($88) + 1)|0;
   $90 = (($87) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $5;
   $93 = (($91) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 1)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = ($103|0)==(11);
  if ($104) {
   $105 = $3;
   $106 = ((($105)) + 1372|0);
   $107 = $4;
   $108 = (($107) - 1)|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $5;
   $112 = (($110) + ($111<<1)|0);
   HEAP16[$112>>1] = 13;
  }
  $113 = $4;
  $114 = $3;
  $115 = ((($114)) + 104|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) - ($116))|0;
  $118 = ($117>>>0)<=(20);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = $5;
  $120 = $3;
  $121 = ((($120)) + 108|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) - ($122))|0;
  $124 = ($123>>>0)<=(15);
  if (!($124)) {
   STACKTOP = sp;return;
  }
  $125 = $3;
  $126 = ((($125)) + 44|0);
  $127 = ((($126)) + 30|0);
  HEAP8[$127>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $128 = $3;
  $129 = ((($128)) + 1372|0);
  $130 = $4;
  $131 = (($129) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $5;
  $134 = (($132) + ($133<<1)|0);
  HEAP16[$134>>1] = 136;
  $135 = $3;
  $136 = ((($135)) + 1804|0);
  $137 = $4;
  $138 = (($136) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $5;
  $141 = (($139) + ($140<<1)|0);
  HEAP16[$141>>1] = 124;
  $142 = $4;
  $143 = $3;
  $144 = ((($143)) + 104|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($142) - ($145))|0;
  $147 = ($146>>>0)<=(20);
  if (!($147)) {
   STACKTOP = sp;return;
  }
  $148 = $5;
  $149 = $3;
  $150 = ((($149)) + 108|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($148) - ($151))|0;
  $153 = ($152>>>0)<=(15);
  if (!($153)) {
   STACKTOP = sp;return;
  }
  $154 = $3;
  $155 = ((($154)) + 44|0);
  $156 = ((($155)) + 27|0);
  HEAP8[$156>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 128;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 127;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) + 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 119;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 128;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 2)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 2)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 1)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($101) - 1)|0;
  $103 = (($100) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = ($105|0)==(11);
  if ($106) {
   $107 = $3;
   $108 = ((($107)) + 1372|0);
   $109 = $4;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = ((($130)) + 1372|0);
  $132 = $4;
  $133 = (($131) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $5;
  $136 = (($134) + ($135<<1)|0);
  HEAP16[$136>>1] = 135;
  $137 = $3;
  $138 = ((($137)) + 1804|0);
  $139 = $4;
  $140 = (($138) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $5;
  $143 = (($141) + ($142<<1)|0);
  HEAP16[$143>>1] = 122;
  $144 = $4;
  $145 = $3;
  $146 = ((($145)) + 104|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($144) - ($147))|0;
  $149 = ($148>>>0)<=(20);
  if (!($149)) {
   STACKTOP = sp;return;
  }
  $150 = $5;
  $151 = $3;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $155 = ($154>>>0)<=(15);
  if (!($155)) {
   STACKTOP = sp;return;
  }
  $156 = $3;
  $157 = ((($156)) + 44|0);
  $158 = ((($157)) + 27|0);
  HEAP8[$158>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Ltank_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 126;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 125;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 117;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 27|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 126;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 2)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 1)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 2)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($98) - 1)|0;
  $100 = (($97) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($102) - 2)|0;
  $104 = (($101) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = ($106|0)==(11);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $4;
   $111 = (($110) - 1)|0;
   $112 = (($109) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $5;
   $115 = (($114) - 2)|0;
   $116 = (($113) + ($115<<1)|0);
   HEAP16[$116>>1] = 13;
  }
  $117 = $4;
  $118 = $3;
  $119 = ((($118)) + 104|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($117) - ($120))|0;
  $122 = ($121>>>0)<=(20);
  if (!($122)) {
   STACKTOP = sp;return;
  }
  $123 = $5;
  $124 = $3;
  $125 = ((($124)) + 108|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  $128 = ($127>>>0)<=(15);
  if (!($128)) {
   STACKTOP = sp;return;
  }
  $129 = $3;
  $130 = ((($129)) + 44|0);
  $131 = ((($130)) + 30|0);
  HEAP8[$131>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $132 = $3;
  $133 = ((($132)) + 1372|0);
  $134 = $4;
  $135 = (($133) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $5;
  $138 = (($136) + ($137<<1)|0);
  HEAP16[$138>>1] = 134;
  $139 = $3;
  $140 = ((($139)) + 1804|0);
  $141 = $4;
  $142 = (($140) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $5;
  $145 = (($143) + ($144<<1)|0);
  HEAP16[$145>>1] = 120;
  $146 = $4;
  $147 = $3;
  $148 = ((($147)) + 104|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($146) - ($149))|0;
  $151 = ($150>>>0)<=(20);
  if (!($151)) {
   STACKTOP = sp;return;
  }
  $152 = $5;
  $153 = $3;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($152) - ($155))|0;
  $157 = ($156>>>0)<=(15);
  if (!($157)) {
   STACKTOP = sp;return;
  }
  $158 = $3;
  $159 = ((($158)) + 44|0);
  $160 = ((($159)) + 27|0);
  HEAP8[$160>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_w($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) - 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 100;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) - 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 99;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) - 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 91;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 26|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 100;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $5;
  $81 = (($80) - 1)|0;
  $82 = (($79) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $5;
   $92 = (($91) - 1)|0;
   $93 = (($90) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 2)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($100) - 1)|0;
  $102 = (($99) + ($101<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = ($104|0)==(11);
  if ($105) {
   $106 = $3;
   $107 = ((($106)) + 1372|0);
   $108 = $4;
   $109 = (($108) - 2)|0;
   $110 = (($107) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = ((($130)) + 1372|0);
  $132 = $4;
  $133 = (($131) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $5;
  $136 = (($134) + ($135<<1)|0);
  HEAP16[$136>>1] = 107;
  $137 = $3;
  $138 = ((($137)) + 1804|0);
  $139 = $4;
  $140 = (($138) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $5;
  $143 = (($141) + ($142<<1)|0);
  HEAP16[$143>>1] = 90;
  $144 = $4;
  $145 = $3;
  $146 = ((($145)) + 104|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($144) - ($147))|0;
  $149 = ($148>>>0)<=(20);
  if (!($149)) {
   STACKTOP = sp;return;
  }
  $150 = $5;
  $151 = $3;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $155 = ($154>>>0)<=(15);
  if (!($155)) {
   STACKTOP = sp;return;
  }
  $156 = $3;
  $157 = ((($156)) + 44|0);
  $158 = ((($157)) + 26|0);
  HEAP8[$158>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_s($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 98;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) + 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 97;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 89;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 26|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 98;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($80) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = ($84|0)==(11);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 1372|0);
   $88 = $4;
   $89 = (($88) + 1)|0;
   $90 = (($87) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $5;
   $93 = (($91) + ($92<<1)|0);
   HEAP16[$93>>1] = 12;
  }
  $94 = $3;
  $95 = ((($94)) + 1372|0);
  $96 = $4;
  $97 = (($96) - 1)|0;
  $98 = (($95) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = ($103|0)==(11);
  if ($104) {
   $105 = $3;
   $106 = ((($105)) + 1372|0);
   $107 = $4;
   $108 = (($107) - 1)|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $5;
   $112 = (($110) + ($111<<1)|0);
   HEAP16[$112>>1] = 13;
  }
  $113 = $4;
  $114 = $3;
  $115 = ((($114)) + 104|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) - ($116))|0;
  $118 = ($117>>>0)<=(20);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = $5;
  $120 = $3;
  $121 = ((($120)) + 108|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) - ($122))|0;
  $124 = ($123>>>0)<=(15);
  if (!($124)) {
   STACKTOP = sp;return;
  }
  $125 = $3;
  $126 = ((($125)) + 44|0);
  $127 = ((($126)) + 30|0);
  HEAP8[$127>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $128 = $3;
  $129 = ((($128)) + 1372|0);
  $130 = $4;
  $131 = (($129) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $5;
  $134 = (($132) + ($133<<1)|0);
  HEAP16[$134>>1] = 106;
  $135 = $3;
  $136 = ((($135)) + 1804|0);
  $137 = $4;
  $138 = (($136) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $5;
  $141 = (($139) + ($140<<1)|0);
  HEAP16[$141>>1] = 88;
  $142 = $4;
  $143 = $3;
  $144 = ((($143)) + 104|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($142) - ($145))|0;
  $147 = ($146>>>0)<=(20);
  if (!($147)) {
   STACKTOP = sp;return;
  }
  $148 = $5;
  $149 = $3;
  $150 = ((($149)) + 108|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($148) - ($151))|0;
  $153 = ($152>>>0)<=(15);
  if (!($153)) {
   STACKTOP = sp;return;
  }
  $154 = $3;
  $155 = ((($154)) + 44|0);
  $156 = ((($155)) + 26|0);
  HEAP8[$156>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_e($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 96;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $5;
  $37 = (($35) + ($36<<1)|0);
  HEAP16[$37>>1] = 95;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($40) + 1)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44<<1)|0);
  HEAP16[$45>>1] = 87;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 26|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 96;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 2)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 1)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 2)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 1)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  $102 = (($101) - 1)|0;
  $103 = (($100) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = ($105|0)==(11);
  if ($106) {
   $107 = $3;
   $108 = ((($107)) + 1372|0);
   $109 = $4;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = (($112) - 1)|0;
   $114 = (($111) + ($113<<1)|0);
   HEAP16[$114>>1] = 13;
  }
  $115 = $4;
  $116 = $3;
  $117 = ((($116)) + 104|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = ($119>>>0)<=(20);
  if (!($120)) {
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = $3;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($121) - ($124))|0;
  $126 = ($125>>>0)<=(15);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $3;
  $128 = ((($127)) + 44|0);
  $129 = ((($128)) + 30|0);
  HEAP8[$129>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $130 = $3;
  $131 = ((($130)) + 1372|0);
  $132 = $4;
  $133 = (($131) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $5;
  $136 = (($134) + ($135<<1)|0);
  HEAP16[$136>>1] = 105;
  $137 = $3;
  $138 = ((($137)) + 1804|0);
  $139 = $4;
  $140 = (($138) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $5;
  $143 = (($141) + ($142<<1)|0);
  HEAP16[$143>>1] = 86;
  $144 = $4;
  $145 = $3;
  $146 = ((($145)) + 104|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($144) - ($147))|0;
  $149 = ($148>>>0)<=(20);
  if (!($149)) {
   STACKTOP = sp;return;
  }
  $150 = $5;
  $151 = $3;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $155 = ($154>>>0)<=(15);
  if (!($155)) {
   STACKTOP = sp;return;
  }
  $156 = $3;
  $157 = ((($156)) + 44|0);
  $158 = ((($157)) + 26|0);
  HEAP8[$158>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lbug_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 1372|0);
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 switch ($15|0) {
 case 14: case 13: case 12: case 11: case 406:  {
  $16 = $3;
  $17 = ((($16)) + 1372|0);
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = (($20) + ($21<<1)|0);
  HEAP16[$22>>1] = 94;
  $23 = $3;
  $24 = ((($23)) + 1804|0);
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = 11;
  $30 = $3;
  $31 = ((($30)) + 1372|0);
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = (($35) - 1)|0;
  $37 = (($34) + ($36<<1)|0);
  HEAP16[$37>>1] = 93;
  $38 = $3;
  $39 = ((($38)) + 1804|0);
  $40 = $4;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = (($43) - 1)|0;
  $45 = (($42) + ($44<<1)|0);
  HEAP16[$45>>1] = 85;
  $46 = $4;
  $47 = $3;
  $48 = ((($47)) + 104|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) - ($49))|0;
  $51 = ($50>>>0)<=(20);
  if (!($51)) {
   STACKTOP = sp;return;
  }
  $52 = $5;
  $53 = $3;
  $54 = ((($53)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) - ($55))|0;
  $57 = ($56>>>0)<=(15);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = $3;
  $59 = ((($58)) + 44|0);
  $60 = ((($59)) + 26|0);
  HEAP8[$60>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
  $61 = $3;
  $62 = ((($61)) + 1372|0);
  $63 = $4;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $5;
  $67 = (($65) + ($66<<1)|0);
  HEAP16[$67>>1] = 94;
  $68 = $3;
  $69 = ((($68)) + 1804|0);
  $70 = $4;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $5;
  $74 = (($72) + ($73<<1)|0);
  HEAP16[$74>>1] = 11;
  $75 = $3;
  $76 = ((($75)) + 1372|0);
  $77 = $4;
  $78 = (($77) + 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = (($81) - 2)|0;
  $83 = (($80) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = ($85|0)==(11);
  if ($86) {
   $87 = $3;
   $88 = ((($87)) + 1372|0);
   $89 = $4;
   $90 = (($89) + 1)|0;
   $91 = (($88) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $5;
   $94 = (($93) - 2)|0;
   $95 = (($92) + ($94<<1)|0);
   HEAP16[$95>>1] = 12;
  }
  $96 = $3;
  $97 = ((($96)) + 1372|0);
  $98 = $4;
  $99 = (($98) - 1)|0;
  $100 = (($97) + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($102) - 2)|0;
  $104 = (($101) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = ($106|0)==(11);
  if ($107) {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $4;
   $111 = (($110) - 1)|0;
   $112 = (($109) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $5;
   $115 = (($114) - 2)|0;
   $116 = (($113) + ($115<<1)|0);
   HEAP16[$116>>1] = 13;
  }
  $117 = $4;
  $118 = $3;
  $119 = ((($118)) + 104|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($117) - ($120))|0;
  $122 = ($121>>>0)<=(20);
  if (!($122)) {
   STACKTOP = sp;return;
  }
  $123 = $5;
  $124 = $3;
  $125 = ((($124)) + 108|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  $128 = ($127>>>0)<=(15);
  if (!($128)) {
   STACKTOP = sp;return;
  }
  $129 = $3;
  $130 = ((($129)) + 44|0);
  $131 = ((($130)) + 30|0);
  HEAP8[$131>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $132 = $3;
  $133 = ((($132)) + 1372|0);
  $134 = $4;
  $135 = (($133) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $5;
  $138 = (($136) + ($137<<1)|0);
  HEAP16[$138>>1] = 108;
  $139 = $3;
  $140 = ((($139)) + 1804|0);
  $141 = $4;
  $142 = (($140) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $5;
  $145 = (($143) + ($144<<1)|0);
  HEAP16[$145>>1] = 92;
  $146 = $4;
  $147 = $3;
  $148 = ((($147)) + 104|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($146) - ($149))|0;
  $151 = ($150>>>0)<=(20);
  if (!($151)) {
   STACKTOP = sp;return;
  }
  $152 = $5;
  $153 = $3;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($152) - ($155))|0;
  $157 = ($156>>>0)<=(15);
  if (!($157)) {
   STACKTOP = sp;return;
  }
  $158 = $3;
  $159 = ((($158)) + 44|0);
  $160 = ((($159)) + 26|0);
  HEAP8[$160>>0] = 1;
  STACKTOP = sp;return;
 }
 }
}
function _Lplayer_check($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(2);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 24|0);
  $9 = $4;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  L4: do {
   if (!($12)) {
    $13 = $1;
    $14 = ((($13)) + 16|0);
    $15 = $4;
    $16 = (($14) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0);
    if (!($18)) {
     $19 = $1;
     $20 = ((($19)) + 184|0);
     $21 = $4;
     $22 = (($20) + ($21<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $2 = $23;
     $24 = $1;
     $25 = ((($24)) + 192|0);
     $26 = $4;
     $27 = (($25) + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $3 = $28;
     $29 = $1;
     $30 = ((($29)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $33 = $1;
      $34 = ((($33)) + 16|0);
      $35 = $4;
      $36 = (($34) + ($35<<2)|0);
      HEAP32[$36>>2] = -1;
     }
     $37 = $1;
     $38 = ((($37)) + 1372|0);
     $39 = $2;
     $40 = (($38) + ($39<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $3;
     $43 = (($41) + ($42<<1)|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = $44 << 16 >> 16;
     switch ($45|0) {
     case 233: case 232: case 231: case 230: case 406:  {
      break;
     }
     default: {
      $46 = $1;
      $47 = ((($46)) + 16|0);
      $48 = $4;
      $49 = (($47) + ($48<<2)|0);
      HEAP32[$49>>2] = -1;
     }
     }
     $50 = $1;
     $51 = ((($50)) + 1372|0);
     $52 = $2;
     $53 = (($51) + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $3;
     $56 = (($55) - 1)|0;
     $57 = (($54) + ($56<<1)|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     switch ($59|0) {
     case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
      $60 = $1;
      $61 = ((($60)) + 16|0);
      $62 = $4;
      $63 = (($61) + ($62<<2)|0);
      HEAP32[$63>>2] = -1;
      break;
     }
     default: {
     }
     }
     $64 = $1;
     $65 = ((($64)) + 1372|0);
     $66 = $2;
     $67 = (($66) + 1)|0;
     $68 = (($65) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $3;
     $71 = (($69) + ($70<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72 << 16 >> 16;
     switch ($73|0) {
     case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
      $74 = $1;
      $75 = ((($74)) + 16|0);
      $76 = $4;
      $77 = (($75) + ($76<<2)|0);
      HEAP32[$77>>2] = -1;
      break;
     }
     default: {
     }
     }
     $78 = $1;
     $79 = ((($78)) + 1372|0);
     $80 = $2;
     $81 = (($79) + ($80<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $3;
     $84 = (($83) + 1)|0;
     $85 = (($82) + ($84<<1)|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86 << 16 >> 16;
     switch ($87|0) {
     case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
      $88 = $1;
      $89 = ((($88)) + 16|0);
      $90 = $4;
      $91 = (($89) + ($90<<2)|0);
      HEAP32[$91>>2] = -1;
      break;
     }
     default: {
     }
     }
     $92 = $1;
     $93 = ((($92)) + 1372|0);
     $94 = $2;
     $95 = (($94) - 1)|0;
     $96 = (($93) + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $3;
     $99 = (($97) + ($98<<1)|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100 << 16 >> 16;
     switch ($101|0) {
     case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
      break;
     }
     default: {
      break L4;
     }
     }
     $102 = $1;
     $103 = ((($102)) + 16|0);
     $104 = $4;
     $105 = (($103) + ($104<<2)|0);
     HEAP32[$105>>2] = -1;
    }
   }
  } while(0);
  $106 = $4;
  $107 = (($106) + 1)|0;
  $4 = $107;
 }
 $4 = 0;
 while(1) {
  $108 = $4;
  $109 = ($108|0)<(2);
  if (!($109)) {
   break;
  }
  $110 = $1;
  $111 = ((($110)) + 24|0);
  $112 = $4;
  $113 = (($111) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)!=(0);
  L28: do {
   if (!($115)) {
    $116 = $1;
    $117 = ((($116)) + 184|0);
    $118 = $4;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $2 = $120;
    $121 = $1;
    $122 = ((($121)) + 192|0);
    $123 = $4;
    $124 = (($122) + ($123<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $3 = $125;
    $126 = $1;
    $127 = ((($126)) + 1372|0);
    $128 = $2;
    $129 = (($127) + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $3;
    $132 = (($131) - 1)|0;
    $133 = (($130) + ($132<<1)|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134 << 16 >> 16;
    switch ($135|0) {
    case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
     $136 = $1;
     $137 = ((($136)) + 1372|0);
     $138 = $2;
     $139 = (($137) + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $3;
     $142 = (($141) - 1)|0;
     $143 = (($140) + ($142<<1)|0);
     HEAP16[$143>>1] = 6;
     $144 = $1;
     $145 = $2;
     $146 = $3;
     $147 = (($146) - 1)|0;
     _Lboom_bug($144,$145,$147);
     break;
    }
    case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117:  {
     $148 = $1;
     $149 = ((($148)) + 1372|0);
     $150 = $2;
     $151 = (($149) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $3;
     $154 = (($153) - 1)|0;
     $155 = (($152) + ($154<<1)|0);
     HEAP16[$155>>1] = 6;
     $156 = $1;
     $157 = $2;
     $158 = $3;
     $159 = (($158) - 1)|0;
     _Lboom_tank($156,$157,$159);
     break;
    }
    default: {
    }
    }
    $160 = $1;
    $161 = ((($160)) + 1372|0);
    $162 = $2;
    $163 = (($162) + 1)|0;
    $164 = (($161) + ($163<<2)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $3;
    $167 = (($165) + ($166<<1)|0);
    $168 = HEAP16[$167>>1]|0;
    $169 = $168 << 16 >> 16;
    switch ($169|0) {
    case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
     $170 = $1;
     $171 = ((($170)) + 1372|0);
     $172 = $2;
     $173 = (($172) + 1)|0;
     $174 = (($171) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $3;
     $177 = (($175) + ($176<<1)|0);
     HEAP16[$177>>1] = 6;
     $178 = $1;
     $179 = $2;
     $180 = (($179) + 1)|0;
     $181 = $3;
     _Lboom_bug($178,$180,$181);
     break;
    }
    case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117:  {
     $182 = $1;
     $183 = ((($182)) + 1372|0);
     $184 = $2;
     $185 = (($184) + 1)|0;
     $186 = (($183) + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $3;
     $189 = (($187) + ($188<<1)|0);
     HEAP16[$189>>1] = 6;
     $190 = $1;
     $191 = $2;
     $192 = (($191) + 1)|0;
     $193 = $3;
     _Lboom_tank($190,$192,$193);
     break;
    }
    default: {
    }
    }
    $194 = $1;
    $195 = ((($194)) + 1372|0);
    $196 = $2;
    $197 = (($195) + ($196<<2)|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = $3;
    $200 = (($199) + 1)|0;
    $201 = (($198) + ($200<<1)|0);
    $202 = HEAP16[$201>>1]|0;
    $203 = $202 << 16 >> 16;
    switch ($203|0) {
    case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
     $204 = $1;
     $205 = ((($204)) + 1372|0);
     $206 = $2;
     $207 = (($205) + ($206<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $3;
     $210 = (($209) + 1)|0;
     $211 = (($208) + ($210<<1)|0);
     HEAP16[$211>>1] = 6;
     $212 = $1;
     $213 = $2;
     $214 = $3;
     $215 = (($214) + 1)|0;
     _Lboom_bug($212,$213,$215);
     break;
    }
    case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117:  {
     $216 = $1;
     $217 = ((($216)) + 1372|0);
     $218 = $2;
     $219 = (($217) + ($218<<2)|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $3;
     $222 = (($221) + 1)|0;
     $223 = (($220) + ($222<<1)|0);
     HEAP16[$223>>1] = 6;
     $224 = $1;
     $225 = $2;
     $226 = $3;
     $227 = (($226) + 1)|0;
     _Lboom_tank($224,$225,$227);
     break;
    }
    default: {
    }
    }
    $228 = $1;
    $229 = ((($228)) + 1372|0);
    $230 = $2;
    $231 = (($230) - 1)|0;
    $232 = (($229) + ($231<<2)|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $3;
    $235 = (($233) + ($234<<1)|0);
    $236 = HEAP16[$235>>1]|0;
    $237 = $236 << 16 >> 16;
    switch ($237|0) {
    case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85:  {
     $238 = $1;
     $239 = ((($238)) + 1372|0);
     $240 = $2;
     $241 = (($240) - 1)|0;
     $242 = (($239) + ($241<<2)|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = $3;
     $245 = (($243) + ($244<<1)|0);
     HEAP16[$245>>1] = 6;
     $246 = $1;
     $247 = $2;
     $248 = (($247) - 1)|0;
     $249 = $3;
     _Lboom_bug($246,$248,$249);
     break L28;
     break;
    }
    case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117:  {
     $250 = $1;
     $251 = ((($250)) + 1372|0);
     $252 = $2;
     $253 = (($252) - 1)|0;
     $254 = (($251) + ($253<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $3;
     $257 = (($255) + ($256<<1)|0);
     HEAP16[$257>>1] = 6;
     $258 = $1;
     $259 = $2;
     $260 = (($259) - 1)|0;
     $261 = $3;
     _Lboom_tank($258,$260,$261);
     break L28;
     break;
    }
    default: {
     break L28;
    }
    }
   }
  } while(0);
  $262 = $4;
  $263 = (($262) + 1)|0;
  $4 = $263;
 }
 $4 = 0;
 while(1) {
  $264 = $4;
  $265 = ($264|0)<(2);
  if (!($265)) {
   break;
  }
  $266 = $1;
  $267 = ((($266)) + 24|0);
  $268 = $4;
  $269 = (($267) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)!=(0);
  L50: do {
   if (!($271)) {
    $272 = $1;
    $273 = ((($272)) + 16|0);
    $274 = $4;
    $275 = (($273) + ($274<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = ($276|0)==(0);
    if (!($277)) {
     $278 = $1;
     $279 = ((($278)) + 184|0);
     $280 = $4;
     $281 = (($279) + ($280<<2)|0);
     $282 = HEAP32[$281>>2]|0;
     $2 = $282;
     $283 = $1;
     $284 = ((($283)) + 192|0);
     $285 = $4;
     $286 = (($284) + ($285<<2)|0);
     $287 = HEAP32[$286>>2]|0;
     $3 = $287;
     $288 = $1;
     $289 = ((($288)) + 24|0);
     $290 = $4;
     $291 = (($289) + ($290<<2)|0);
     HEAP32[$291>>2] = 1;
     $292 = $1;
     $293 = ((($292)) + 44|0);
     $294 = ((($293)) + 1|0);
     HEAP8[$294>>0] = 1;
     $295 = $1;
     $296 = ((($295)) + 2236|0);
     $297 = $2;
     $298 = (($296) + ($297<<2)|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $3;
     $301 = (($299) + ($300<<1)|0);
     HEAP16[$301>>1] = 11;
     $302 = $1;
     $303 = ((($302)) + 1372|0);
     $304 = $2;
     $305 = (($303) + ($304<<2)|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $3;
     $308 = (($306) + ($307<<1)|0);
     $309 = HEAP16[$308>>1]|0;
     $310 = $309 << 16 >> 16;
     switch ($310|0) {
     case 6:  {
      break L50;
      break;
     }
     case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
      break;
     }
     default: {
      $356 = $1;
      $357 = ((($356)) + 1372|0);
      $358 = $2;
      $359 = (($357) + ($358<<2)|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $3;
      $362 = (($360) + ($361<<1)|0);
      HEAP16[$362>>1] = 8;
      break L50;
     }
     }
     $311 = $1;
     $312 = ((($311)) + 1372|0);
     $313 = $2;
     $314 = (($313) + 1)|0;
     $315 = (($312) + ($314<<2)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $3;
     $318 = (($317) - 1)|0;
     $319 = (($316) + ($318<<1)|0);
     $320 = HEAP16[$319>>1]|0;
     $321 = $320 << 16 >> 16;
     $322 = ($321|0)==(11);
     if ($322) {
      $323 = $1;
      $324 = ((($323)) + 1372|0);
      $325 = $2;
      $326 = (($325) + 1)|0;
      $327 = (($324) + ($326<<2)|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = $3;
      $330 = (($329) - 1)|0;
      $331 = (($328) + ($330<<1)|0);
      HEAP16[$331>>1] = 12;
     }
     $332 = $1;
     $333 = ((($332)) + 1372|0);
     $334 = $2;
     $335 = (($334) - 1)|0;
     $336 = (($333) + ($335<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = $3;
     $339 = (($338) - 1)|0;
     $340 = (($337) + ($339<<1)|0);
     $341 = HEAP16[$340>>1]|0;
     $342 = $341 << 16 >> 16;
     $343 = ($342|0)==(11);
     if ($343) {
      $344 = $1;
      $345 = ((($344)) + 1372|0);
      $346 = $2;
      $347 = (($346) - 1)|0;
      $348 = (($345) + ($347<<2)|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = $3;
      $351 = (($350) - 1)|0;
      $352 = (($349) + ($351<<1)|0);
      HEAP16[$352>>1] = 13;
     }
     $353 = $1;
     $354 = ((($353)) + 44|0);
     $355 = ((($354)) + 30|0);
     HEAP8[$355>>0] = 1;
    }
   }
  } while(0);
  $363 = $4;
  $364 = (($363) + 1)|0;
  $4 = $364;
 }
 STACKTOP = sp;return;
}
function _Lplayer_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 200|0);
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 75|0);
 $11 = $3;
 $12 = (($10) + (($11*6)|0)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = $2;
 $16 = ((($15)) + 75|0);
 $17 = $3;
 $18 = (($16) + (($17*6)|0)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = $14 | $21;
 $23 = $2;
 $24 = ((($23)) + 75|0);
 $25 = $3;
 $26 = (($24) + (($25*6)|0)|0);
 $27 = ((($26)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = $22 | $29;
 $31 = $2;
 $32 = ((($31)) + 75|0);
 $33 = $3;
 $34 = (($32) + (($33*6)|0)|0);
 $35 = ((($34)) + 3|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 $38 = $30 | $37;
 $39 = $2;
 $40 = ((($39)) + 208|0);
 $41 = $3;
 $42 = (($40) + ($41<<2)|0);
 HEAP32[$42>>2] = $38;
 $43 = $2;
 $44 = ((($43)) + 208|0);
 $45 = $3;
 $46 = (($44) + ($45<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 do {
  if (!($48)) {
   $49 = $2;
   $50 = ((($49)) + 75|0);
   $51 = $3;
   $52 = (($50) + (($51*6)|0)|0);
   $53 = ((($52)) + 4|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)!=(0);
   $56 = $2;
   if (!($55)) {
    $98 = HEAP32[$56>>2]|0;
    $99 = ($98*12421)|0;
    $100 = (($99) + 1)|0;
    $101 = $2;
    HEAP32[$101>>2] = $100;
    break;
   }
   $57 = ((($56)) + 224|0);
   $58 = $3;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $62 = $2;
   $63 = ((($62)) + 224|0);
   $64 = $3;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(5);
   if (!($67)) {
    STACKTOP = sp;return;
   }
   $68 = $2;
   $69 = ((($68)) + 280|0);
   $70 = $3;
   $71 = (($69) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)>(0);
   if (!($73)) {
    STACKTOP = sp;return;
   }
   $74 = $2;
   $75 = ((($74)) + 1372|0);
   $76 = $2;
   $77 = ((($76)) + 184|0);
   $78 = $3;
   $79 = (($77) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($75) + ($80<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $2;
   $84 = ((($83)) + 192|0);
   $85 = $3;
   $86 = (($84) + ($85<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($82) + ($87<<1)|0);
   HEAP16[$88>>1] = 230;
   $89 = $2;
   $90 = ((($89)) + 44|0);
   $91 = ((($90)) + 8|0);
   HEAP8[$91>>0] = 1;
   $92 = $2;
   $93 = ((($92)) + 280|0);
   $94 = $3;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + -1)|0;
   HEAP32[$95>>2] = $97;
   STACKTOP = sp;return;
  }
 } while(0);
 $102 = $2;
 $103 = ((($102)) + 224|0);
 $104 = $3;
 $105 = (($103) + ($104<<2)|0);
 HEAP32[$105>>2] = 0;
 $4 = 0;
 L14: while(1) {
  $106 = $4;
  $107 = ($106|0)<(4);
  $108 = $2;
  if (!($107)) {
   label = 29;
   break;
  }
  $109 = ((($108)) + 216|0);
  $110 = $3;
  $111 = (($109) + ($110<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 1)|0;
  $114 = (($113|0) % 4)&-1;
  $115 = $2;
  $116 = ((($115)) + 216|0);
  $117 = $3;
  $118 = (($116) + ($117<<2)|0);
  HEAP32[$118>>2] = $114;
  $119 = $2;
  $120 = ((($119)) + 75|0);
  $121 = $3;
  $122 = (($120) + (($121*6)|0)|0);
  $123 = ((($122)) + 4|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = ($124<<24>>24)!=(0);
  $126 = $2;
  $127 = ((($126)) + 216|0);
  $128 = $3;
  $129 = (($127) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  L17: do {
   if ($125) {
    switch ($130|0) {
    case 0:  {
     $174 = $2;
     $175 = ((($174)) + 75|0);
     $176 = $3;
     $177 = (($175) + (($176*6)|0)|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = ($178<<24>>24)!=(0);
     if (!($179)) {
      break L17;
     }
     $180 = $2;
     $181 = $3;
     $182 = (_Lplayer_shoot_n($180,$181)|0);
     $183 = ($182|0)!=(0);
     if ($183) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 1:  {
     $184 = $2;
     $185 = ((($184)) + 75|0);
     $186 = $3;
     $187 = (($185) + (($186*6)|0)|0);
     $188 = ((($187)) + 1|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = ($189<<24>>24)!=(0);
     if (!($190)) {
      break L17;
     }
     $191 = $2;
     $192 = $3;
     $193 = (_Lplayer_shoot_e($191,$192)|0);
     $194 = ($193|0)!=(0);
     if ($194) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 2:  {
     $195 = $2;
     $196 = ((($195)) + 75|0);
     $197 = $3;
     $198 = (($196) + (($197*6)|0)|0);
     $199 = ((($198)) + 2|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = ($200<<24>>24)!=(0);
     if (!($201)) {
      break L17;
     }
     $202 = $2;
     $203 = $3;
     $204 = (_Lplayer_shoot_s($202,$203)|0);
     $205 = ($204|0)!=(0);
     if ($205) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 3:  {
     $206 = $2;
     $207 = ((($206)) + 75|0);
     $208 = $3;
     $209 = (($207) + (($208*6)|0)|0);
     $210 = ((($209)) + 3|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = ($211<<24>>24)!=(0);
     if (!($212)) {
      break L17;
     }
     $213 = $2;
     $214 = $3;
     $215 = (_Lplayer_shoot_w($213,$214)|0);
     $216 = ($215|0)!=(0);
     if ($216) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    default: {
     break L17;
    }
    }
   } else {
    switch ($130|0) {
    case 0:  {
     $131 = $2;
     $132 = ((($131)) + 75|0);
     $133 = $3;
     $134 = (($132) + (($133*6)|0)|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = ($135<<24>>24)!=(0);
     if (!($136)) {
      break L17;
     }
     $137 = $2;
     $138 = $3;
     $139 = (_Lplayer_walk_n($137,$138)|0);
     $140 = ($139|0)!=(0);
     if ($140) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 1:  {
     $141 = $2;
     $142 = ((($141)) + 75|0);
     $143 = $3;
     $144 = (($142) + (($143*6)|0)|0);
     $145 = ((($144)) + 1|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = ($146<<24>>24)!=(0);
     if (!($147)) {
      break L17;
     }
     $148 = $2;
     $149 = $3;
     $150 = (_Lplayer_walk_e($148,$149)|0);
     $151 = ($150|0)!=(0);
     if ($151) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 2:  {
     $152 = $2;
     $153 = ((($152)) + 75|0);
     $154 = $3;
     $155 = (($153) + (($154*6)|0)|0);
     $156 = ((($155)) + 2|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = ($157<<24>>24)!=(0);
     if (!($158)) {
      break L17;
     }
     $159 = $2;
     $160 = $3;
     $161 = (_Lplayer_walk_s($159,$160)|0);
     $162 = ($161|0)!=(0);
     if ($162) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    case 3:  {
     $163 = $2;
     $164 = ((($163)) + 75|0);
     $165 = $3;
     $166 = (($164) + (($165*6)|0)|0);
     $167 = ((($166)) + 3|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = ($168<<24>>24)!=(0);
     if (!($169)) {
      break L17;
     }
     $170 = $2;
     $171 = $3;
     $172 = (_Lplayer_walk_w($170,$171)|0);
     $173 = ($172|0)!=(0);
     if ($173) {
      label = 30;
      break L14;
     } else {
      break L17;
     }
     break;
    }
    default: {
     break L17;
    }
    }
   }
  } while(0);
  $217 = $4;
  $218 = (($217) + 1)|0;
  $4 = $218;
 }
 if ((label|0) == 29) {
  $219 = ((($108)) + 200|0);
  $220 = $3;
  $221 = (($219) + ($220<<2)|0);
  HEAP32[$221>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return;
 }
}
function _Lplayer_walk_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 1;
 $22 = $6;
 $23 = (($22) - 1)|0;
 $6 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 8: case 7:  {
   $33 = $3;
   $34 = ((($33)) + 192|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   HEAP32[$36>>2] = $38;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 13: case 12: case 11:  {
   $39 = $3;
   $40 = ((($39)) + 1372|0);
   $41 = $5;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = 406;
   $46 = $3;
   $47 = ((($46)) + 1804|0);
   $48 = $5;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 406;
   $53 = $3;
   $54 = ((($53)) + 44|0);
   $55 = ((($54)) + 12|0);
   HEAP8[$55>>0] = 1;
   $56 = $3;
   $57 = ((($56)) + 192|0);
   $58 = $4;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) - 1)|0;
   HEAP32[$59>>2] = $61;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 15: case 14:  {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $5;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $6;
   $68 = (($66) + ($67<<1)|0);
   HEAP16[$68>>1] = 15;
   $69 = $3;
   $70 = ((($69)) + 1804|0);
   $71 = $5;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $6;
   $75 = (($73) + ($74<<1)|0);
   HEAP16[$75>>1] = 14;
   $76 = $3;
   $77 = ((($76)) + 44|0);
   $78 = ((($77)) + 12|0);
   HEAP8[$78>>0] = 1;
   $79 = $3;
   $80 = ((($79)) + 192|0);
   $81 = $4;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) - 1)|0;
   HEAP32[$82>>2] = $84;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 24:  {
   $85 = $3;
   $86 = ((($85)) + 1372|0);
   $87 = $5;
   $88 = (($86) + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $6;
   $91 = (($89) + ($90<<1)|0);
   HEAP16[$91>>1] = 25;
   $92 = $3;
   $93 = ((($92)) + 1804|0);
   $94 = $5;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $6;
   $98 = (($96) + ($97<<1)|0);
   HEAP16[$98>>1] = 406;
   $99 = $3;
   $100 = ((($99)) + 44|0);
   $101 = ((($100)) + 11|0);
   HEAP8[$101>>0] = 1;
   $102 = $3;
   $103 = ((($102)) + 192|0);
   $104 = $4;
   $105 = (($103) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) - 1)|0;
   HEAP32[$105>>2] = $107;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 29:  {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $5;
   $111 = (($109) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $6;
   $114 = (($112) + ($113<<1)|0);
   HEAP16[$114>>1] = 30;
   $115 = $3;
   $116 = ((($115)) + 1804|0);
   $117 = $5;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $6;
   $121 = (($119) + ($120<<1)|0);
   HEAP16[$121>>1] = 406;
   $122 = $3;
   $123 = ((($122)) + 44|0);
   $124 = ((($123)) + 11|0);
   HEAP8[$124>>0] = 1;
   $125 = $3;
   $126 = ((($125)) + 192|0);
   $127 = $4;
   $128 = (($126) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) - 1)|0;
   HEAP32[$128>>2] = $130;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $131 = $3;
   $132 = ((($131)) + 200|0);
   $133 = $4;
   $134 = (($132) + ($133<<2)|0);
   HEAP32[$134>>2] = 5;
   $135 = $3;
   $136 = ((($135)) + 1372|0);
   $137 = $5;
   $138 = (($136) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $6;
   $141 = (($140) - 1)|0;
   $142 = (($139) + ($141<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143 << 16 >> 16;
   switch ($144|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $145 = $3;
    $146 = ((($145)) + 1372|0);
    $147 = $5;
    $148 = (($146) + ($147<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $6;
    $151 = (($149) + ($150<<1)|0);
    HEAP16[$151>>1] = 44;
    $152 = $3;
    $153 = ((($152)) + 1804|0);
    $154 = $5;
    $155 = (($153) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $6;
    $158 = (($156) + ($157<<1)|0);
    HEAP16[$158>>1] = 406;
    $159 = $3;
    $160 = ((($159)) + 1372|0);
    $161 = $5;
    $162 = (($161) + 1)|0;
    $163 = (($160) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $6;
    $166 = (($165) - 2)|0;
    $167 = (($164) + ($166<<1)|0);
    $168 = HEAP16[$167>>1]|0;
    $169 = $168 << 16 >> 16;
    $170 = ($169|0)==(11);
    if ($170) {
     $171 = $3;
     $172 = ((($171)) + 1372|0);
     $173 = $5;
     $174 = (($173) + 1)|0;
     $175 = (($172) + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $6;
     $178 = (($177) - 2)|0;
     $179 = (($176) + ($178<<1)|0);
     HEAP16[$179>>1] = 12;
    }
    $180 = $3;
    $181 = ((($180)) + 1372|0);
    $182 = $5;
    $183 = (($182) - 1)|0;
    $184 = (($181) + ($183<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $6;
    $187 = (($186) - 2)|0;
    $188 = (($185) + ($187<<1)|0);
    $189 = HEAP16[$188>>1]|0;
    $190 = $189 << 16 >> 16;
    $191 = ($190|0)==(11);
    if ($191) {
     $192 = $3;
     $193 = ((($192)) + 1372|0);
     $194 = $5;
     $195 = (($194) - 1)|0;
     $196 = (($193) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = $6;
     $199 = (($198) - 2)|0;
     $200 = (($197) + ($199<<1)|0);
     HEAP16[$200>>1] = 13;
    }
    $201 = $3;
    $202 = ((($201)) + 44|0);
    $203 = ((($202)) + 30|0);
    HEAP8[$203>>0] = 1;
    $204 = $3;
    $205 = ((($204)) + 44|0);
    $206 = ((($205)) + 7|0);
    HEAP8[$206>>0] = 1;
    $207 = $3;
    $208 = ((($207)) + 192|0);
    $209 = $4;
    $210 = (($208) + ($209<<2)|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) - 1)|0;
    HEAP32[$210>>2] = $212;
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
    break;
   }
   case 13: case 12: case 11:  {
    $213 = $3;
    $214 = ((($213)) + 1372|0);
    $215 = $5;
    $216 = (($214) + ($215<<2)|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $6;
    $219 = (($217) + ($218<<1)|0);
    HEAP16[$219>>1] = 44;
    $220 = $3;
    $221 = ((($220)) + 1804|0);
    $222 = $5;
    $223 = (($221) + ($222<<2)|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $6;
    $226 = (($224) + ($225<<1)|0);
    HEAP16[$226>>1] = 406;
    $227 = $3;
    $228 = ((($227)) + 1372|0);
    $229 = $5;
    $230 = (($228) + ($229<<2)|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $6;
    $233 = (($232) - 1)|0;
    $234 = (($231) + ($233<<1)|0);
    HEAP16[$234>>1] = 43;
    $235 = $3;
    $236 = ((($235)) + 1804|0);
    $237 = $5;
    $238 = (($236) + ($237<<2)|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $6;
    $241 = (($240) - 1)|0;
    $242 = (($239) + ($241<<1)|0);
    HEAP16[$242>>1] = 36;
    $243 = $3;
    $244 = ((($243)) + 44|0);
    $245 = ((($244)) + 7|0);
    HEAP8[$245>>0] = 1;
    $246 = $3;
    $247 = ((($246)) + 192|0);
    $248 = $4;
    $249 = (($247) + ($248<<2)|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) - 1)|0;
    HEAP32[$249>>2] = $251;
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
    break;
   }
   default: {
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
   }
   }
   break;
  }
  case 150: case 149:  {
   $252 = $3;
   $253 = ((($252)) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($254) - 1)|0;
   HEAP32[$253>>2] = $255;
   $256 = $3;
   $257 = ((($256)) + 300|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $3;
   $260 = ((($259)) + 12|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (($261) + ($258))|0;
   HEAP32[$260>>2] = $262;
   $263 = $3;
   $264 = ((($263)) + 1372|0);
   $265 = $5;
   $266 = (($264) + ($265<<2)|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = $6;
   $269 = (($267) + ($268<<1)|0);
   HEAP16[$269>>1] = 159;
   $270 = $3;
   $271 = ((($270)) + 1804|0);
   $272 = $5;
   $273 = (($271) + ($272<<2)|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $6;
   $276 = (($274) + ($275<<1)|0);
   HEAP16[$276>>1] = 406;
   $277 = $3;
   $278 = ((($277)) + 44|0);
   $279 = ((($278)) + 5|0);
   HEAP8[$279>>0] = 1;
   $280 = $3;
   $281 = ((($280)) + 192|0);
   $282 = $4;
   $283 = (($281) + ($282<<2)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (($284) - 1)|0;
   HEAP32[$283>>2] = $285;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 161: case 160:  {
   $286 = $3;
   $287 = ((($286)) + 8|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) - 3)|0;
   HEAP32[$287>>2] = $289;
   $290 = $3;
   $291 = ((($290)) + 276|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $3;
   $294 = ((($293)) + 12|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($295) + ($292))|0;
   HEAP32[$294>>2] = $296;
   $297 = $3;
   $298 = ((($297)) + 1372|0);
   $299 = $5;
   $300 = (($298) + ($299<<2)|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $6;
   $303 = (($301) + ($302<<1)|0);
   HEAP16[$303>>1] = 170;
   $304 = $3;
   $305 = ((($304)) + 1804|0);
   $306 = $5;
   $307 = (($305) + ($306<<2)|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $6;
   $310 = (($308) + ($309<<1)|0);
   HEAP16[$310>>1] = 406;
   $311 = $3;
   $312 = ((($311)) + 44|0);
   $313 = ((($312)) + 5|0);
   HEAP8[$313>>0] = 1;
   $314 = $3;
   $315 = ((($314)) + 192|0);
   $316 = $4;
   $317 = (($315) + ($316<<2)|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($318) - 1)|0;
   HEAP32[$317>>2] = $319;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 228:  {
   $320 = $3;
   $321 = ((($320)) + 280|0);
   $322 = $4;
   $323 = (($321) + ($322<<2)|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = ($324|0)<(9999);
   if ($325) {
    $326 = $3;
    $327 = ((($326)) + 280|0);
    $328 = $4;
    $329 = (($327) + ($328<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + 1)|0;
    HEAP32[$329>>2] = $331;
   }
   $332 = $3;
   $333 = ((($332)) + 288|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = $3;
   $336 = ((($335)) + 12|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = (($337) + ($334))|0;
   HEAP32[$336>>2] = $338;
   $339 = $3;
   $340 = ((($339)) + 1372|0);
   $341 = $5;
   $342 = (($340) + ($341<<2)|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = $6;
   $345 = (($343) + ($344<<1)|0);
   HEAP16[$345>>1] = 229;
   $346 = $3;
   $347 = ((($346)) + 1804|0);
   $348 = $5;
   $349 = (($347) + ($348<<2)|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = $6;
   $352 = (($350) + ($351<<1)|0);
   HEAP16[$352>>1] = 406;
   $353 = $3;
   $354 = ((($353)) + 44|0);
   $355 = ((($354)) + 5|0);
   HEAP8[$355>>0] = 1;
   $356 = $3;
   $357 = ((($356)) + 192|0);
   $358 = $4;
   $359 = (($357) + ($358<<2)|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = (($360) - 1)|0;
   HEAP32[$359>>2] = $361;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 234:  {
   $7 = 1;
   label = 28;
   break;
  }
  case 235:  {
   $7 = 2;
   label = 28;
   break;
  }
  case 236:  {
   $7 = 4;
   label = 28;
   break;
  }
  case 237:  {
   $7 = 8;
   label = 28;
   break;
  }
  case 238:  {
   $7 = 16;
   label = 28;
   break;
  }
  case 239:  {
   $7 = 32;
   label = 28;
   break;
  }
  case 240:  {
   $7 = 64;
   label = 28;
   break;
  }
  case 241:  {
   $7 = 128;
   label = 28;
   break;
  }
  case 250: case 242:  {
   $7 = 1;
   label = 37;
   break;
  }
  case 251: case 243:  {
   $7 = 2;
   label = 37;
   break;
  }
  case 252: case 244:  {
   $7 = 4;
   label = 37;
   break;
  }
  case 253: case 245:  {
   $7 = 8;
   label = 37;
   break;
  }
  case 254: case 246:  {
   $7 = 16;
   label = 37;
   break;
  }
  case 255: case 247:  {
   $7 = 32;
   label = 37;
   break;
  }
  case 256: case 248:  {
   $7 = 64;
   label = 37;
   break;
  }
  case 257: case 249:  {
   $7 = 128;
   label = 37;
   break;
  }
  case 258:  {
   $445 = $3;
   $446 = ((($445)) + 200|0);
   $447 = $4;
   $448 = (($446) + ($447<<2)|0);
   HEAP32[$448>>2] = 5;
   $449 = $3;
   $450 = ((($449)) + 1372|0);
   $451 = $5;
   $452 = (($450) + ($451<<2)|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = $6;
   $455 = (($454) - 1)|0;
   $456 = (($453) + ($455<<1)|0);
   $457 = HEAP16[$456>>1]|0;
   $458 = $457 << 16 >> 16;
   switch ($458|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $459 = $3;
    $460 = ((($459)) + 1372|0);
    $461 = $5;
    $462 = (($460) + ($461<<2)|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = $6;
    $465 = (($463) + ($464<<1)|0);
    HEAP16[$465>>1] = 260;
    $466 = $3;
    $467 = ((($466)) + 1804|0);
    $468 = $5;
    $469 = (($467) + ($468<<2)|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = $6;
    $472 = (($470) + ($471<<1)|0);
    HEAP16[$472>>1] = 406;
    $473 = $3;
    $474 = ((($473)) + 1372|0);
    $475 = $5;
    $476 = (($475) + 1)|0;
    $477 = (($474) + ($476<<2)|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = $6;
    $480 = (($479) - 2)|0;
    $481 = (($478) + ($480<<1)|0);
    $482 = HEAP16[$481>>1]|0;
    $483 = $482 << 16 >> 16;
    $484 = ($483|0)==(11);
    if ($484) {
     $485 = $3;
     $486 = ((($485)) + 1372|0);
     $487 = $5;
     $488 = (($487) + 1)|0;
     $489 = (($486) + ($488<<2)|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = $6;
     $492 = (($491) - 2)|0;
     $493 = (($490) + ($492<<1)|0);
     HEAP16[$493>>1] = 12;
    }
    $494 = $3;
    $495 = ((($494)) + 1372|0);
    $496 = $5;
    $497 = (($496) - 1)|0;
    $498 = (($495) + ($497<<2)|0);
    $499 = HEAP32[$498>>2]|0;
    $500 = $6;
    $501 = (($500) - 2)|0;
    $502 = (($499) + ($501<<1)|0);
    $503 = HEAP16[$502>>1]|0;
    $504 = $503 << 16 >> 16;
    $505 = ($504|0)==(11);
    if ($505) {
     $506 = $3;
     $507 = ((($506)) + 1372|0);
     $508 = $5;
     $509 = (($508) - 1)|0;
     $510 = (($507) + ($509<<2)|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $6;
     $513 = (($512) - 2)|0;
     $514 = (($511) + ($513<<1)|0);
     HEAP16[$514>>1] = 13;
    }
    $515 = $3;
    $516 = ((($515)) + 44|0);
    $517 = ((($516)) + 30|0);
    HEAP8[$517>>0] = 1;
    $518 = $3;
    $519 = ((($518)) + 44|0);
    $520 = ((($519)) + 7|0);
    HEAP8[$520>>0] = 1;
    $521 = $3;
    $522 = ((($521)) + 192|0);
    $523 = $4;
    $524 = (($522) + ($523<<2)|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = (($525) - 1)|0;
    HEAP32[$524>>2] = $526;
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
    break;
   }
   case 13: case 12: case 11:  {
    $527 = $3;
    $528 = ((($527)) + 1372|0);
    $529 = $5;
    $530 = (($528) + ($529<<2)|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = $6;
    $533 = (($531) + ($532<<1)|0);
    HEAP16[$533>>1] = 260;
    $534 = $3;
    $535 = ((($534)) + 1804|0);
    $536 = $5;
    $537 = (($535) + ($536<<2)|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = $6;
    $540 = (($538) + ($539<<1)|0);
    HEAP16[$540>>1] = 406;
    $541 = $3;
    $542 = ((($541)) + 1372|0);
    $543 = $5;
    $544 = (($542) + ($543<<2)|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $6;
    $547 = (($546) - 1)|0;
    $548 = (($545) + ($547<<1)|0);
    HEAP16[$548>>1] = 259;
    $549 = $3;
    $550 = ((($549)) + 1804|0);
    $551 = $5;
    $552 = (($550) + ($551<<2)|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $6;
    $555 = (($554) - 1)|0;
    $556 = (($553) + ($555<<1)|0);
    HEAP16[$556>>1] = 258;
    $557 = $3;
    $558 = ((($557)) + 44|0);
    $559 = ((($558)) + 7|0);
    HEAP8[$559>>0] = 1;
    $560 = $3;
    $561 = ((($560)) + 192|0);
    $562 = $4;
    $563 = (($561) + ($562<<2)|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = (($564) - 1)|0;
    HEAP32[$563>>2] = $565;
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
    break;
   }
   default: {
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
   }
   }
   break;
  }
  case 286:  {
   $566 = $3;
   $567 = ((($566)) + 200|0);
   $568 = $4;
   $569 = (($567) + ($568<<2)|0);
   HEAP32[$569>>2] = 0;
   $570 = $3;
   $571 = ((($570)) + 372|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = $3;
   $574 = ((($573)) + 360|0);
   HEAP32[$574>>2] = $572;
   $575 = $5;
   $576 = $3;
   $577 = ((($576)) + 364|0);
   HEAP32[$577>>2] = $575;
   $578 = $6;
   $579 = $3;
   $580 = ((($579)) + 368|0);
   HEAP32[$580>>2] = $578;
   $581 = $3;
   $582 = ((($581)) + 44|0);
   $583 = ((($582)) + 9|0);
   HEAP8[$583>>0] = 1;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 288:  {
   $584 = $3;
   $585 = ((($584)) + 200|0);
   $586 = $4;
   $587 = (($585) + ($586<<2)|0);
   HEAP32[$587>>2] = 0;
   $588 = $3;
   $589 = ((($588)) + 268|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = $3;
   $592 = ((($591)) + 256|0);
   HEAP32[$592>>2] = $590;
   $593 = $3;
   $594 = ((($593)) + 264|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = ($595|0)!=(0);
   $597 = $596 ^ 1;
   $598 = $597&1;
   $599 = $3;
   $600 = ((($599)) + 264|0);
   HEAP32[$600>>2] = $598;
   $601 = $3;
   $602 = ((($601)) + 44|0);
   $603 = ((($602)) + 9|0);
   HEAP8[$603>>0] = 1;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 303:  {
   $604 = $3;
   $605 = ((($604)) + 328|0);
   $606 = HEAP32[$605>>2]|0;
   $607 = $3;
   $608 = ((($607)) + 320|0);
   HEAP32[$608>>2] = $606;
   $609 = $3;
   $610 = ((($609)) + 324|0);
   $611 = HEAP32[$610>>2]|0;
   $612 = $3;
   $613 = ((($612)) + 12|0);
   $614 = HEAP32[$613>>2]|0;
   $615 = (($614) + ($611))|0;
   HEAP32[$613>>2] = $615;
   $616 = $3;
   $617 = ((($616)) + 1372|0);
   $618 = $5;
   $619 = (($617) + ($618<<2)|0);
   $620 = HEAP32[$619>>2]|0;
   $621 = $6;
   $622 = (($620) + ($621<<1)|0);
   HEAP16[$622>>1] = 10;
   $623 = $3;
   $624 = ((($623)) + 1804|0);
   $625 = $5;
   $626 = (($624) + ($625<<2)|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = $6;
   $629 = (($627) + ($628<<1)|0);
   HEAP16[$629>>1] = 406;
   $630 = $3;
   $631 = ((($630)) + 44|0);
   $632 = ((($631)) + 5|0);
   HEAP8[$632>>0] = 1;
   $633 = $3;
   $634 = ((($633)) + 192|0);
   $635 = $4;
   $636 = (($634) + ($635<<2)|0);
   $637 = HEAP32[$636>>2]|0;
   $638 = (($637) - 1)|0;
   HEAP32[$636>>2] = $638;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 304:  {
   $639 = $3;
   $640 = ((($639)) + 340|0);
   $641 = HEAP32[$640>>2]|0;
   $642 = $3;
   $643 = ((($642)) + 332|0);
   HEAP32[$643>>2] = $641;
   $644 = $3;
   $645 = ((($644)) + 336|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = $3;
   $648 = ((($647)) + 12|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = (($649) + ($646))|0;
   HEAP32[$648>>2] = $650;
   $651 = $3;
   $652 = ((($651)) + 1372|0);
   $653 = $5;
   $654 = (($652) + ($653<<2)|0);
   $655 = HEAP32[$654>>2]|0;
   $656 = $6;
   $657 = (($655) + ($656<<1)|0);
   HEAP16[$657>>1] = 10;
   $658 = $3;
   $659 = ((($658)) + 1804|0);
   $660 = $5;
   $661 = (($659) + ($660<<2)|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = $6;
   $664 = (($662) + ($663<<1)|0);
   HEAP16[$664>>1] = 406;
   $665 = $3;
   $666 = ((($665)) + 44|0);
   $667 = ((($666)) + 5|0);
   HEAP8[$667>>0] = 1;
   $668 = $3;
   $669 = ((($668)) + 192|0);
   $670 = $4;
   $671 = (($669) + ($670<<2)|0);
   $672 = HEAP32[$671>>2]|0;
   $673 = (($672) - 1)|0;
   HEAP32[$671>>2] = $673;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 325: case 329:  {
   $7 = 0;
   label = 56;
   break;
  }
  case 326:  {
   $7 = 1;
   label = 56;
   break;
  }
  case 327:  {
   $7 = 2;
   label = 56;
   break;
  }
  case 328:  {
   $7 = 3;
   label = 56;
   break;
  }
  case 330:  {
   $689 = $3;
   $690 = ((($689)) + 200|0);
   $691 = $4;
   $692 = (($690) + ($691<<2)|0);
   HEAP32[$692>>2] = 0;
   $693 = $3;
   $694 = ((($693)) + 376|0);
   HEAP32[$694>>2] = 0;
   $695 = $3;
   $696 = ((($695)) + 44|0);
   $697 = ((($696)) + 9|0);
   HEAP8[$697>>0] = 1;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  case 334: case 333: case 332:  {
   $698 = $3;
   $699 = ((($698)) + 16|0);
   $700 = $4;
   $701 = (($699) + ($700<<2)|0);
   HEAP32[$701>>2] = 1;
   $702 = $3;
   $703 = ((($702)) + 16|0);
   $704 = HEAP32[$703>>2]|0;
   $705 = ($704|0)>(0);
   if ($705) {
    $706 = $3;
    $707 = ((($706)) + 16|0);
    $708 = ((($707)) + 4|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = ($709|0)>(0);
    if ($710) {
     $711 = $3;
     $712 = ((($711)) + 4|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = $3;
     $715 = ((($714)) + 304|0);
     $716 = HEAP32[$715>>2]|0;
     $717 = Math_imul($713, $716)|0;
     $718 = (($717|0) / 100)&-1;
     $719 = $3;
     $720 = ((($719)) + 12|0);
     $721 = HEAP32[$720>>2]|0;
     $722 = (($721) + ($718))|0;
     HEAP32[$720>>2] = $722;
    }
   }
   $723 = $3;
   $724 = ((($723)) + 44|0);
   HEAP8[$724>>0] = 1;
   $725 = $3;
   $726 = ((($725)) + 192|0);
   $727 = $4;
   $728 = (($726) + ($727<<2)|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = (($729) - 1)|0;
   HEAP32[$728>>2] = $730;
   $2 = 1;
   $731 = $2;
   STACKTOP = sp;return ($731|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $362 = $7;
  $363 = $3;
  $364 = ((($363)) + 308|0);
  $365 = $4;
  $366 = (($364) + ($365<<2)|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $367 | $362;
  HEAP32[$366>>2] = $368;
  $369 = $3;
  $370 = ((($369)) + 316|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = $3;
  $373 = ((($372)) + 12|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (($374) + ($371))|0;
  HEAP32[$373>>2] = $375;
  $376 = $3;
  $377 = ((($376)) + 1372|0);
  $378 = $5;
  $379 = (($377) + ($378<<2)|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $6;
  $382 = (($380) + ($381<<1)|0);
  HEAP16[$382>>1] = 10;
  $383 = $3;
  $384 = ((($383)) + 1804|0);
  $385 = $5;
  $386 = (($384) + ($385<<2)|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = $6;
  $389 = (($387) + ($388<<1)|0);
  HEAP16[$389>>1] = 406;
  $390 = $3;
  $391 = ((($390)) + 44|0);
  $392 = ((($391)) + 5|0);
  HEAP8[$392>>0] = 1;
  $393 = $3;
  $394 = ((($393)) + 192|0);
  $395 = $4;
  $396 = (($394) + ($395<<2)|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($397) - 1)|0;
  HEAP32[$396>>2] = $398;
  $2 = 1;
  $731 = $2;
  STACKTOP = sp;return ($731|0);
 }
 else if ((label|0) == 37) {
  $399 = $3;
  $400 = ((($399)) + 308|0);
  $401 = $4;
  $402 = (($400) + ($401<<2)|0);
  $403 = HEAP32[$402>>2]|0;
  $404 = $7;
  $405 = $403 & $404;
  $406 = ($405|0)!=(0);
  if ($406) {
   $407 = $3;
   $408 = ((($407)) + 1372|0);
   $409 = $5;
   $410 = (($408) + ($409<<2)|0);
   $411 = HEAP32[$410>>2]|0;
   $412 = $6;
   $413 = (($412) - 1)|0;
   $414 = (($411) + ($413<<1)|0);
   $415 = HEAP16[$414>>1]|0;
   $416 = $415 << 16 >> 16;
   $417 = (11821 + ($416)|0);
   $418 = HEAP8[$417>>0]|0;
   $419 = ($418<<24>>24)!=(0);
   if ($419) {
    $420 = $3;
    $421 = ((($420)) + 1372|0);
    $422 = $5;
    $423 = (($421) + ($422<<2)|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $6;
    $426 = (($425) - 1)|0;
    $427 = (($424) + ($426<<1)|0);
    HEAP16[$427>>1] = 406;
    $428 = $3;
    $429 = ((($428)) + 1804|0);
    $430 = $5;
    $431 = (($429) + ($430<<2)|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $6;
    $434 = (($433) - 1)|0;
    $435 = (($432) + ($434<<1)|0);
    HEAP16[$435>>1] = 406;
    $436 = $3;
    $437 = ((($436)) + 44|0);
    $438 = ((($437)) + 10|0);
    HEAP8[$438>>0] = 1;
    $439 = $3;
    $440 = ((($439)) + 192|0);
    $441 = $4;
    $442 = (($440) + ($441<<2)|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = (($443) - 2)|0;
    HEAP32[$442>>2] = $444;
    $2 = 1;
    $731 = $2;
    STACKTOP = sp;return ($731|0);
   }
  }
 }
 else if ((label|0) == 56) {
  $674 = $3;
  $675 = ((($674)) + 200|0);
  $676 = $4;
  $677 = (($675) + ($676<<2)|0);
  HEAP32[$677>>2] = 0;
  $678 = $7;
  $679 = $3;
  $680 = ((($679)) + 380|0);
  HEAP32[$680>>2] = $678;
  $681 = $3;
  $682 = ((($681)) + 384|0);
  $683 = HEAP32[$682>>2]|0;
  $684 = $3;
  $685 = ((($684)) + 376|0);
  HEAP32[$685>>2] = $683;
  $686 = $3;
  $687 = ((($686)) + 44|0);
  $688 = ((($687)) + 9|0);
  HEAP8[$688>>0] = 1;
  $2 = 1;
  $731 = $2;
  STACKTOP = sp;return ($731|0);
 }
 $2 = 0;
 $731 = $2;
 STACKTOP = sp;return ($731|0);
}
function _Lplayer_walk_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 2;
 $22 = $5;
 $23 = (($22) + 1)|0;
 $5 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 8: case 7:  {
   $33 = $3;
   $34 = ((($33)) + 184|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$36>>2] = $38;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 13: case 12: case 11:  {
   $39 = $3;
   $40 = ((($39)) + 1372|0);
   $41 = $5;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = 406;
   $46 = $3;
   $47 = ((($46)) + 1804|0);
   $48 = $5;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 406;
   $53 = $3;
   $54 = ((($53)) + 44|0);
   $55 = ((($54)) + 12|0);
   HEAP8[$55>>0] = 1;
   $56 = $3;
   $57 = ((($56)) + 184|0);
   $58 = $4;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 15: case 14:  {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $5;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $6;
   $68 = (($66) + ($67<<1)|0);
   HEAP16[$68>>1] = 15;
   $69 = $3;
   $70 = ((($69)) + 1804|0);
   $71 = $5;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $6;
   $75 = (($73) + ($74<<1)|0);
   HEAP16[$75>>1] = 14;
   $76 = $3;
   $77 = ((($76)) + 44|0);
   $78 = ((($77)) + 12|0);
   HEAP8[$78>>0] = 1;
   $79 = $3;
   $80 = ((($79)) + 184|0);
   $81 = $4;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 1)|0;
   HEAP32[$82>>2] = $84;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 24:  {
   $85 = $3;
   $86 = ((($85)) + 1372|0);
   $87 = $5;
   $88 = (($86) + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $6;
   $91 = (($89) + ($90<<1)|0);
   HEAP16[$91>>1] = 26;
   $92 = $3;
   $93 = ((($92)) + 1804|0);
   $94 = $5;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $6;
   $98 = (($96) + ($97<<1)|0);
   HEAP16[$98>>1] = 406;
   $99 = $3;
   $100 = ((($99)) + 44|0);
   $101 = ((($100)) + 11|0);
   HEAP8[$101>>0] = 1;
   $102 = $3;
   $103 = ((($102)) + 184|0);
   $104 = $4;
   $105 = (($103) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$105>>2] = $107;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 29:  {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $5;
   $111 = (($109) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $6;
   $114 = (($112) + ($113<<1)|0);
   HEAP16[$114>>1] = 31;
   $115 = $3;
   $116 = ((($115)) + 1804|0);
   $117 = $5;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $6;
   $121 = (($119) + ($120<<1)|0);
   HEAP16[$121>>1] = 406;
   $122 = $3;
   $123 = ((($122)) + 44|0);
   $124 = ((($123)) + 11|0);
   HEAP8[$124>>0] = 1;
   $125 = $3;
   $126 = ((($125)) + 184|0);
   $127 = $4;
   $128 = (($126) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + 1)|0;
   HEAP32[$128>>2] = $130;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $131 = $3;
   $132 = ((($131)) + 200|0);
   $133 = $4;
   $134 = (($132) + ($133<<2)|0);
   HEAP32[$134>>2] = 6;
   $135 = $3;
   $136 = ((($135)) + 1372|0);
   $137 = $5;
   $138 = (($137) + 1)|0;
   $139 = (($136) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143 << 16 >> 16;
   switch ($144|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $145 = $3;
    $146 = ((($145)) + 1372|0);
    $147 = $5;
    $148 = (($146) + ($147<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $6;
    $151 = (($149) + ($150<<1)|0);
    HEAP16[$151>>1] = 48;
    $152 = $3;
    $153 = ((($152)) + 1804|0);
    $154 = $5;
    $155 = (($153) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $6;
    $158 = (($156) + ($157<<1)|0);
    HEAP16[$158>>1] = 406;
    $159 = $3;
    $160 = ((($159)) + 1372|0);
    $161 = $5;
    $162 = (($161) + 2)|0;
    $163 = (($160) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $6;
    $166 = (($165) - 1)|0;
    $167 = (($164) + ($166<<1)|0);
    $168 = HEAP16[$167>>1]|0;
    $169 = $168 << 16 >> 16;
    $170 = ($169|0)==(11);
    if ($170) {
     $171 = $3;
     $172 = ((($171)) + 1372|0);
     $173 = $5;
     $174 = (($173) + 2)|0;
     $175 = (($172) + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $6;
     $178 = (($177) - 1)|0;
     $179 = (($176) + ($178<<1)|0);
     HEAP16[$179>>1] = 12;
    }
    $180 = $3;
    $181 = ((($180)) + 1372|0);
    $182 = $5;
    $183 = (($181) + ($182<<2)|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $6;
    $186 = (($185) - 1)|0;
    $187 = (($184) + ($186<<1)|0);
    $188 = HEAP16[$187>>1]|0;
    $189 = $188 << 16 >> 16;
    $190 = ($189|0)==(11);
    if ($190) {
     $191 = $3;
     $192 = ((($191)) + 1372|0);
     $193 = $5;
     $194 = (($192) + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $6;
     $197 = (($196) - 1)|0;
     $198 = (($195) + ($197<<1)|0);
     HEAP16[$198>>1] = 13;
    }
    $199 = $3;
    $200 = ((($199)) + 44|0);
    $201 = ((($200)) + 30|0);
    HEAP8[$201>>0] = 1;
    $202 = $3;
    $203 = ((($202)) + 44|0);
    $204 = ((($203)) + 7|0);
    HEAP8[$204>>0] = 1;
    $205 = $3;
    $206 = ((($205)) + 184|0);
    $207 = $4;
    $208 = (($206) + ($207<<2)|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + 1)|0;
    HEAP32[$208>>2] = $210;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $211 = $3;
    $212 = ((($211)) + 1372|0);
    $213 = $5;
    $214 = (($212) + ($213<<2)|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $6;
    $217 = (($215) + ($216<<1)|0);
    HEAP16[$217>>1] = 48;
    $218 = $3;
    $219 = ((($218)) + 1804|0);
    $220 = $5;
    $221 = (($219) + ($220<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $6;
    $224 = (($222) + ($223<<1)|0);
    HEAP16[$224>>1] = 406;
    $225 = $3;
    $226 = ((($225)) + 1372|0);
    $227 = $5;
    $228 = (($227) + 1)|0;
    $229 = (($226) + ($228<<2)|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $6;
    $232 = (($230) + ($231<<1)|0);
    HEAP16[$232>>1] = 47;
    $233 = $3;
    $234 = ((($233)) + 1804|0);
    $235 = $5;
    $236 = (($235) + 1)|0;
    $237 = (($234) + ($236<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $6;
    $240 = (($238) + ($239<<1)|0);
    HEAP16[$240>>1] = 38;
    $241 = $3;
    $242 = ((($241)) + 44|0);
    $243 = ((($242)) + 7|0);
    HEAP8[$243>>0] = 1;
    $244 = $3;
    $245 = ((($244)) + 184|0);
    $246 = $4;
    $247 = (($245) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + 1)|0;
    HEAP32[$247>>2] = $249;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 150: case 149:  {
   $250 = $3;
   $251 = ((($250)) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($252) - 1)|0;
   HEAP32[$251>>2] = $253;
   $254 = $3;
   $255 = ((($254)) + 300|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $3;
   $258 = ((($257)) + 12|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($259) + ($256))|0;
   HEAP32[$258>>2] = $260;
   $261 = $3;
   $262 = ((($261)) + 1372|0);
   $263 = $5;
   $264 = (($262) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $6;
   $267 = (($265) + ($266<<1)|0);
   HEAP16[$267>>1] = 159;
   $268 = $3;
   $269 = ((($268)) + 1804|0);
   $270 = $5;
   $271 = (($269) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $6;
   $274 = (($272) + ($273<<1)|0);
   HEAP16[$274>>1] = 406;
   $275 = $3;
   $276 = ((($275)) + 44|0);
   $277 = ((($276)) + 5|0);
   HEAP8[$277>>0] = 1;
   $278 = $3;
   $279 = ((($278)) + 184|0);
   $280 = $4;
   $281 = (($279) + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + 1)|0;
   HEAP32[$281>>2] = $283;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 161: case 160:  {
   $284 = $3;
   $285 = ((($284)) + 8|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) - 3)|0;
   HEAP32[$285>>2] = $287;
   $288 = $3;
   $289 = ((($288)) + 276|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $3;
   $292 = ((($291)) + 12|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + ($290))|0;
   HEAP32[$292>>2] = $294;
   $295 = $3;
   $296 = ((($295)) + 1372|0);
   $297 = $5;
   $298 = (($296) + ($297<<2)|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $6;
   $301 = (($299) + ($300<<1)|0);
   HEAP16[$301>>1] = 170;
   $302 = $3;
   $303 = ((($302)) + 1804|0);
   $304 = $5;
   $305 = (($303) + ($304<<2)|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = $6;
   $308 = (($306) + ($307<<1)|0);
   HEAP16[$308>>1] = 406;
   $309 = $3;
   $310 = ((($309)) + 44|0);
   $311 = ((($310)) + 5|0);
   HEAP8[$311>>0] = 1;
   $312 = $3;
   $313 = ((($312)) + 184|0);
   $314 = $4;
   $315 = (($313) + ($314<<2)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) + 1)|0;
   HEAP32[$315>>2] = $317;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 172:  {
   $318 = $3;
   $319 = ((($318)) + 200|0);
   $320 = $4;
   $321 = (($319) + ($320<<2)|0);
   HEAP32[$321>>2] = 6;
   $322 = $3;
   $323 = ((($322)) + 1372|0);
   $324 = $5;
   $325 = (($324) + 1)|0;
   $326 = (($323) + ($325<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $6;
   $329 = (($327) + ($328<<1)|0);
   $330 = HEAP16[$329>>1]|0;
   $331 = $330 << 16 >> 16;
   switch ($331|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $332 = $3;
    $333 = ((($332)) + 1372|0);
    $334 = $5;
    $335 = (($333) + ($334<<2)|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $6;
    $338 = (($336) + ($337<<1)|0);
    HEAP16[$338>>1] = 178;
    $339 = $3;
    $340 = ((($339)) + 1804|0);
    $341 = $5;
    $342 = (($340) + ($341<<2)|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = $6;
    $345 = (($343) + ($344<<1)|0);
    HEAP16[$345>>1] = 406;
    $346 = $3;
    $347 = ((($346)) + 1372|0);
    $348 = $5;
    $349 = (($348) + 2)|0;
    $350 = (($347) + ($349<<2)|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = $6;
    $353 = (($352) - 1)|0;
    $354 = (($351) + ($353<<1)|0);
    $355 = HEAP16[$354>>1]|0;
    $356 = $355 << 16 >> 16;
    $357 = ($356|0)==(11);
    if ($357) {
     $358 = $3;
     $359 = ((($358)) + 1372|0);
     $360 = $5;
     $361 = (($360) + 2)|0;
     $362 = (($359) + ($361<<2)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $6;
     $365 = (($364) - 1)|0;
     $366 = (($363) + ($365<<1)|0);
     HEAP16[$366>>1] = 12;
    }
    $367 = $3;
    $368 = ((($367)) + 1372|0);
    $369 = $5;
    $370 = (($368) + ($369<<2)|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $6;
    $373 = (($372) - 1)|0;
    $374 = (($371) + ($373<<1)|0);
    $375 = HEAP16[$374>>1]|0;
    $376 = $375 << 16 >> 16;
    $377 = ($376|0)==(11);
    if ($377) {
     $378 = $3;
     $379 = ((($378)) + 1372|0);
     $380 = $5;
     $381 = (($379) + ($380<<2)|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = $6;
     $384 = (($383) - 1)|0;
     $385 = (($382) + ($384<<1)|0);
     HEAP16[$385>>1] = 13;
    }
    $386 = $3;
    $387 = ((($386)) + 44|0);
    $388 = ((($387)) + 30|0);
    HEAP8[$388>>0] = 1;
    $389 = $3;
    $390 = ((($389)) + 44|0);
    $391 = ((($390)) + 6|0);
    HEAP8[$391>>0] = 1;
    $392 = $3;
    $393 = ((($392)) + 184|0);
    $394 = $4;
    $395 = (($393) + ($394<<2)|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = (($396) + 1)|0;
    HEAP32[$395>>2] = $397;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $398 = $3;
    $399 = ((($398)) + 1372|0);
    $400 = $5;
    $401 = (($399) + ($400<<2)|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $6;
    $404 = (($402) + ($403<<1)|0);
    HEAP16[$404>>1] = 178;
    $405 = $3;
    $406 = ((($405)) + 1804|0);
    $407 = $5;
    $408 = (($406) + ($407<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $6;
    $411 = (($409) + ($410<<1)|0);
    HEAP16[$411>>1] = 406;
    $412 = $3;
    $413 = ((($412)) + 1372|0);
    $414 = $5;
    $415 = (($414) + 1)|0;
    $416 = (($413) + ($415<<2)|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $6;
    $419 = (($417) + ($418<<1)|0);
    HEAP16[$419>>1] = 177;
    $420 = $3;
    $421 = ((($420)) + 1804|0);
    $422 = $5;
    $423 = (($422) + 1)|0;
    $424 = (($421) + ($423<<2)|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = $6;
    $427 = (($425) + ($426<<1)|0);
    HEAP16[$427>>1] = 173;
    $428 = $3;
    $429 = ((($428)) + 44|0);
    $430 = ((($429)) + 6|0);
    HEAP8[$430>>0] = 1;
    $431 = $3;
    $432 = ((($431)) + 184|0);
    $433 = $4;
    $434 = (($432) + ($433<<2)|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = (($435) + 1)|0;
    HEAP32[$434>>2] = $436;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 181:  {
   $437 = $3;
   $438 = ((($437)) + 200|0);
   $439 = $4;
   $440 = (($438) + ($439<<2)|0);
   HEAP32[$440>>2] = 6;
   $441 = $3;
   $442 = ((($441)) + 1372|0);
   $443 = $5;
   $444 = (($443) + 1)|0;
   $445 = (($442) + ($444<<2)|0);
   $446 = HEAP32[$445>>2]|0;
   $447 = $6;
   $448 = (($446) + ($447<<1)|0);
   $449 = HEAP16[$448>>1]|0;
   $450 = $449 << 16 >> 16;
   switch ($450|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $451 = $3;
    $452 = ((($451)) + 1372|0);
    $453 = $5;
    $454 = (($452) + ($453<<2)|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = $6;
    $457 = (($455) + ($456<<1)|0);
    HEAP16[$457>>1] = 187;
    $458 = $3;
    $459 = ((($458)) + 1804|0);
    $460 = $5;
    $461 = (($459) + ($460<<2)|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = $6;
    $464 = (($462) + ($463<<1)|0);
    HEAP16[$464>>1] = 406;
    $465 = $3;
    $466 = ((($465)) + 1372|0);
    $467 = $5;
    $468 = (($467) + 2)|0;
    $469 = (($466) + ($468<<2)|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = $6;
    $472 = (($471) - 1)|0;
    $473 = (($470) + ($472<<1)|0);
    $474 = HEAP16[$473>>1]|0;
    $475 = $474 << 16 >> 16;
    $476 = ($475|0)==(11);
    if ($476) {
     $477 = $3;
     $478 = ((($477)) + 1372|0);
     $479 = $5;
     $480 = (($479) + 2)|0;
     $481 = (($478) + ($480<<2)|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = $6;
     $484 = (($483) - 1)|0;
     $485 = (($482) + ($484<<1)|0);
     HEAP16[$485>>1] = 12;
    }
    $486 = $3;
    $487 = ((($486)) + 1372|0);
    $488 = $5;
    $489 = (($487) + ($488<<2)|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = $6;
    $492 = (($491) - 1)|0;
    $493 = (($490) + ($492<<1)|0);
    $494 = HEAP16[$493>>1]|0;
    $495 = $494 << 16 >> 16;
    $496 = ($495|0)==(11);
    if ($496) {
     $497 = $3;
     $498 = ((($497)) + 1372|0);
     $499 = $5;
     $500 = (($498) + ($499<<2)|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $6;
     $503 = (($502) - 1)|0;
     $504 = (($501) + ($503<<1)|0);
     HEAP16[$504>>1] = 13;
    }
    $505 = $3;
    $506 = ((($505)) + 44|0);
    $507 = ((($506)) + 30|0);
    HEAP8[$507>>0] = 1;
    $508 = $3;
    $509 = ((($508)) + 44|0);
    $510 = ((($509)) + 6|0);
    HEAP8[$510>>0] = 1;
    $511 = $3;
    $512 = ((($511)) + 184|0);
    $513 = $4;
    $514 = (($512) + ($513<<2)|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = (($515) + 1)|0;
    HEAP32[$514>>2] = $516;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $517 = $3;
    $518 = ((($517)) + 1372|0);
    $519 = $5;
    $520 = (($518) + ($519<<2)|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = $6;
    $523 = (($521) + ($522<<1)|0);
    HEAP16[$523>>1] = 187;
    $524 = $3;
    $525 = ((($524)) + 1804|0);
    $526 = $5;
    $527 = (($525) + ($526<<2)|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = $6;
    $530 = (($528) + ($529<<1)|0);
    HEAP16[$530>>1] = 406;
    $531 = $3;
    $532 = ((($531)) + 1372|0);
    $533 = $5;
    $534 = (($533) + 1)|0;
    $535 = (($532) + ($534<<2)|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = $6;
    $538 = (($536) + ($537<<1)|0);
    HEAP16[$538>>1] = 186;
    $539 = $3;
    $540 = ((($539)) + 1804|0);
    $541 = $5;
    $542 = (($541) + 1)|0;
    $543 = (($540) + ($542<<2)|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $6;
    $546 = (($544) + ($545<<1)|0);
    HEAP16[$546>>1] = 182;
    $547 = $3;
    $548 = ((($547)) + 44|0);
    $549 = ((($548)) + 6|0);
    HEAP8[$549>>0] = 1;
    $550 = $3;
    $551 = ((($550)) + 184|0);
    $552 = $4;
    $553 = (($551) + ($552<<2)|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) + 1)|0;
    HEAP32[$553>>2] = $555;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 191:  {
   $556 = $3;
   $557 = ((($556)) + 200|0);
   $558 = $4;
   $559 = (($557) + ($558<<2)|0);
   HEAP32[$559>>2] = 6;
   $560 = $3;
   $561 = ((($560)) + 1372|0);
   $562 = $5;
   $563 = (($562) + 1)|0;
   $564 = (($561) + ($563<<2)|0);
   $565 = HEAP32[$564>>2]|0;
   $566 = $6;
   $567 = (($565) + ($566<<1)|0);
   $568 = HEAP16[$567>>1]|0;
   $569 = $568 << 16 >> 16;
   switch ($569|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $570 = $3;
    $571 = ((($570)) + 1372|0);
    $572 = $5;
    $573 = (($571) + ($572<<2)|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = $6;
    $576 = (($574) + ($575<<1)|0);
    HEAP16[$576>>1] = 197;
    $577 = $3;
    $578 = ((($577)) + 1804|0);
    $579 = $5;
    $580 = (($578) + ($579<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = $6;
    $583 = (($581) + ($582<<1)|0);
    HEAP16[$583>>1] = 406;
    $584 = $3;
    $585 = ((($584)) + 1372|0);
    $586 = $5;
    $587 = (($586) + 2)|0;
    $588 = (($585) + ($587<<2)|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = $6;
    $591 = (($590) - 1)|0;
    $592 = (($589) + ($591<<1)|0);
    $593 = HEAP16[$592>>1]|0;
    $594 = $593 << 16 >> 16;
    $595 = ($594|0)==(11);
    if ($595) {
     $596 = $3;
     $597 = ((($596)) + 1372|0);
     $598 = $5;
     $599 = (($598) + 2)|0;
     $600 = (($597) + ($599<<2)|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = $6;
     $603 = (($602) - 1)|0;
     $604 = (($601) + ($603<<1)|0);
     HEAP16[$604>>1] = 12;
    }
    $605 = $3;
    $606 = ((($605)) + 1372|0);
    $607 = $5;
    $608 = (($606) + ($607<<2)|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = $6;
    $611 = (($610) - 1)|0;
    $612 = (($609) + ($611<<1)|0);
    $613 = HEAP16[$612>>1]|0;
    $614 = $613 << 16 >> 16;
    $615 = ($614|0)==(11);
    if ($615) {
     $616 = $3;
     $617 = ((($616)) + 1372|0);
     $618 = $5;
     $619 = (($617) + ($618<<2)|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $6;
     $622 = (($621) - 1)|0;
     $623 = (($620) + ($622<<1)|0);
     HEAP16[$623>>1] = 13;
    }
    $624 = $3;
    $625 = ((($624)) + 44|0);
    $626 = ((($625)) + 30|0);
    HEAP8[$626>>0] = 1;
    $627 = $3;
    $628 = ((($627)) + 44|0);
    $629 = ((($628)) + 6|0);
    HEAP8[$629>>0] = 1;
    $630 = $3;
    $631 = ((($630)) + 184|0);
    $632 = $4;
    $633 = (($631) + ($632<<2)|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = (($634) + 1)|0;
    HEAP32[$633>>2] = $635;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $636 = $3;
    $637 = ((($636)) + 1372|0);
    $638 = $5;
    $639 = (($637) + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = $6;
    $642 = (($640) + ($641<<1)|0);
    HEAP16[$642>>1] = 197;
    $643 = $3;
    $644 = ((($643)) + 1804|0);
    $645 = $5;
    $646 = (($644) + ($645<<2)|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = $6;
    $649 = (($647) + ($648<<1)|0);
    HEAP16[$649>>1] = 406;
    $650 = $3;
    $651 = ((($650)) + 1372|0);
    $652 = $5;
    $653 = (($652) + 1)|0;
    $654 = (($651) + ($653<<2)|0);
    $655 = HEAP32[$654>>2]|0;
    $656 = $6;
    $657 = (($655) + ($656<<1)|0);
    HEAP16[$657>>1] = 196;
    $658 = $3;
    $659 = ((($658)) + 1804|0);
    $660 = $5;
    $661 = (($660) + 1)|0;
    $662 = (($659) + ($661<<2)|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $6;
    $665 = (($663) + ($664<<1)|0);
    HEAP16[$665>>1] = 192;
    $666 = $3;
    $667 = ((($666)) + 44|0);
    $668 = ((($667)) + 6|0);
    HEAP8[$668>>0] = 1;
    $669 = $3;
    $670 = ((($669)) + 184|0);
    $671 = $4;
    $672 = (($670) + ($671<<2)|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = (($673) + 1)|0;
    HEAP32[$672>>2] = $674;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 201:  {
   $675 = $3;
   $676 = ((($675)) + 200|0);
   $677 = $4;
   $678 = (($676) + ($677<<2)|0);
   HEAP32[$678>>2] = 6;
   $679 = $3;
   $680 = ((($679)) + 1372|0);
   $681 = $5;
   $682 = (($681) + 1)|0;
   $683 = (($680) + ($682<<2)|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = $6;
   $686 = (($684) + ($685<<1)|0);
   $687 = HEAP16[$686>>1]|0;
   $688 = $687 << 16 >> 16;
   switch ($688|0) {
   case 74: case 73:  {
    $689 = $3;
    $690 = ((($689)) + 352|0);
    $691 = HEAP32[$690>>2]|0;
    $692 = $3;
    $693 = ((($692)) + 12|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (($694) + ($691))|0;
    HEAP32[$693>>2] = $695;
    $696 = $3;
    $697 = ((($696)) + 1372|0);
    $698 = $5;
    $699 = (($697) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = $6;
    $702 = (($700) + ($701<<1)|0);
    HEAP16[$702>>1] = 213;
    $703 = $3;
    $704 = ((($703)) + 1804|0);
    $705 = $5;
    $706 = (($704) + ($705<<2)|0);
    $707 = HEAP32[$706>>2]|0;
    $708 = $6;
    $709 = (($707) + ($708<<1)|0);
    HEAP16[$709>>1] = 406;
    $710 = $3;
    $711 = ((($710)) + 1372|0);
    $712 = $5;
    $713 = (($712) + 1)|0;
    $714 = (($711) + ($713<<2)|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = $6;
    $717 = (($715) + ($716<<1)|0);
    HEAP16[$717>>1] = 212;
    $718 = $3;
    $719 = ((($718)) + 1804|0);
    $720 = $5;
    $721 = (($720) + 1)|0;
    $722 = (($719) + ($721<<2)|0);
    $723 = HEAP32[$722>>2]|0;
    $724 = $6;
    $725 = (($723) + ($724<<1)|0);
    HEAP16[$725>>1] = 204;
    $726 = $3;
    $727 = ((($726)) + 44|0);
    $728 = ((($727)) + 18|0);
    HEAP8[$728>>0] = 1;
    $729 = $3;
    $730 = ((($729)) + 44|0);
    $731 = ((($730)) + 6|0);
    HEAP8[$731>>0] = 1;
    $732 = $3;
    $733 = ((($732)) + 184|0);
    $734 = $4;
    $735 = (($733) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = (($736) + 1)|0;
    HEAP32[$735>>2] = $737;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $738 = $3;
    $739 = ((($738)) + 1372|0);
    $740 = $5;
    $741 = (($739) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = $6;
    $744 = (($742) + ($743<<1)|0);
    HEAP16[$744>>1] = 209;
    $745 = $3;
    $746 = ((($745)) + 1804|0);
    $747 = $5;
    $748 = (($746) + ($747<<2)|0);
    $749 = HEAP32[$748>>2]|0;
    $750 = $6;
    $751 = (($749) + ($750<<1)|0);
    HEAP16[$751>>1] = 406;
    $752 = $3;
    $753 = ((($752)) + 1372|0);
    $754 = $5;
    $755 = (($754) + 2)|0;
    $756 = (($753) + ($755<<2)|0);
    $757 = HEAP32[$756>>2]|0;
    $758 = $6;
    $759 = (($758) - 1)|0;
    $760 = (($757) + ($759<<1)|0);
    $761 = HEAP16[$760>>1]|0;
    $762 = $761 << 16 >> 16;
    $763 = ($762|0)==(11);
    if ($763) {
     $764 = $3;
     $765 = ((($764)) + 1372|0);
     $766 = $5;
     $767 = (($766) + 2)|0;
     $768 = (($765) + ($767<<2)|0);
     $769 = HEAP32[$768>>2]|0;
     $770 = $6;
     $771 = (($770) - 1)|0;
     $772 = (($769) + ($771<<1)|0);
     HEAP16[$772>>1] = 12;
    }
    $773 = $3;
    $774 = ((($773)) + 1372|0);
    $775 = $5;
    $776 = (($774) + ($775<<2)|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = $6;
    $779 = (($778) - 1)|0;
    $780 = (($777) + ($779<<1)|0);
    $781 = HEAP16[$780>>1]|0;
    $782 = $781 << 16 >> 16;
    $783 = ($782|0)==(11);
    if ($783) {
     $784 = $3;
     $785 = ((($784)) + 1372|0);
     $786 = $5;
     $787 = (($785) + ($786<<2)|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = $6;
     $790 = (($789) - 1)|0;
     $791 = (($788) + ($790<<1)|0);
     HEAP16[$791>>1] = 13;
    }
    $792 = $3;
    $793 = ((($792)) + 44|0);
    $794 = ((($793)) + 30|0);
    HEAP8[$794>>0] = 1;
    $795 = $3;
    $796 = ((($795)) + 44|0);
    $797 = ((($796)) + 6|0);
    HEAP8[$797>>0] = 1;
    $798 = $3;
    $799 = ((($798)) + 184|0);
    $800 = $4;
    $801 = (($799) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = (($802) + 1)|0;
    HEAP32[$801>>2] = $803;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $804 = $3;
    $805 = ((($804)) + 1372|0);
    $806 = $5;
    $807 = (($805) + ($806<<2)|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = $6;
    $810 = (($808) + ($809<<1)|0);
    HEAP16[$810>>1] = 209;
    $811 = $3;
    $812 = ((($811)) + 1804|0);
    $813 = $5;
    $814 = (($812) + ($813<<2)|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = $6;
    $817 = (($815) + ($816<<1)|0);
    HEAP16[$817>>1] = 406;
    $818 = $3;
    $819 = ((($818)) + 1372|0);
    $820 = $5;
    $821 = (($820) + 1)|0;
    $822 = (($819) + ($821<<2)|0);
    $823 = HEAP32[$822>>2]|0;
    $824 = $6;
    $825 = (($823) + ($824<<1)|0);
    HEAP16[$825>>1] = 208;
    $826 = $3;
    $827 = ((($826)) + 1804|0);
    $828 = $5;
    $829 = (($828) + 1)|0;
    $830 = (($827) + ($829<<2)|0);
    $831 = HEAP32[$830>>2]|0;
    $832 = $6;
    $833 = (($831) + ($832<<1)|0);
    HEAP16[$833>>1] = 204;
    $834 = $3;
    $835 = ((($834)) + 44|0);
    $836 = ((($835)) + 6|0);
    HEAP8[$836>>0] = 1;
    $837 = $3;
    $838 = ((($837)) + 184|0);
    $839 = $4;
    $840 = (($838) + ($839<<2)|0);
    $841 = HEAP32[$840>>2]|0;
    $842 = (($841) + 1)|0;
    HEAP32[$840>>2] = $842;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 310: case 309: case 308: case 307: case 205: case 204: case 202: case 192: case 182: case 173:  {
   $843 = $3;
   $844 = ((($843)) + 200|0);
   $845 = $4;
   $846 = (($844) + ($845<<2)|0);
   HEAP32[$846>>2] = 6;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 228:  {
   $847 = $3;
   $848 = ((($847)) + 280|0);
   $849 = $4;
   $850 = (($848) + ($849<<2)|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = ($851|0)<(9999);
   if ($852) {
    $853 = $3;
    $854 = ((($853)) + 280|0);
    $855 = $4;
    $856 = (($854) + ($855<<2)|0);
    $857 = HEAP32[$856>>2]|0;
    $858 = (($857) + 1)|0;
    HEAP32[$856>>2] = $858;
   }
   $859 = $3;
   $860 = ((($859)) + 288|0);
   $861 = HEAP32[$860>>2]|0;
   $862 = $3;
   $863 = ((($862)) + 12|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = (($864) + ($861))|0;
   HEAP32[$863>>2] = $865;
   $866 = $3;
   $867 = ((($866)) + 1372|0);
   $868 = $5;
   $869 = (($867) + ($868<<2)|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $6;
   $872 = (($870) + ($871<<1)|0);
   HEAP16[$872>>1] = 229;
   $873 = $3;
   $874 = ((($873)) + 1804|0);
   $875 = $5;
   $876 = (($874) + ($875<<2)|0);
   $877 = HEAP32[$876>>2]|0;
   $878 = $6;
   $879 = (($877) + ($878<<1)|0);
   HEAP16[$879>>1] = 406;
   $880 = $3;
   $881 = ((($880)) + 44|0);
   $882 = ((($881)) + 5|0);
   HEAP8[$882>>0] = 1;
   $883 = $3;
   $884 = ((($883)) + 184|0);
   $885 = $4;
   $886 = (($884) + ($885<<2)|0);
   $887 = HEAP32[$886>>2]|0;
   $888 = (($887) + 1)|0;
   HEAP32[$886>>2] = $888;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 234:  {
   $7 = 1;
   label = 62;
   break;
  }
  case 235:  {
   $7 = 2;
   label = 62;
   break;
  }
  case 236:  {
   $7 = 4;
   label = 62;
   break;
  }
  case 237:  {
   $7 = 8;
   label = 62;
   break;
  }
  case 238:  {
   $7 = 16;
   label = 62;
   break;
  }
  case 239:  {
   $7 = 32;
   label = 62;
   break;
  }
  case 240:  {
   $7 = 64;
   label = 62;
   break;
  }
  case 241:  {
   $7 = 128;
   label = 62;
   break;
  }
  case 250: case 242:  {
   $7 = 1;
   label = 71;
   break;
  }
  case 251: case 243:  {
   $7 = 2;
   label = 71;
   break;
  }
  case 252: case 244:  {
   $7 = 4;
   label = 71;
   break;
  }
  case 253: case 245:  {
   $7 = 8;
   label = 71;
   break;
  }
  case 254: case 246:  {
   $7 = 16;
   label = 71;
   break;
  }
  case 255: case 247:  {
   $7 = 32;
   label = 71;
   break;
  }
  case 256: case 248:  {
   $7 = 64;
   label = 71;
   break;
  }
  case 257: case 249:  {
   $7 = 128;
   label = 71;
   break;
  }
  case 258:  {
   $972 = $3;
   $973 = ((($972)) + 200|0);
   $974 = $4;
   $975 = (($973) + ($974<<2)|0);
   HEAP32[$975>>2] = 6;
   $976 = $3;
   $977 = ((($976)) + 1372|0);
   $978 = $5;
   $979 = (($978) + 1)|0;
   $980 = (($977) + ($979<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = $6;
   $983 = (($981) + ($982<<1)|0);
   $984 = HEAP16[$983>>1]|0;
   $985 = $984 << 16 >> 16;
   switch ($985|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $986 = $3;
    $987 = ((($986)) + 1372|0);
    $988 = $5;
    $989 = (($987) + ($988<<2)|0);
    $990 = HEAP32[$989>>2]|0;
    $991 = $6;
    $992 = (($990) + ($991<<1)|0);
    HEAP16[$992>>1] = 262;
    $993 = $3;
    $994 = ((($993)) + 1804|0);
    $995 = $5;
    $996 = (($994) + ($995<<2)|0);
    $997 = HEAP32[$996>>2]|0;
    $998 = $6;
    $999 = (($997) + ($998<<1)|0);
    HEAP16[$999>>1] = 406;
    $1000 = $3;
    $1001 = ((($1000)) + 1372|0);
    $1002 = $5;
    $1003 = (($1002) + 2)|0;
    $1004 = (($1001) + ($1003<<2)|0);
    $1005 = HEAP32[$1004>>2]|0;
    $1006 = $6;
    $1007 = (($1006) - 1)|0;
    $1008 = (($1005) + ($1007<<1)|0);
    $1009 = HEAP16[$1008>>1]|0;
    $1010 = $1009 << 16 >> 16;
    $1011 = ($1010|0)==(11);
    if ($1011) {
     $1012 = $3;
     $1013 = ((($1012)) + 1372|0);
     $1014 = $5;
     $1015 = (($1014) + 2)|0;
     $1016 = (($1013) + ($1015<<2)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = $6;
     $1019 = (($1018) - 1)|0;
     $1020 = (($1017) + ($1019<<1)|0);
     HEAP16[$1020>>1] = 12;
    }
    $1021 = $3;
    $1022 = ((($1021)) + 1372|0);
    $1023 = $5;
    $1024 = (($1022) + ($1023<<2)|0);
    $1025 = HEAP32[$1024>>2]|0;
    $1026 = $6;
    $1027 = (($1026) - 1)|0;
    $1028 = (($1025) + ($1027<<1)|0);
    $1029 = HEAP16[$1028>>1]|0;
    $1030 = $1029 << 16 >> 16;
    $1031 = ($1030|0)==(11);
    if ($1031) {
     $1032 = $3;
     $1033 = ((($1032)) + 1372|0);
     $1034 = $5;
     $1035 = (($1033) + ($1034<<2)|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $6;
     $1038 = (($1037) - 1)|0;
     $1039 = (($1036) + ($1038<<1)|0);
     HEAP16[$1039>>1] = 13;
    }
    $1040 = $3;
    $1041 = ((($1040)) + 44|0);
    $1042 = ((($1041)) + 30|0);
    HEAP8[$1042>>0] = 1;
    $1043 = $3;
    $1044 = ((($1043)) + 44|0);
    $1045 = ((($1044)) + 7|0);
    HEAP8[$1045>>0] = 1;
    $1046 = $3;
    $1047 = ((($1046)) + 184|0);
    $1048 = $4;
    $1049 = (($1047) + ($1048<<2)|0);
    $1050 = HEAP32[$1049>>2]|0;
    $1051 = (($1050) + 1)|0;
    HEAP32[$1049>>2] = $1051;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $1052 = $3;
    $1053 = ((($1052)) + 1372|0);
    $1054 = $5;
    $1055 = (($1053) + ($1054<<2)|0);
    $1056 = HEAP32[$1055>>2]|0;
    $1057 = $6;
    $1058 = (($1056) + ($1057<<1)|0);
    HEAP16[$1058>>1] = 262;
    $1059 = $3;
    $1060 = ((($1059)) + 1804|0);
    $1061 = $5;
    $1062 = (($1060) + ($1061<<2)|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = $6;
    $1065 = (($1063) + ($1064<<1)|0);
    HEAP16[$1065>>1] = 406;
    $1066 = $3;
    $1067 = ((($1066)) + 1372|0);
    $1068 = $5;
    $1069 = (($1068) + 1)|0;
    $1070 = (($1067) + ($1069<<2)|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = $6;
    $1073 = (($1071) + ($1072<<1)|0);
    HEAP16[$1073>>1] = 261;
    $1074 = $3;
    $1075 = ((($1074)) + 1804|0);
    $1076 = $5;
    $1077 = (($1076) + 1)|0;
    $1078 = (($1075) + ($1077<<2)|0);
    $1079 = HEAP32[$1078>>2]|0;
    $1080 = $6;
    $1081 = (($1079) + ($1080<<1)|0);
    HEAP16[$1081>>1] = 258;
    $1082 = $3;
    $1083 = ((($1082)) + 44|0);
    $1084 = ((($1083)) + 7|0);
    HEAP8[$1084>>0] = 1;
    $1085 = $3;
    $1086 = ((($1085)) + 184|0);
    $1087 = $4;
    $1088 = (($1086) + ($1087<<2)|0);
    $1089 = HEAP32[$1088>>2]|0;
    $1090 = (($1089) + 1)|0;
    HEAP32[$1088>>2] = $1090;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 286:  {
   $1091 = $3;
   $1092 = ((($1091)) + 200|0);
   $1093 = $4;
   $1094 = (($1092) + ($1093<<2)|0);
   HEAP32[$1094>>2] = 0;
   $1095 = $3;
   $1096 = ((($1095)) + 372|0);
   $1097 = HEAP32[$1096>>2]|0;
   $1098 = $3;
   $1099 = ((($1098)) + 360|0);
   HEAP32[$1099>>2] = $1097;
   $1100 = $5;
   $1101 = $3;
   $1102 = ((($1101)) + 96|0);
   $1103 = HEAP32[$1102>>2]|0;
   $1104 = ($1100|0)>($1103|0);
   if ($1104) {
    $1105 = $3;
    $1106 = ((($1105)) + 36|0);
    $1107 = HEAP32[$1106>>2]|0;
    $1108 = $5;
    $1109 = (($1108) - ($1107))|0;
    $5 = $1109;
   }
   $1110 = $5;
   $1111 = $3;
   $1112 = ((($1111)) + 364|0);
   HEAP32[$1112>>2] = $1110;
   $1113 = $6;
   $1114 = $3;
   $1115 = ((($1114)) + 368|0);
   HEAP32[$1115>>2] = $1113;
   $1116 = $3;
   $1117 = ((($1116)) + 44|0);
   $1118 = ((($1117)) + 9|0);
   HEAP8[$1118>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 288:  {
   $1119 = $3;
   $1120 = ((($1119)) + 200|0);
   $1121 = $4;
   $1122 = (($1120) + ($1121<<2)|0);
   HEAP32[$1122>>2] = 0;
   $1123 = $3;
   $1124 = ((($1123)) + 268|0);
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = $3;
   $1127 = ((($1126)) + 256|0);
   HEAP32[$1127>>2] = $1125;
   $1128 = $3;
   $1129 = ((($1128)) + 264|0);
   $1130 = HEAP32[$1129>>2]|0;
   $1131 = ($1130|0)!=(0);
   $1132 = $1131 ^ 1;
   $1133 = $1132&1;
   $1134 = $3;
   $1135 = ((($1134)) + 264|0);
   HEAP32[$1135>>2] = $1133;
   $1136 = $3;
   $1137 = ((($1136)) + 44|0);
   $1138 = ((($1137)) + 9|0);
   HEAP8[$1138>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 303:  {
   $1139 = $3;
   $1140 = ((($1139)) + 328|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $3;
   $1143 = ((($1142)) + 320|0);
   HEAP32[$1143>>2] = $1141;
   $1144 = $3;
   $1145 = ((($1144)) + 324|0);
   $1146 = HEAP32[$1145>>2]|0;
   $1147 = $3;
   $1148 = ((($1147)) + 12|0);
   $1149 = HEAP32[$1148>>2]|0;
   $1150 = (($1149) + ($1146))|0;
   HEAP32[$1148>>2] = $1150;
   $1151 = $3;
   $1152 = ((($1151)) + 1372|0);
   $1153 = $5;
   $1154 = (($1152) + ($1153<<2)|0);
   $1155 = HEAP32[$1154>>2]|0;
   $1156 = $6;
   $1157 = (($1155) + ($1156<<1)|0);
   HEAP16[$1157>>1] = 10;
   $1158 = $3;
   $1159 = ((($1158)) + 1804|0);
   $1160 = $5;
   $1161 = (($1159) + ($1160<<2)|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = $6;
   $1164 = (($1162) + ($1163<<1)|0);
   HEAP16[$1164>>1] = 406;
   $1165 = $3;
   $1166 = ((($1165)) + 44|0);
   $1167 = ((($1166)) + 5|0);
   HEAP8[$1167>>0] = 1;
   $1168 = $3;
   $1169 = ((($1168)) + 184|0);
   $1170 = $4;
   $1171 = (($1169) + ($1170<<2)|0);
   $1172 = HEAP32[$1171>>2]|0;
   $1173 = (($1172) + 1)|0;
   HEAP32[$1171>>2] = $1173;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 304:  {
   $1174 = $3;
   $1175 = ((($1174)) + 340|0);
   $1176 = HEAP32[$1175>>2]|0;
   $1177 = $3;
   $1178 = ((($1177)) + 332|0);
   HEAP32[$1178>>2] = $1176;
   $1179 = $3;
   $1180 = ((($1179)) + 336|0);
   $1181 = HEAP32[$1180>>2]|0;
   $1182 = $3;
   $1183 = ((($1182)) + 12|0);
   $1184 = HEAP32[$1183>>2]|0;
   $1185 = (($1184) + ($1181))|0;
   HEAP32[$1183>>2] = $1185;
   $1186 = $3;
   $1187 = ((($1186)) + 1372|0);
   $1188 = $5;
   $1189 = (($1187) + ($1188<<2)|0);
   $1190 = HEAP32[$1189>>2]|0;
   $1191 = $6;
   $1192 = (($1190) + ($1191<<1)|0);
   HEAP16[$1192>>1] = 10;
   $1193 = $3;
   $1194 = ((($1193)) + 1804|0);
   $1195 = $5;
   $1196 = (($1194) + ($1195<<2)|0);
   $1197 = HEAP32[$1196>>2]|0;
   $1198 = $6;
   $1199 = (($1197) + ($1198<<1)|0);
   HEAP16[$1199>>1] = 406;
   $1200 = $3;
   $1201 = ((($1200)) + 44|0);
   $1202 = ((($1201)) + 5|0);
   HEAP8[$1202>>0] = 1;
   $1203 = $3;
   $1204 = ((($1203)) + 184|0);
   $1205 = $4;
   $1206 = (($1204) + ($1205<<2)|0);
   $1207 = HEAP32[$1206>>2]|0;
   $1208 = (($1207) + 1)|0;
   HEAP32[$1206>>2] = $1208;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 325:  {
   $7 = 0;
   label = 92;
   break;
  }
  case 326: case 329:  {
   $7 = 1;
   label = 92;
   break;
  }
  case 327:  {
   $7 = 2;
   label = 92;
   break;
  }
  case 328:  {
   $7 = 3;
   label = 92;
   break;
  }
  case 330:  {
   $1224 = $3;
   $1225 = ((($1224)) + 200|0);
   $1226 = $4;
   $1227 = (($1225) + ($1226<<2)|0);
   HEAP32[$1227>>2] = 0;
   $1228 = $3;
   $1229 = ((($1228)) + 376|0);
   HEAP32[$1229>>2] = 0;
   $1230 = $3;
   $1231 = ((($1230)) + 44|0);
   $1232 = ((($1231)) + 9|0);
   HEAP8[$1232>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 334: case 333: case 332:  {
   $1233 = $3;
   $1234 = ((($1233)) + 16|0);
   $1235 = $4;
   $1236 = (($1234) + ($1235<<2)|0);
   HEAP32[$1236>>2] = 1;
   $1237 = $3;
   $1238 = ((($1237)) + 16|0);
   $1239 = HEAP32[$1238>>2]|0;
   $1240 = ($1239|0)>(0);
   if ($1240) {
    $1241 = $3;
    $1242 = ((($1241)) + 16|0);
    $1243 = ((($1242)) + 4|0);
    $1244 = HEAP32[$1243>>2]|0;
    $1245 = ($1244|0)>(0);
    if ($1245) {
     $1246 = $3;
     $1247 = ((($1246)) + 4|0);
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = $3;
     $1250 = ((($1249)) + 304|0);
     $1251 = HEAP32[$1250>>2]|0;
     $1252 = Math_imul($1248, $1251)|0;
     $1253 = (($1252|0) / 100)&-1;
     $1254 = $3;
     $1255 = ((($1254)) + 12|0);
     $1256 = HEAP32[$1255>>2]|0;
     $1257 = (($1256) + ($1253))|0;
     HEAP32[$1255>>2] = $1257;
    }
   }
   $1258 = $3;
   $1259 = ((($1258)) + 44|0);
   HEAP8[$1259>>0] = 1;
   $1260 = $3;
   $1261 = ((($1260)) + 184|0);
   $1262 = $4;
   $1263 = (($1261) + ($1262<<2)|0);
   $1264 = HEAP32[$1263>>2]|0;
   $1265 = (($1264) + 1)|0;
   HEAP32[$1263>>2] = $1265;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 62) {
  $889 = $7;
  $890 = $3;
  $891 = ((($890)) + 308|0);
  $892 = $4;
  $893 = (($891) + ($892<<2)|0);
  $894 = HEAP32[$893>>2]|0;
  $895 = $894 | $889;
  HEAP32[$893>>2] = $895;
  $896 = $3;
  $897 = ((($896)) + 316|0);
  $898 = HEAP32[$897>>2]|0;
  $899 = $3;
  $900 = ((($899)) + 12|0);
  $901 = HEAP32[$900>>2]|0;
  $902 = (($901) + ($898))|0;
  HEAP32[$900>>2] = $902;
  $903 = $3;
  $904 = ((($903)) + 1372|0);
  $905 = $5;
  $906 = (($904) + ($905<<2)|0);
  $907 = HEAP32[$906>>2]|0;
  $908 = $6;
  $909 = (($907) + ($908<<1)|0);
  HEAP16[$909>>1] = 10;
  $910 = $3;
  $911 = ((($910)) + 1804|0);
  $912 = $5;
  $913 = (($911) + ($912<<2)|0);
  $914 = HEAP32[$913>>2]|0;
  $915 = $6;
  $916 = (($914) + ($915<<1)|0);
  HEAP16[$916>>1] = 406;
  $917 = $3;
  $918 = ((($917)) + 44|0);
  $919 = ((($918)) + 5|0);
  HEAP8[$919>>0] = 1;
  $920 = $3;
  $921 = ((($920)) + 184|0);
  $922 = $4;
  $923 = (($921) + ($922<<2)|0);
  $924 = HEAP32[$923>>2]|0;
  $925 = (($924) + 1)|0;
  HEAP32[$923>>2] = $925;
  $2 = 1;
  $1266 = $2;
  STACKTOP = sp;return ($1266|0);
 }
 else if ((label|0) == 71) {
  $926 = $3;
  $927 = ((($926)) + 308|0);
  $928 = $4;
  $929 = (($927) + ($928<<2)|0);
  $930 = HEAP32[$929>>2]|0;
  $931 = $7;
  $932 = $930 & $931;
  $933 = ($932|0)!=(0);
  if ($933) {
   $934 = $3;
   $935 = ((($934)) + 1372|0);
   $936 = $5;
   $937 = (($936) + 1)|0;
   $938 = (($935) + ($937<<2)|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $6;
   $941 = (($939) + ($940<<1)|0);
   $942 = HEAP16[$941>>1]|0;
   $943 = $942 << 16 >> 16;
   $944 = (11821 + ($943)|0);
   $945 = HEAP8[$944>>0]|0;
   $946 = ($945<<24>>24)!=(0);
   if ($946) {
    $947 = $3;
    $948 = ((($947)) + 1372|0);
    $949 = $5;
    $950 = (($949) + 1)|0;
    $951 = (($948) + ($950<<2)|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = $6;
    $954 = (($952) + ($953<<1)|0);
    HEAP16[$954>>1] = 406;
    $955 = $3;
    $956 = ((($955)) + 1804|0);
    $957 = $5;
    $958 = (($957) + 1)|0;
    $959 = (($956) + ($958<<2)|0);
    $960 = HEAP32[$959>>2]|0;
    $961 = $6;
    $962 = (($960) + ($961<<1)|0);
    HEAP16[$962>>1] = 406;
    $963 = $3;
    $964 = ((($963)) + 44|0);
    $965 = ((($964)) + 10|0);
    HEAP8[$965>>0] = 1;
    $966 = $3;
    $967 = ((($966)) + 184|0);
    $968 = $4;
    $969 = (($967) + ($968<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = (($970) + 2)|0;
    HEAP32[$969>>2] = $971;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
  }
 }
 else if ((label|0) == 92) {
  $1209 = $3;
  $1210 = ((($1209)) + 200|0);
  $1211 = $4;
  $1212 = (($1210) + ($1211<<2)|0);
  HEAP32[$1212>>2] = 0;
  $1213 = $7;
  $1214 = $3;
  $1215 = ((($1214)) + 380|0);
  HEAP32[$1215>>2] = $1213;
  $1216 = $3;
  $1217 = ((($1216)) + 384|0);
  $1218 = HEAP32[$1217>>2]|0;
  $1219 = $3;
  $1220 = ((($1219)) + 376|0);
  HEAP32[$1220>>2] = $1218;
  $1221 = $3;
  $1222 = ((($1221)) + 44|0);
  $1223 = ((($1222)) + 9|0);
  HEAP8[$1223>>0] = 1;
  $2 = 1;
  $1266 = $2;
  STACKTOP = sp;return ($1266|0);
 }
 $2 = 0;
 $1266 = $2;
 STACKTOP = sp;return ($1266|0);
}
function _Lplayer_walk_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 3;
 $22 = $6;
 $23 = (($22) + 1)|0;
 $6 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 8: case 7:  {
   $33 = $3;
   $34 = ((($33)) + 192|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$36>>2] = $38;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 13: case 12: case 11:  {
   $39 = $3;
   $40 = ((($39)) + 1372|0);
   $41 = $5;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = 406;
   $46 = $3;
   $47 = ((($46)) + 1804|0);
   $48 = $5;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 406;
   $53 = $3;
   $54 = ((($53)) + 44|0);
   $55 = ((($54)) + 12|0);
   HEAP8[$55>>0] = 1;
   $56 = $3;
   $57 = ((($56)) + 192|0);
   $58 = $4;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 15: case 14:  {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $5;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $6;
   $68 = (($66) + ($67<<1)|0);
   HEAP16[$68>>1] = 15;
   $69 = $3;
   $70 = ((($69)) + 1804|0);
   $71 = $5;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $6;
   $75 = (($73) + ($74<<1)|0);
   HEAP16[$75>>1] = 14;
   $76 = $3;
   $77 = ((($76)) + 44|0);
   $78 = ((($77)) + 12|0);
   HEAP8[$78>>0] = 1;
   $79 = $3;
   $80 = ((($79)) + 192|0);
   $81 = $4;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 1)|0;
   HEAP32[$82>>2] = $84;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 24:  {
   $85 = $3;
   $86 = ((($85)) + 1372|0);
   $87 = $5;
   $88 = (($86) + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $6;
   $91 = (($89) + ($90<<1)|0);
   HEAP16[$91>>1] = 27;
   $92 = $3;
   $93 = ((($92)) + 1804|0);
   $94 = $5;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $6;
   $98 = (($96) + ($97<<1)|0);
   HEAP16[$98>>1] = 406;
   $99 = $3;
   $100 = ((($99)) + 44|0);
   $101 = ((($100)) + 11|0);
   HEAP8[$101>>0] = 1;
   $102 = $3;
   $103 = ((($102)) + 192|0);
   $104 = $4;
   $105 = (($103) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$105>>2] = $107;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 29:  {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $5;
   $111 = (($109) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $6;
   $114 = (($112) + ($113<<1)|0);
   HEAP16[$114>>1] = 32;
   $115 = $3;
   $116 = ((($115)) + 1804|0);
   $117 = $5;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $6;
   $121 = (($119) + ($120<<1)|0);
   HEAP16[$121>>1] = 406;
   $122 = $3;
   $123 = ((($122)) + 44|0);
   $124 = ((($123)) + 11|0);
   HEAP8[$124>>0] = 1;
   $125 = $3;
   $126 = ((($125)) + 192|0);
   $127 = $4;
   $128 = (($126) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + 1)|0;
   HEAP32[$128>>2] = $130;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $131 = $3;
   $132 = ((($131)) + 200|0);
   $133 = $4;
   $134 = (($132) + ($133<<2)|0);
   HEAP32[$134>>2] = 7;
   $135 = $3;
   $136 = ((($135)) + 1372|0);
   $137 = $5;
   $138 = (($136) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $6;
   $141 = (($140) + 1)|0;
   $142 = (($139) + ($141<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143 << 16 >> 16;
   switch ($144|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $145 = $3;
    $146 = ((($145)) + 1372|0);
    $147 = $5;
    $148 = (($146) + ($147<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $6;
    $151 = (($149) + ($150<<1)|0);
    HEAP16[$151>>1] = 52;
    $152 = $3;
    $153 = ((($152)) + 1804|0);
    $154 = $5;
    $155 = (($153) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $6;
    $158 = (($156) + ($157<<1)|0);
    HEAP16[$158>>1] = 406;
    $159 = $3;
    $160 = ((($159)) + 1372|0);
    $161 = $5;
    $162 = (($161) + 1)|0;
    $163 = (($160) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $6;
    $166 = (($164) + ($165<<1)|0);
    $167 = HEAP16[$166>>1]|0;
    $168 = $167 << 16 >> 16;
    $169 = ($168|0)==(11);
    if ($169) {
     $170 = $3;
     $171 = ((($170)) + 1372|0);
     $172 = $5;
     $173 = (($172) + 1)|0;
     $174 = (($171) + ($173<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $6;
     $177 = (($175) + ($176<<1)|0);
     HEAP16[$177>>1] = 12;
    }
    $178 = $3;
    $179 = ((($178)) + 1372|0);
    $180 = $5;
    $181 = (($180) - 1)|0;
    $182 = (($179) + ($181<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = $6;
    $185 = (($183) + ($184<<1)|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = $186 << 16 >> 16;
    $188 = ($187|0)==(11);
    if ($188) {
     $189 = $3;
     $190 = ((($189)) + 1372|0);
     $191 = $5;
     $192 = (($191) - 1)|0;
     $193 = (($190) + ($192<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $6;
     $196 = (($194) + ($195<<1)|0);
     HEAP16[$196>>1] = 13;
    }
    $197 = $3;
    $198 = ((($197)) + 44|0);
    $199 = ((($198)) + 30|0);
    HEAP8[$199>>0] = 1;
    $200 = $3;
    $201 = ((($200)) + 44|0);
    $202 = ((($201)) + 7|0);
    HEAP8[$202>>0] = 1;
    $203 = $3;
    $204 = ((($203)) + 192|0);
    $205 = $4;
    $206 = (($204) + ($205<<2)|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + 1)|0;
    HEAP32[$206>>2] = $208;
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
    break;
   }
   case 13: case 12: case 11:  {
    $209 = $3;
    $210 = ((($209)) + 1372|0);
    $211 = $5;
    $212 = (($210) + ($211<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $6;
    $215 = (($213) + ($214<<1)|0);
    HEAP16[$215>>1] = 52;
    $216 = $3;
    $217 = ((($216)) + 1804|0);
    $218 = $5;
    $219 = (($217) + ($218<<2)|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = $6;
    $222 = (($220) + ($221<<1)|0);
    HEAP16[$222>>1] = 406;
    $223 = $3;
    $224 = ((($223)) + 1372|0);
    $225 = $5;
    $226 = (($224) + ($225<<2)|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $6;
    $229 = (($228) + 1)|0;
    $230 = (($227) + ($229<<1)|0);
    HEAP16[$230>>1] = 51;
    $231 = $3;
    $232 = ((($231)) + 1804|0);
    $233 = $5;
    $234 = (($232) + ($233<<2)|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $6;
    $237 = (($236) + 1)|0;
    $238 = (($235) + ($237<<1)|0);
    HEAP16[$238>>1] = 40;
    $239 = $3;
    $240 = ((($239)) + 44|0);
    $241 = ((($240)) + 7|0);
    HEAP8[$241>>0] = 1;
    $242 = $3;
    $243 = ((($242)) + 192|0);
    $244 = $4;
    $245 = (($243) + ($244<<2)|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($246) + 1)|0;
    HEAP32[$245>>2] = $247;
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
    break;
   }
   default: {
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
   }
   }
   break;
  }
  case 150: case 149:  {
   $248 = $3;
   $249 = ((($248)) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = (($250) - 1)|0;
   HEAP32[$249>>2] = $251;
   $252 = $3;
   $253 = ((($252)) + 300|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $3;
   $256 = ((($255)) + 12|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (($257) + ($254))|0;
   HEAP32[$256>>2] = $258;
   $259 = $3;
   $260 = ((($259)) + 1372|0);
   $261 = $5;
   $262 = (($260) + ($261<<2)|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $6;
   $265 = (($263) + ($264<<1)|0);
   HEAP16[$265>>1] = 159;
   $266 = $3;
   $267 = ((($266)) + 1804|0);
   $268 = $5;
   $269 = (($267) + ($268<<2)|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $6;
   $272 = (($270) + ($271<<1)|0);
   HEAP16[$272>>1] = 406;
   $273 = $3;
   $274 = ((($273)) + 44|0);
   $275 = ((($274)) + 5|0);
   HEAP8[$275>>0] = 1;
   $276 = $3;
   $277 = ((($276)) + 192|0);
   $278 = $4;
   $279 = (($277) + ($278<<2)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (($280) + 1)|0;
   HEAP32[$279>>2] = $281;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 161: case 160:  {
   $282 = $3;
   $283 = ((($282)) + 8|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (($284) - 3)|0;
   HEAP32[$283>>2] = $285;
   $286 = $3;
   $287 = ((($286)) + 276|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $3;
   $290 = ((($289)) + 12|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($291) + ($288))|0;
   HEAP32[$290>>2] = $292;
   $293 = $3;
   $294 = ((($293)) + 1372|0);
   $295 = $5;
   $296 = (($294) + ($295<<2)|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $6;
   $299 = (($297) + ($298<<1)|0);
   HEAP16[$299>>1] = 170;
   $300 = $3;
   $301 = ((($300)) + 1804|0);
   $302 = $5;
   $303 = (($301) + ($302<<2)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $6;
   $306 = (($304) + ($305<<1)|0);
   HEAP16[$306>>1] = 406;
   $307 = $3;
   $308 = ((($307)) + 44|0);
   $309 = ((($308)) + 5|0);
   HEAP8[$309>>0] = 1;
   $310 = $3;
   $311 = ((($310)) + 192|0);
   $312 = $4;
   $313 = (($311) + ($312<<2)|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = (($314) + 1)|0;
   HEAP32[$313>>2] = $315;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 228:  {
   $316 = $3;
   $317 = ((($316)) + 280|0);
   $318 = $4;
   $319 = (($317) + ($318<<2)|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = ($320|0)<(9999);
   if ($321) {
    $322 = $3;
    $323 = ((($322)) + 280|0);
    $324 = $4;
    $325 = (($323) + ($324<<2)|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($326) + 1)|0;
    HEAP32[$325>>2] = $327;
   }
   $328 = $3;
   $329 = ((($328)) + 288|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $3;
   $332 = ((($331)) + 12|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + ($330))|0;
   HEAP32[$332>>2] = $334;
   $335 = $3;
   $336 = ((($335)) + 1372|0);
   $337 = $5;
   $338 = (($336) + ($337<<2)|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $6;
   $341 = (($339) + ($340<<1)|0);
   HEAP16[$341>>1] = 229;
   $342 = $3;
   $343 = ((($342)) + 1804|0);
   $344 = $5;
   $345 = (($343) + ($344<<2)|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = $6;
   $348 = (($346) + ($347<<1)|0);
   HEAP16[$348>>1] = 406;
   $349 = $3;
   $350 = ((($349)) + 44|0);
   $351 = ((($350)) + 5|0);
   HEAP8[$351>>0] = 1;
   $352 = $3;
   $353 = ((($352)) + 192|0);
   $354 = $4;
   $355 = (($353) + ($354<<2)|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = (($356) + 1)|0;
   HEAP32[$355>>2] = $357;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 234:  {
   $7 = 1;
   label = 28;
   break;
  }
  case 235:  {
   $7 = 2;
   label = 28;
   break;
  }
  case 236:  {
   $7 = 4;
   label = 28;
   break;
  }
  case 237:  {
   $7 = 8;
   label = 28;
   break;
  }
  case 238:  {
   $7 = 16;
   label = 28;
   break;
  }
  case 239:  {
   $7 = 32;
   label = 28;
   break;
  }
  case 240:  {
   $7 = 64;
   label = 28;
   break;
  }
  case 241:  {
   $7 = 128;
   label = 28;
   break;
  }
  case 250: case 242:  {
   $7 = 1;
   label = 37;
   break;
  }
  case 251: case 243:  {
   $7 = 2;
   label = 37;
   break;
  }
  case 252: case 244:  {
   $7 = 4;
   label = 37;
   break;
  }
  case 253: case 245:  {
   $7 = 8;
   label = 37;
   break;
  }
  case 254: case 246:  {
   $7 = 16;
   label = 37;
   break;
  }
  case 255: case 247:  {
   $7 = 32;
   label = 37;
   break;
  }
  case 256: case 248:  {
   $7 = 64;
   label = 37;
   break;
  }
  case 257: case 249:  {
   $7 = 128;
   label = 37;
   break;
  }
  case 258:  {
   $441 = $3;
   $442 = ((($441)) + 200|0);
   $443 = $4;
   $444 = (($442) + ($443<<2)|0);
   HEAP32[$444>>2] = 7;
   $445 = $3;
   $446 = ((($445)) + 1372|0);
   $447 = $5;
   $448 = (($446) + ($447<<2)|0);
   $449 = HEAP32[$448>>2]|0;
   $450 = $6;
   $451 = (($450) + 1)|0;
   $452 = (($449) + ($451<<1)|0);
   $453 = HEAP16[$452>>1]|0;
   $454 = $453 << 16 >> 16;
   switch ($454|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $455 = $3;
    $456 = ((($455)) + 1372|0);
    $457 = $5;
    $458 = (($456) + ($457<<2)|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $6;
    $461 = (($459) + ($460<<1)|0);
    HEAP16[$461>>1] = 264;
    $462 = $3;
    $463 = ((($462)) + 1804|0);
    $464 = $5;
    $465 = (($463) + ($464<<2)|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = $6;
    $468 = (($466) + ($467<<1)|0);
    HEAP16[$468>>1] = 406;
    $469 = $3;
    $470 = ((($469)) + 1372|0);
    $471 = $5;
    $472 = (($471) + 1)|0;
    $473 = (($470) + ($472<<2)|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = $6;
    $476 = (($474) + ($475<<1)|0);
    $477 = HEAP16[$476>>1]|0;
    $478 = $477 << 16 >> 16;
    $479 = ($478|0)==(11);
    if ($479) {
     $480 = $3;
     $481 = ((($480)) + 1372|0);
     $482 = $5;
     $483 = (($482) + 1)|0;
     $484 = (($481) + ($483<<2)|0);
     $485 = HEAP32[$484>>2]|0;
     $486 = $6;
     $487 = (($485) + ($486<<1)|0);
     HEAP16[$487>>1] = 12;
    }
    $488 = $3;
    $489 = ((($488)) + 1372|0);
    $490 = $5;
    $491 = (($490) - 1)|0;
    $492 = (($489) + ($491<<2)|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = $6;
    $495 = (($493) + ($494<<1)|0);
    $496 = HEAP16[$495>>1]|0;
    $497 = $496 << 16 >> 16;
    $498 = ($497|0)==(11);
    if ($498) {
     $499 = $3;
     $500 = ((($499)) + 1372|0);
     $501 = $5;
     $502 = (($501) - 1)|0;
     $503 = (($500) + ($502<<2)|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $6;
     $506 = (($504) + ($505<<1)|0);
     HEAP16[$506>>1] = 13;
    }
    $507 = $3;
    $508 = ((($507)) + 44|0);
    $509 = ((($508)) + 30|0);
    HEAP8[$509>>0] = 1;
    $510 = $3;
    $511 = ((($510)) + 44|0);
    $512 = ((($511)) + 7|0);
    HEAP8[$512>>0] = 1;
    $513 = $3;
    $514 = ((($513)) + 192|0);
    $515 = $4;
    $516 = (($514) + ($515<<2)|0);
    $517 = HEAP32[$516>>2]|0;
    $518 = (($517) + 1)|0;
    HEAP32[$516>>2] = $518;
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
    break;
   }
   case 13: case 12: case 11:  {
    $519 = $3;
    $520 = ((($519)) + 1372|0);
    $521 = $5;
    $522 = (($520) + ($521<<2)|0);
    $523 = HEAP32[$522>>2]|0;
    $524 = $6;
    $525 = (($523) + ($524<<1)|0);
    HEAP16[$525>>1] = 264;
    $526 = $3;
    $527 = ((($526)) + 1804|0);
    $528 = $5;
    $529 = (($527) + ($528<<2)|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = $6;
    $532 = (($530) + ($531<<1)|0);
    HEAP16[$532>>1] = 406;
    $533 = $3;
    $534 = ((($533)) + 1372|0);
    $535 = $5;
    $536 = (($534) + ($535<<2)|0);
    $537 = HEAP32[$536>>2]|0;
    $538 = $6;
    $539 = (($538) + 1)|0;
    $540 = (($537) + ($539<<1)|0);
    HEAP16[$540>>1] = 263;
    $541 = $3;
    $542 = ((($541)) + 1804|0);
    $543 = $5;
    $544 = (($542) + ($543<<2)|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $6;
    $547 = (($546) + 1)|0;
    $548 = (($545) + ($547<<1)|0);
    HEAP16[$548>>1] = 258;
    $549 = $3;
    $550 = ((($549)) + 44|0);
    $551 = ((($550)) + 7|0);
    HEAP8[$551>>0] = 1;
    $552 = $3;
    $553 = ((($552)) + 192|0);
    $554 = $4;
    $555 = (($553) + ($554<<2)|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = (($556) + 1)|0;
    HEAP32[$555>>2] = $557;
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
    break;
   }
   default: {
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
   }
   }
   break;
  }
  case 286:  {
   $558 = $3;
   $559 = ((($558)) + 200|0);
   $560 = $4;
   $561 = (($559) + ($560<<2)|0);
   HEAP32[$561>>2] = 0;
   $562 = $3;
   $563 = ((($562)) + 372|0);
   $564 = HEAP32[$563>>2]|0;
   $565 = $3;
   $566 = ((($565)) + 360|0);
   HEAP32[$566>>2] = $564;
   $567 = $5;
   $568 = $3;
   $569 = ((($568)) + 364|0);
   HEAP32[$569>>2] = $567;
   $570 = $6;
   $571 = $3;
   $572 = ((($571)) + 368|0);
   HEAP32[$572>>2] = $570;
   $573 = $3;
   $574 = ((($573)) + 44|0);
   $575 = ((($574)) + 9|0);
   HEAP8[$575>>0] = 1;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 288:  {
   $576 = $3;
   $577 = ((($576)) + 200|0);
   $578 = $4;
   $579 = (($577) + ($578<<2)|0);
   HEAP32[$579>>2] = 0;
   $580 = $3;
   $581 = ((($580)) + 268|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = $3;
   $584 = ((($583)) + 256|0);
   HEAP32[$584>>2] = $582;
   $585 = $3;
   $586 = ((($585)) + 264|0);
   $587 = HEAP32[$586>>2]|0;
   $588 = ($587|0)!=(0);
   $589 = $588 ^ 1;
   $590 = $589&1;
   $591 = $3;
   $592 = ((($591)) + 264|0);
   HEAP32[$592>>2] = $590;
   $593 = $3;
   $594 = ((($593)) + 44|0);
   $595 = ((($594)) + 9|0);
   HEAP8[$595>>0] = 1;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 303:  {
   $596 = $3;
   $597 = ((($596)) + 328|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = $3;
   $600 = ((($599)) + 320|0);
   HEAP32[$600>>2] = $598;
   $601 = $3;
   $602 = ((($601)) + 324|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = $3;
   $605 = ((($604)) + 12|0);
   $606 = HEAP32[$605>>2]|0;
   $607 = (($606) + ($603))|0;
   HEAP32[$605>>2] = $607;
   $608 = $3;
   $609 = ((($608)) + 1372|0);
   $610 = $5;
   $611 = (($609) + ($610<<2)|0);
   $612 = HEAP32[$611>>2]|0;
   $613 = $6;
   $614 = (($612) + ($613<<1)|0);
   HEAP16[$614>>1] = 10;
   $615 = $3;
   $616 = ((($615)) + 1804|0);
   $617 = $5;
   $618 = (($616) + ($617<<2)|0);
   $619 = HEAP32[$618>>2]|0;
   $620 = $6;
   $621 = (($619) + ($620<<1)|0);
   HEAP16[$621>>1] = 406;
   $622 = $3;
   $623 = ((($622)) + 44|0);
   $624 = ((($623)) + 5|0);
   HEAP8[$624>>0] = 1;
   $625 = $3;
   $626 = ((($625)) + 192|0);
   $627 = $4;
   $628 = (($626) + ($627<<2)|0);
   $629 = HEAP32[$628>>2]|0;
   $630 = (($629) + 1)|0;
   HEAP32[$628>>2] = $630;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 304:  {
   $631 = $3;
   $632 = ((($631)) + 340|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = $3;
   $635 = ((($634)) + 332|0);
   HEAP32[$635>>2] = $633;
   $636 = $3;
   $637 = ((($636)) + 336|0);
   $638 = HEAP32[$637>>2]|0;
   $639 = $3;
   $640 = ((($639)) + 12|0);
   $641 = HEAP32[$640>>2]|0;
   $642 = (($641) + ($638))|0;
   HEAP32[$640>>2] = $642;
   $643 = $3;
   $644 = ((($643)) + 1372|0);
   $645 = $5;
   $646 = (($644) + ($645<<2)|0);
   $647 = HEAP32[$646>>2]|0;
   $648 = $6;
   $649 = (($647) + ($648<<1)|0);
   HEAP16[$649>>1] = 10;
   $650 = $3;
   $651 = ((($650)) + 1804|0);
   $652 = $5;
   $653 = (($651) + ($652<<2)|0);
   $654 = HEAP32[$653>>2]|0;
   $655 = $6;
   $656 = (($654) + ($655<<1)|0);
   HEAP16[$656>>1] = 406;
   $657 = $3;
   $658 = ((($657)) + 44|0);
   $659 = ((($658)) + 5|0);
   HEAP8[$659>>0] = 1;
   $660 = $3;
   $661 = ((($660)) + 192|0);
   $662 = $4;
   $663 = (($661) + ($662<<2)|0);
   $664 = HEAP32[$663>>2]|0;
   $665 = (($664) + 1)|0;
   HEAP32[$663>>2] = $665;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 325:  {
   $7 = 0;
   label = 56;
   break;
  }
  case 326:  {
   $7 = 1;
   label = 56;
   break;
  }
  case 327: case 329:  {
   $7 = 2;
   label = 56;
   break;
  }
  case 328:  {
   $7 = 3;
   label = 56;
   break;
  }
  case 330:  {
   $681 = $3;
   $682 = ((($681)) + 200|0);
   $683 = $4;
   $684 = (($682) + ($683<<2)|0);
   HEAP32[$684>>2] = 0;
   $685 = $3;
   $686 = ((($685)) + 376|0);
   HEAP32[$686>>2] = 0;
   $687 = $3;
   $688 = ((($687)) + 44|0);
   $689 = ((($688)) + 9|0);
   HEAP8[$689>>0] = 1;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  case 334: case 333: case 332:  {
   $690 = $3;
   $691 = ((($690)) + 16|0);
   $692 = $4;
   $693 = (($691) + ($692<<2)|0);
   HEAP32[$693>>2] = 1;
   $694 = $3;
   $695 = ((($694)) + 16|0);
   $696 = HEAP32[$695>>2]|0;
   $697 = ($696|0)>(0);
   if ($697) {
    $698 = $3;
    $699 = ((($698)) + 16|0);
    $700 = ((($699)) + 4|0);
    $701 = HEAP32[$700>>2]|0;
    $702 = ($701|0)>(0);
    if ($702) {
     $703 = $3;
     $704 = ((($703)) + 4|0);
     $705 = HEAP32[$704>>2]|0;
     $706 = $3;
     $707 = ((($706)) + 304|0);
     $708 = HEAP32[$707>>2]|0;
     $709 = Math_imul($705, $708)|0;
     $710 = (($709|0) / 100)&-1;
     $711 = $3;
     $712 = ((($711)) + 12|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = (($713) + ($710))|0;
     HEAP32[$712>>2] = $714;
    }
   }
   $715 = $3;
   $716 = ((($715)) + 44|0);
   HEAP8[$716>>0] = 1;
   $717 = $3;
   $718 = ((($717)) + 192|0);
   $719 = $4;
   $720 = (($718) + ($719<<2)|0);
   $721 = HEAP32[$720>>2]|0;
   $722 = (($721) + 1)|0;
   HEAP32[$720>>2] = $722;
   $2 = 1;
   $723 = $2;
   STACKTOP = sp;return ($723|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $358 = $7;
  $359 = $3;
  $360 = ((($359)) + 308|0);
  $361 = $4;
  $362 = (($360) + ($361<<2)|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = $363 | $358;
  HEAP32[$362>>2] = $364;
  $365 = $3;
  $366 = ((($365)) + 316|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $3;
  $369 = ((($368)) + 12|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($370) + ($367))|0;
  HEAP32[$369>>2] = $371;
  $372 = $3;
  $373 = ((($372)) + 1372|0);
  $374 = $5;
  $375 = (($373) + ($374<<2)|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = $6;
  $378 = (($376) + ($377<<1)|0);
  HEAP16[$378>>1] = 10;
  $379 = $3;
  $380 = ((($379)) + 1804|0);
  $381 = $5;
  $382 = (($380) + ($381<<2)|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = $6;
  $385 = (($383) + ($384<<1)|0);
  HEAP16[$385>>1] = 406;
  $386 = $3;
  $387 = ((($386)) + 44|0);
  $388 = ((($387)) + 5|0);
  HEAP8[$388>>0] = 1;
  $389 = $3;
  $390 = ((($389)) + 192|0);
  $391 = $4;
  $392 = (($390) + ($391<<2)|0);
  $393 = HEAP32[$392>>2]|0;
  $394 = (($393) + 1)|0;
  HEAP32[$392>>2] = $394;
  $2 = 1;
  $723 = $2;
  STACKTOP = sp;return ($723|0);
 }
 else if ((label|0) == 37) {
  $395 = $3;
  $396 = ((($395)) + 308|0);
  $397 = $4;
  $398 = (($396) + ($397<<2)|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = $7;
  $401 = $399 & $400;
  $402 = ($401|0)!=(0);
  if ($402) {
   $403 = $3;
   $404 = ((($403)) + 1372|0);
   $405 = $5;
   $406 = (($404) + ($405<<2)|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = $6;
   $409 = (($408) + 1)|0;
   $410 = (($407) + ($409<<1)|0);
   $411 = HEAP16[$410>>1]|0;
   $412 = $411 << 16 >> 16;
   $413 = (11821 + ($412)|0);
   $414 = HEAP8[$413>>0]|0;
   $415 = ($414<<24>>24)!=(0);
   if ($415) {
    $416 = $3;
    $417 = ((($416)) + 1372|0);
    $418 = $5;
    $419 = (($417) + ($418<<2)|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = $6;
    $422 = (($421) + 1)|0;
    $423 = (($420) + ($422<<1)|0);
    HEAP16[$423>>1] = 406;
    $424 = $3;
    $425 = ((($424)) + 1804|0);
    $426 = $5;
    $427 = (($425) + ($426<<2)|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = $6;
    $430 = (($429) + 1)|0;
    $431 = (($428) + ($430<<1)|0);
    HEAP16[$431>>1] = 406;
    $432 = $3;
    $433 = ((($432)) + 44|0);
    $434 = ((($433)) + 10|0);
    HEAP8[$434>>0] = 1;
    $435 = $3;
    $436 = ((($435)) + 192|0);
    $437 = $4;
    $438 = (($436) + ($437<<2)|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = (($439) + 2)|0;
    HEAP32[$438>>2] = $440;
    $2 = 1;
    $723 = $2;
    STACKTOP = sp;return ($723|0);
   }
  }
 }
 else if ((label|0) == 56) {
  $666 = $3;
  $667 = ((($666)) + 200|0);
  $668 = $4;
  $669 = (($667) + ($668<<2)|0);
  HEAP32[$669>>2] = 0;
  $670 = $7;
  $671 = $3;
  $672 = ((($671)) + 380|0);
  HEAP32[$672>>2] = $670;
  $673 = $3;
  $674 = ((($673)) + 384|0);
  $675 = HEAP32[$674>>2]|0;
  $676 = $3;
  $677 = ((($676)) + 376|0);
  HEAP32[$677>>2] = $675;
  $678 = $3;
  $679 = ((($678)) + 44|0);
  $680 = ((($679)) + 9|0);
  HEAP8[$680>>0] = 1;
  $2 = 1;
  $723 = $2;
  STACKTOP = sp;return ($723|0);
 }
 $2 = 0;
 $723 = $2;
 STACKTOP = sp;return ($723|0);
}
function _Lplayer_walk_w($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 4;
 $22 = $5;
 $23 = (($22) - 1)|0;
 $5 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 92: case 91: case 90: case 89: case 88: case 87: case 86: case 85: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 8: case 7:  {
   $33 = $3;
   $34 = ((($33)) + 184|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   HEAP32[$36>>2] = $38;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 13: case 12: case 11:  {
   $39 = $3;
   $40 = ((($39)) + 1372|0);
   $41 = $5;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = 406;
   $46 = $3;
   $47 = ((($46)) + 1804|0);
   $48 = $5;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<1)|0);
   HEAP16[$52>>1] = 406;
   $53 = $3;
   $54 = ((($53)) + 44|0);
   $55 = ((($54)) + 12|0);
   HEAP8[$55>>0] = 1;
   $56 = $3;
   $57 = ((($56)) + 184|0);
   $58 = $4;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) - 1)|0;
   HEAP32[$59>>2] = $61;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 15: case 14:  {
   $62 = $3;
   $63 = ((($62)) + 1372|0);
   $64 = $5;
   $65 = (($63) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $6;
   $68 = (($66) + ($67<<1)|0);
   HEAP16[$68>>1] = 15;
   $69 = $3;
   $70 = ((($69)) + 1804|0);
   $71 = $5;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $6;
   $75 = (($73) + ($74<<1)|0);
   HEAP16[$75>>1] = 14;
   $76 = $3;
   $77 = ((($76)) + 44|0);
   $78 = ((($77)) + 12|0);
   HEAP8[$78>>0] = 1;
   $79 = $3;
   $80 = ((($79)) + 184|0);
   $81 = $4;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) - 1)|0;
   HEAP32[$82>>2] = $84;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 24:  {
   $85 = $3;
   $86 = ((($85)) + 1372|0);
   $87 = $5;
   $88 = (($86) + ($87<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $6;
   $91 = (($89) + ($90<<1)|0);
   HEAP16[$91>>1] = 28;
   $92 = $3;
   $93 = ((($92)) + 1804|0);
   $94 = $5;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $6;
   $98 = (($96) + ($97<<1)|0);
   HEAP16[$98>>1] = 406;
   $99 = $3;
   $100 = ((($99)) + 44|0);
   $101 = ((($100)) + 11|0);
   HEAP8[$101>>0] = 1;
   $102 = $3;
   $103 = ((($102)) + 184|0);
   $104 = $4;
   $105 = (($103) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) - 1)|0;
   HEAP32[$105>>2] = $107;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 29:  {
   $108 = $3;
   $109 = ((($108)) + 1372|0);
   $110 = $5;
   $111 = (($109) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $6;
   $114 = (($112) + ($113<<1)|0);
   HEAP16[$114>>1] = 33;
   $115 = $3;
   $116 = ((($115)) + 1804|0);
   $117 = $5;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $6;
   $121 = (($119) + ($120<<1)|0);
   HEAP16[$121>>1] = 406;
   $122 = $3;
   $123 = ((($122)) + 44|0);
   $124 = ((($123)) + 11|0);
   HEAP8[$124>>0] = 1;
   $125 = $3;
   $126 = ((($125)) + 184|0);
   $127 = $4;
   $128 = (($126) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) - 1)|0;
   HEAP32[$128>>2] = $130;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
   $131 = $3;
   $132 = ((($131)) + 200|0);
   $133 = $4;
   $134 = (($132) + ($133<<2)|0);
   HEAP32[$134>>2] = 8;
   $135 = $3;
   $136 = ((($135)) + 1372|0);
   $137 = $5;
   $138 = (($137) - 1)|0;
   $139 = (($136) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143 << 16 >> 16;
   switch ($144|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $145 = $3;
    $146 = ((($145)) + 1372|0);
    $147 = $5;
    $148 = (($146) + ($147<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $6;
    $151 = (($149) + ($150<<1)|0);
    HEAP16[$151>>1] = 56;
    $152 = $3;
    $153 = ((($152)) + 1804|0);
    $154 = $5;
    $155 = (($153) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $6;
    $158 = (($156) + ($157<<1)|0);
    HEAP16[$158>>1] = 406;
    $159 = $3;
    $160 = ((($159)) + 1372|0);
    $161 = $5;
    $162 = (($160) + ($161<<2)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $6;
    $165 = (($164) - 1)|0;
    $166 = (($163) + ($165<<1)|0);
    $167 = HEAP16[$166>>1]|0;
    $168 = $167 << 16 >> 16;
    $169 = ($168|0)==(11);
    if ($169) {
     $170 = $3;
     $171 = ((($170)) + 1372|0);
     $172 = $5;
     $173 = (($171) + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $6;
     $176 = (($175) - 1)|0;
     $177 = (($174) + ($176<<1)|0);
     HEAP16[$177>>1] = 12;
    }
    $178 = $3;
    $179 = ((($178)) + 1372|0);
    $180 = $5;
    $181 = (($180) - 2)|0;
    $182 = (($179) + ($181<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = $6;
    $185 = (($184) - 1)|0;
    $186 = (($183) + ($185<<1)|0);
    $187 = HEAP16[$186>>1]|0;
    $188 = $187 << 16 >> 16;
    $189 = ($188|0)==(11);
    if ($189) {
     $190 = $3;
     $191 = ((($190)) + 1372|0);
     $192 = $5;
     $193 = (($192) - 2)|0;
     $194 = (($191) + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $6;
     $197 = (($196) - 1)|0;
     $198 = (($195) + ($197<<1)|0);
     HEAP16[$198>>1] = 13;
    }
    $199 = $3;
    $200 = ((($199)) + 44|0);
    $201 = ((($200)) + 30|0);
    HEAP8[$201>>0] = 1;
    $202 = $3;
    $203 = ((($202)) + 44|0);
    $204 = ((($203)) + 7|0);
    HEAP8[$204>>0] = 1;
    $205 = $3;
    $206 = ((($205)) + 184|0);
    $207 = $4;
    $208 = (($206) + ($207<<2)|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) - 1)|0;
    HEAP32[$208>>2] = $210;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $211 = $3;
    $212 = ((($211)) + 1372|0);
    $213 = $5;
    $214 = (($212) + ($213<<2)|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $6;
    $217 = (($215) + ($216<<1)|0);
    HEAP16[$217>>1] = 56;
    $218 = $3;
    $219 = ((($218)) + 1804|0);
    $220 = $5;
    $221 = (($219) + ($220<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $6;
    $224 = (($222) + ($223<<1)|0);
    HEAP16[$224>>1] = 406;
    $225 = $3;
    $226 = ((($225)) + 1372|0);
    $227 = $5;
    $228 = (($227) - 1)|0;
    $229 = (($226) + ($228<<2)|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $6;
    $232 = (($230) + ($231<<1)|0);
    HEAP16[$232>>1] = 55;
    $233 = $3;
    $234 = ((($233)) + 1804|0);
    $235 = $5;
    $236 = (($235) - 1)|0;
    $237 = (($234) + ($236<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $6;
    $240 = (($238) + ($239<<1)|0);
    HEAP16[$240>>1] = 42;
    $241 = $3;
    $242 = ((($241)) + 44|0);
    $243 = ((($242)) + 7|0);
    HEAP8[$243>>0] = 1;
    $244 = $3;
    $245 = ((($244)) + 184|0);
    $246 = $4;
    $247 = (($245) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) - 1)|0;
    HEAP32[$247>>2] = $249;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 150: case 149:  {
   $250 = $3;
   $251 = ((($250)) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($252) - 1)|0;
   HEAP32[$251>>2] = $253;
   $254 = $3;
   $255 = ((($254)) + 300|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $3;
   $258 = ((($257)) + 12|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($259) + ($256))|0;
   HEAP32[$258>>2] = $260;
   $261 = $3;
   $262 = ((($261)) + 1372|0);
   $263 = $5;
   $264 = (($262) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $6;
   $267 = (($265) + ($266<<1)|0);
   HEAP16[$267>>1] = 159;
   $268 = $3;
   $269 = ((($268)) + 1804|0);
   $270 = $5;
   $271 = (($269) + ($270<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $6;
   $274 = (($272) + ($273<<1)|0);
   HEAP16[$274>>1] = 406;
   $275 = $3;
   $276 = ((($275)) + 44|0);
   $277 = ((($276)) + 5|0);
   HEAP8[$277>>0] = 1;
   $278 = $3;
   $279 = ((($278)) + 184|0);
   $280 = $4;
   $281 = (($279) + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) - 1)|0;
   HEAP32[$281>>2] = $283;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 161: case 160:  {
   $284 = $3;
   $285 = ((($284)) + 8|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) - 3)|0;
   HEAP32[$285>>2] = $287;
   $288 = $3;
   $289 = ((($288)) + 276|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $3;
   $292 = ((($291)) + 12|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + ($290))|0;
   HEAP32[$292>>2] = $294;
   $295 = $3;
   $296 = ((($295)) + 1372|0);
   $297 = $5;
   $298 = (($296) + ($297<<2)|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $6;
   $301 = (($299) + ($300<<1)|0);
   HEAP16[$301>>1] = 170;
   $302 = $3;
   $303 = ((($302)) + 1804|0);
   $304 = $5;
   $305 = (($303) + ($304<<2)|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = $6;
   $308 = (($306) + ($307<<1)|0);
   HEAP16[$308>>1] = 406;
   $309 = $3;
   $310 = ((($309)) + 44|0);
   $311 = ((($310)) + 5|0);
   HEAP8[$311>>0] = 1;
   $312 = $3;
   $313 = ((($312)) + 184|0);
   $314 = $4;
   $315 = (($313) + ($314<<2)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) - 1)|0;
   HEAP32[$315>>2] = $317;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 172:  {
   $318 = $3;
   $319 = ((($318)) + 200|0);
   $320 = $4;
   $321 = (($319) + ($320<<2)|0);
   HEAP32[$321>>2] = 8;
   $322 = $3;
   $323 = ((($322)) + 1372|0);
   $324 = $5;
   $325 = (($324) - 1)|0;
   $326 = (($323) + ($325<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $6;
   $329 = (($327) + ($328<<1)|0);
   $330 = HEAP16[$329>>1]|0;
   $331 = $330 << 16 >> 16;
   switch ($331|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $332 = $3;
    $333 = ((($332)) + 1372|0);
    $334 = $5;
    $335 = (($333) + ($334<<2)|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $6;
    $338 = (($336) + ($337<<1)|0);
    HEAP16[$338>>1] = 180;
    $339 = $3;
    $340 = ((($339)) + 1804|0);
    $341 = $5;
    $342 = (($340) + ($341<<2)|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = $6;
    $345 = (($343) + ($344<<1)|0);
    HEAP16[$345>>1] = 406;
    $346 = $3;
    $347 = ((($346)) + 1372|0);
    $348 = $5;
    $349 = (($347) + ($348<<2)|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = $6;
    $352 = (($351) - 1)|0;
    $353 = (($350) + ($352<<1)|0);
    $354 = HEAP16[$353>>1]|0;
    $355 = $354 << 16 >> 16;
    $356 = ($355|0)==(11);
    if ($356) {
     $357 = $3;
     $358 = ((($357)) + 1372|0);
     $359 = $5;
     $360 = (($358) + ($359<<2)|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = $6;
     $363 = (($362) - 1)|0;
     $364 = (($361) + ($363<<1)|0);
     HEAP16[$364>>1] = 12;
    }
    $365 = $3;
    $366 = ((($365)) + 1372|0);
    $367 = $5;
    $368 = (($367) - 2)|0;
    $369 = (($366) + ($368<<2)|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = $6;
    $372 = (($371) - 1)|0;
    $373 = (($370) + ($372<<1)|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $374 << 16 >> 16;
    $376 = ($375|0)==(11);
    if ($376) {
     $377 = $3;
     $378 = ((($377)) + 1372|0);
     $379 = $5;
     $380 = (($379) - 2)|0;
     $381 = (($378) + ($380<<2)|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = $6;
     $384 = (($383) - 1)|0;
     $385 = (($382) + ($384<<1)|0);
     HEAP16[$385>>1] = 13;
    }
    $386 = $3;
    $387 = ((($386)) + 44|0);
    $388 = ((($387)) + 30|0);
    HEAP8[$388>>0] = 1;
    $389 = $3;
    $390 = ((($389)) + 44|0);
    $391 = ((($390)) + 6|0);
    HEAP8[$391>>0] = 1;
    $392 = $3;
    $393 = ((($392)) + 184|0);
    $394 = $4;
    $395 = (($393) + ($394<<2)|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = (($396) - 1)|0;
    HEAP32[$395>>2] = $397;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $398 = $3;
    $399 = ((($398)) + 1372|0);
    $400 = $5;
    $401 = (($399) + ($400<<2)|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = $6;
    $404 = (($402) + ($403<<1)|0);
    HEAP16[$404>>1] = 180;
    $405 = $3;
    $406 = ((($405)) + 1804|0);
    $407 = $5;
    $408 = (($406) + ($407<<2)|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $6;
    $411 = (($409) + ($410<<1)|0);
    HEAP16[$411>>1] = 406;
    $412 = $3;
    $413 = ((($412)) + 1372|0);
    $414 = $5;
    $415 = (($414) - 1)|0;
    $416 = (($413) + ($415<<2)|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $6;
    $419 = (($417) + ($418<<1)|0);
    HEAP16[$419>>1] = 179;
    $420 = $3;
    $421 = ((($420)) + 1804|0);
    $422 = $5;
    $423 = (($422) - 1)|0;
    $424 = (($421) + ($423<<2)|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = $6;
    $427 = (($425) + ($426<<1)|0);
    HEAP16[$427>>1] = 173;
    $428 = $3;
    $429 = ((($428)) + 44|0);
    $430 = ((($429)) + 6|0);
    HEAP8[$430>>0] = 1;
    $431 = $3;
    $432 = ((($431)) + 184|0);
    $433 = $4;
    $434 = (($432) + ($433<<2)|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = (($435) - 1)|0;
    HEAP32[$434>>2] = $436;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 181:  {
   $437 = $3;
   $438 = ((($437)) + 200|0);
   $439 = $4;
   $440 = (($438) + ($439<<2)|0);
   HEAP32[$440>>2] = 8;
   $441 = $3;
   $442 = ((($441)) + 1372|0);
   $443 = $5;
   $444 = (($443) - 1)|0;
   $445 = (($442) + ($444<<2)|0);
   $446 = HEAP32[$445>>2]|0;
   $447 = $6;
   $448 = (($446) + ($447<<1)|0);
   $449 = HEAP16[$448>>1]|0;
   $450 = $449 << 16 >> 16;
   switch ($450|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $451 = $3;
    $452 = ((($451)) + 1372|0);
    $453 = $5;
    $454 = (($452) + ($453<<2)|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = $6;
    $457 = (($455) + ($456<<1)|0);
    HEAP16[$457>>1] = 189;
    $458 = $3;
    $459 = ((($458)) + 1804|0);
    $460 = $5;
    $461 = (($459) + ($460<<2)|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = $6;
    $464 = (($462) + ($463<<1)|0);
    HEAP16[$464>>1] = 406;
    $465 = $3;
    $466 = ((($465)) + 1372|0);
    $467 = $5;
    $468 = (($466) + ($467<<2)|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = $6;
    $471 = (($470) - 1)|0;
    $472 = (($469) + ($471<<1)|0);
    $473 = HEAP16[$472>>1]|0;
    $474 = $473 << 16 >> 16;
    $475 = ($474|0)==(11);
    if ($475) {
     $476 = $3;
     $477 = ((($476)) + 1372|0);
     $478 = $5;
     $479 = (($477) + ($478<<2)|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = $6;
     $482 = (($481) - 1)|0;
     $483 = (($480) + ($482<<1)|0);
     HEAP16[$483>>1] = 12;
    }
    $484 = $3;
    $485 = ((($484)) + 1372|0);
    $486 = $5;
    $487 = (($486) - 2)|0;
    $488 = (($485) + ($487<<2)|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $6;
    $491 = (($490) - 1)|0;
    $492 = (($489) + ($491<<1)|0);
    $493 = HEAP16[$492>>1]|0;
    $494 = $493 << 16 >> 16;
    $495 = ($494|0)==(11);
    if ($495) {
     $496 = $3;
     $497 = ((($496)) + 1372|0);
     $498 = $5;
     $499 = (($498) - 2)|0;
     $500 = (($497) + ($499<<2)|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $6;
     $503 = (($502) - 1)|0;
     $504 = (($501) + ($503<<1)|0);
     HEAP16[$504>>1] = 13;
    }
    $505 = $3;
    $506 = ((($505)) + 44|0);
    $507 = ((($506)) + 30|0);
    HEAP8[$507>>0] = 1;
    $508 = $3;
    $509 = ((($508)) + 44|0);
    $510 = ((($509)) + 6|0);
    HEAP8[$510>>0] = 1;
    $511 = $3;
    $512 = ((($511)) + 184|0);
    $513 = $4;
    $514 = (($512) + ($513<<2)|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = (($515) - 1)|0;
    HEAP32[$514>>2] = $516;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $517 = $3;
    $518 = ((($517)) + 1372|0);
    $519 = $5;
    $520 = (($518) + ($519<<2)|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = $6;
    $523 = (($521) + ($522<<1)|0);
    HEAP16[$523>>1] = 189;
    $524 = $3;
    $525 = ((($524)) + 1804|0);
    $526 = $5;
    $527 = (($525) + ($526<<2)|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = $6;
    $530 = (($528) + ($529<<1)|0);
    HEAP16[$530>>1] = 406;
    $531 = $3;
    $532 = ((($531)) + 1372|0);
    $533 = $5;
    $534 = (($533) - 1)|0;
    $535 = (($532) + ($534<<2)|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = $6;
    $538 = (($536) + ($537<<1)|0);
    HEAP16[$538>>1] = 188;
    $539 = $3;
    $540 = ((($539)) + 1804|0);
    $541 = $5;
    $542 = (($541) - 1)|0;
    $543 = (($540) + ($542<<2)|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $6;
    $546 = (($544) + ($545<<1)|0);
    HEAP16[$546>>1] = 182;
    $547 = $3;
    $548 = ((($547)) + 44|0);
    $549 = ((($548)) + 6|0);
    HEAP8[$549>>0] = 1;
    $550 = $3;
    $551 = ((($550)) + 184|0);
    $552 = $4;
    $553 = (($551) + ($552<<2)|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) - 1)|0;
    HEAP32[$553>>2] = $555;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 191:  {
   $556 = $3;
   $557 = ((($556)) + 200|0);
   $558 = $4;
   $559 = (($557) + ($558<<2)|0);
   HEAP32[$559>>2] = 8;
   $560 = $3;
   $561 = ((($560)) + 1372|0);
   $562 = $5;
   $563 = (($562) - 1)|0;
   $564 = (($561) + ($563<<2)|0);
   $565 = HEAP32[$564>>2]|0;
   $566 = $6;
   $567 = (($565) + ($566<<1)|0);
   $568 = HEAP16[$567>>1]|0;
   $569 = $568 << 16 >> 16;
   switch ($569|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $570 = $3;
    $571 = ((($570)) + 1372|0);
    $572 = $5;
    $573 = (($571) + ($572<<2)|0);
    $574 = HEAP32[$573>>2]|0;
    $575 = $6;
    $576 = (($574) + ($575<<1)|0);
    HEAP16[$576>>1] = 199;
    $577 = $3;
    $578 = ((($577)) + 1804|0);
    $579 = $5;
    $580 = (($578) + ($579<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = $6;
    $583 = (($581) + ($582<<1)|0);
    HEAP16[$583>>1] = 406;
    $584 = $3;
    $585 = ((($584)) + 1372|0);
    $586 = $5;
    $587 = (($585) + ($586<<2)|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = $6;
    $590 = (($589) - 1)|0;
    $591 = (($588) + ($590<<1)|0);
    $592 = HEAP16[$591>>1]|0;
    $593 = $592 << 16 >> 16;
    $594 = ($593|0)==(11);
    if ($594) {
     $595 = $3;
     $596 = ((($595)) + 1372|0);
     $597 = $5;
     $598 = (($596) + ($597<<2)|0);
     $599 = HEAP32[$598>>2]|0;
     $600 = $6;
     $601 = (($600) - 1)|0;
     $602 = (($599) + ($601<<1)|0);
     HEAP16[$602>>1] = 12;
    }
    $603 = $3;
    $604 = ((($603)) + 1372|0);
    $605 = $5;
    $606 = (($605) - 2)|0;
    $607 = (($604) + ($606<<2)|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = $6;
    $610 = (($609) - 1)|0;
    $611 = (($608) + ($610<<1)|0);
    $612 = HEAP16[$611>>1]|0;
    $613 = $612 << 16 >> 16;
    $614 = ($613|0)==(11);
    if ($614) {
     $615 = $3;
     $616 = ((($615)) + 1372|0);
     $617 = $5;
     $618 = (($617) - 2)|0;
     $619 = (($616) + ($618<<2)|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $6;
     $622 = (($621) - 1)|0;
     $623 = (($620) + ($622<<1)|0);
     HEAP16[$623>>1] = 13;
    }
    $624 = $3;
    $625 = ((($624)) + 44|0);
    $626 = ((($625)) + 30|0);
    HEAP8[$626>>0] = 1;
    $627 = $3;
    $628 = ((($627)) + 44|0);
    $629 = ((($628)) + 6|0);
    HEAP8[$629>>0] = 1;
    $630 = $3;
    $631 = ((($630)) + 184|0);
    $632 = $4;
    $633 = (($631) + ($632<<2)|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = (($634) - 1)|0;
    HEAP32[$633>>2] = $635;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $636 = $3;
    $637 = ((($636)) + 1372|0);
    $638 = $5;
    $639 = (($637) + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = $6;
    $642 = (($640) + ($641<<1)|0);
    HEAP16[$642>>1] = 199;
    $643 = $3;
    $644 = ((($643)) + 1804|0);
    $645 = $5;
    $646 = (($644) + ($645<<2)|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = $6;
    $649 = (($647) + ($648<<1)|0);
    HEAP16[$649>>1] = 406;
    $650 = $3;
    $651 = ((($650)) + 1372|0);
    $652 = $5;
    $653 = (($652) - 1)|0;
    $654 = (($651) + ($653<<2)|0);
    $655 = HEAP32[$654>>2]|0;
    $656 = $6;
    $657 = (($655) + ($656<<1)|0);
    HEAP16[$657>>1] = 198;
    $658 = $3;
    $659 = ((($658)) + 1804|0);
    $660 = $5;
    $661 = (($660) - 1)|0;
    $662 = (($659) + ($661<<2)|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $6;
    $665 = (($663) + ($664<<1)|0);
    HEAP16[$665>>1] = 192;
    $666 = $3;
    $667 = ((($666)) + 44|0);
    $668 = ((($667)) + 6|0);
    HEAP8[$668>>0] = 1;
    $669 = $3;
    $670 = ((($669)) + 184|0);
    $671 = $4;
    $672 = (($670) + ($671<<2)|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = (($673) - 1)|0;
    HEAP32[$672>>2] = $674;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 201:  {
   $675 = $3;
   $676 = ((($675)) + 200|0);
   $677 = $4;
   $678 = (($676) + ($677<<2)|0);
   HEAP32[$678>>2] = 8;
   $679 = $3;
   $680 = ((($679)) + 1372|0);
   $681 = $5;
   $682 = (($681) - 1)|0;
   $683 = (($680) + ($682<<2)|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = $6;
   $686 = (($684) + ($685<<1)|0);
   $687 = HEAP16[$686>>1]|0;
   $688 = $687 << 16 >> 16;
   switch ($688|0) {
   case 74: case 73:  {
    $689 = $3;
    $690 = ((($689)) + 352|0);
    $691 = HEAP32[$690>>2]|0;
    $692 = $3;
    $693 = ((($692)) + 12|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (($694) + ($691))|0;
    HEAP32[$693>>2] = $695;
    $696 = $3;
    $697 = ((($696)) + 1372|0);
    $698 = $5;
    $699 = (($697) + ($698<<2)|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = $6;
    $702 = (($700) + ($701<<1)|0);
    HEAP16[$702>>1] = 215;
    $703 = $3;
    $704 = ((($703)) + 1804|0);
    $705 = $5;
    $706 = (($704) + ($705<<2)|0);
    $707 = HEAP32[$706>>2]|0;
    $708 = $6;
    $709 = (($707) + ($708<<1)|0);
    HEAP16[$709>>1] = 406;
    $710 = $3;
    $711 = ((($710)) + 1372|0);
    $712 = $5;
    $713 = (($712) - 1)|0;
    $714 = (($711) + ($713<<2)|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = $6;
    $717 = (($715) + ($716<<1)|0);
    HEAP16[$717>>1] = 214;
    $718 = $3;
    $719 = ((($718)) + 1804|0);
    $720 = $5;
    $721 = (($720) - 1)|0;
    $722 = (($719) + ($721<<2)|0);
    $723 = HEAP32[$722>>2]|0;
    $724 = $6;
    $725 = (($723) + ($724<<1)|0);
    HEAP16[$725>>1] = 205;
    $726 = $3;
    $727 = ((($726)) + 44|0);
    $728 = ((($727)) + 18|0);
    HEAP8[$728>>0] = 1;
    $729 = $3;
    $730 = ((($729)) + 44|0);
    $731 = ((($730)) + 6|0);
    HEAP8[$731>>0] = 1;
    $732 = $3;
    $733 = ((($732)) + 184|0);
    $734 = $4;
    $735 = (($733) + ($734<<2)|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = (($736) - 1)|0;
    HEAP32[$735>>2] = $737;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $738 = $3;
    $739 = ((($738)) + 1372|0);
    $740 = $5;
    $741 = (($739) + ($740<<2)|0);
    $742 = HEAP32[$741>>2]|0;
    $743 = $6;
    $744 = (($742) + ($743<<1)|0);
    HEAP16[$744>>1] = 211;
    $745 = $3;
    $746 = ((($745)) + 1804|0);
    $747 = $5;
    $748 = (($746) + ($747<<2)|0);
    $749 = HEAP32[$748>>2]|0;
    $750 = $6;
    $751 = (($749) + ($750<<1)|0);
    HEAP16[$751>>1] = 406;
    $752 = $3;
    $753 = ((($752)) + 1372|0);
    $754 = $5;
    $755 = (($753) + ($754<<2)|0);
    $756 = HEAP32[$755>>2]|0;
    $757 = $6;
    $758 = (($757) - 1)|0;
    $759 = (($756) + ($758<<1)|0);
    $760 = HEAP16[$759>>1]|0;
    $761 = $760 << 16 >> 16;
    $762 = ($761|0)==(11);
    if ($762) {
     $763 = $3;
     $764 = ((($763)) + 1372|0);
     $765 = $5;
     $766 = (($764) + ($765<<2)|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = $6;
     $769 = (($768) - 1)|0;
     $770 = (($767) + ($769<<1)|0);
     HEAP16[$770>>1] = 12;
    }
    $771 = $3;
    $772 = ((($771)) + 1372|0);
    $773 = $5;
    $774 = (($773) - 2)|0;
    $775 = (($772) + ($774<<2)|0);
    $776 = HEAP32[$775>>2]|0;
    $777 = $6;
    $778 = (($777) - 1)|0;
    $779 = (($776) + ($778<<1)|0);
    $780 = HEAP16[$779>>1]|0;
    $781 = $780 << 16 >> 16;
    $782 = ($781|0)==(11);
    if ($782) {
     $783 = $3;
     $784 = ((($783)) + 1372|0);
     $785 = $5;
     $786 = (($785) - 2)|0;
     $787 = (($784) + ($786<<2)|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = $6;
     $790 = (($789) - 1)|0;
     $791 = (($788) + ($790<<1)|0);
     HEAP16[$791>>1] = 13;
    }
    $792 = $3;
    $793 = ((($792)) + 44|0);
    $794 = ((($793)) + 30|0);
    HEAP8[$794>>0] = 1;
    $795 = $3;
    $796 = ((($795)) + 44|0);
    $797 = ((($796)) + 6|0);
    HEAP8[$797>>0] = 1;
    $798 = $3;
    $799 = ((($798)) + 184|0);
    $800 = $4;
    $801 = (($799) + ($800<<2)|0);
    $802 = HEAP32[$801>>2]|0;
    $803 = (($802) - 1)|0;
    HEAP32[$801>>2] = $803;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $804 = $3;
    $805 = ((($804)) + 1372|0);
    $806 = $5;
    $807 = (($805) + ($806<<2)|0);
    $808 = HEAP32[$807>>2]|0;
    $809 = $6;
    $810 = (($808) + ($809<<1)|0);
    HEAP16[$810>>1] = 211;
    $811 = $3;
    $812 = ((($811)) + 1804|0);
    $813 = $5;
    $814 = (($812) + ($813<<2)|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = $6;
    $817 = (($815) + ($816<<1)|0);
    HEAP16[$817>>1] = 406;
    $818 = $3;
    $819 = ((($818)) + 1372|0);
    $820 = $5;
    $821 = (($820) - 1)|0;
    $822 = (($819) + ($821<<2)|0);
    $823 = HEAP32[$822>>2]|0;
    $824 = $6;
    $825 = (($823) + ($824<<1)|0);
    HEAP16[$825>>1] = 210;
    $826 = $3;
    $827 = ((($826)) + 1804|0);
    $828 = $5;
    $829 = (($828) - 1)|0;
    $830 = (($827) + ($829<<2)|0);
    $831 = HEAP32[$830>>2]|0;
    $832 = $6;
    $833 = (($831) + ($832<<1)|0);
    HEAP16[$833>>1] = 205;
    $834 = $3;
    $835 = ((($834)) + 44|0);
    $836 = ((($835)) + 6|0);
    HEAP8[$836>>0] = 1;
    $837 = $3;
    $838 = ((($837)) + 184|0);
    $839 = $4;
    $840 = (($838) + ($839<<2)|0);
    $841 = HEAP32[$840>>2]|0;
    $842 = (($841) - 1)|0;
    HEAP32[$840>>2] = $842;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 310: case 309: case 308: case 307: case 205: case 204: case 202: case 192: case 182: case 173:  {
   $843 = $3;
   $844 = ((($843)) + 200|0);
   $845 = $4;
   $846 = (($844) + ($845<<2)|0);
   HEAP32[$846>>2] = 8;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 228:  {
   $847 = $3;
   $848 = ((($847)) + 280|0);
   $849 = $4;
   $850 = (($848) + ($849<<2)|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = ($851|0)<(9999);
   if ($852) {
    $853 = $3;
    $854 = ((($853)) + 280|0);
    $855 = $4;
    $856 = (($854) + ($855<<2)|0);
    $857 = HEAP32[$856>>2]|0;
    $858 = (($857) + 1)|0;
    HEAP32[$856>>2] = $858;
   }
   $859 = $3;
   $860 = ((($859)) + 288|0);
   $861 = HEAP32[$860>>2]|0;
   $862 = $3;
   $863 = ((($862)) + 12|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = (($864) + ($861))|0;
   HEAP32[$863>>2] = $865;
   $866 = $3;
   $867 = ((($866)) + 1372|0);
   $868 = $5;
   $869 = (($867) + ($868<<2)|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $6;
   $872 = (($870) + ($871<<1)|0);
   HEAP16[$872>>1] = 229;
   $873 = $3;
   $874 = ((($873)) + 1804|0);
   $875 = $5;
   $876 = (($874) + ($875<<2)|0);
   $877 = HEAP32[$876>>2]|0;
   $878 = $6;
   $879 = (($877) + ($878<<1)|0);
   HEAP16[$879>>1] = 406;
   $880 = $3;
   $881 = ((($880)) + 44|0);
   $882 = ((($881)) + 5|0);
   HEAP8[$882>>0] = 1;
   $883 = $3;
   $884 = ((($883)) + 184|0);
   $885 = $4;
   $886 = (($884) + ($885<<2)|0);
   $887 = HEAP32[$886>>2]|0;
   $888 = (($887) - 1)|0;
   HEAP32[$886>>2] = $888;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 234:  {
   $7 = 1;
   label = 62;
   break;
  }
  case 235:  {
   $7 = 2;
   label = 62;
   break;
  }
  case 236:  {
   $7 = 4;
   label = 62;
   break;
  }
  case 237:  {
   $7 = 8;
   label = 62;
   break;
  }
  case 238:  {
   $7 = 16;
   label = 62;
   break;
  }
  case 239:  {
   $7 = 32;
   label = 62;
   break;
  }
  case 240:  {
   $7 = 64;
   label = 62;
   break;
  }
  case 241:  {
   $7 = 128;
   label = 62;
   break;
  }
  case 250: case 242:  {
   $7 = 1;
   label = 71;
   break;
  }
  case 251: case 243:  {
   $7 = 2;
   label = 71;
   break;
  }
  case 252: case 244:  {
   $7 = 4;
   label = 71;
   break;
  }
  case 253: case 245:  {
   $7 = 8;
   label = 71;
   break;
  }
  case 254: case 246:  {
   $7 = 16;
   label = 71;
   break;
  }
  case 255: case 247:  {
   $7 = 32;
   label = 71;
   break;
  }
  case 256: case 248:  {
   $7 = 64;
   label = 71;
   break;
  }
  case 257: case 249:  {
   $7 = 128;
   label = 71;
   break;
  }
  case 258:  {
   $972 = $3;
   $973 = ((($972)) + 200|0);
   $974 = $4;
   $975 = (($973) + ($974<<2)|0);
   HEAP32[$975>>2] = 8;
   $976 = $3;
   $977 = ((($976)) + 1372|0);
   $978 = $5;
   $979 = (($978) - 1)|0;
   $980 = (($977) + ($979<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = $6;
   $983 = (($981) + ($982<<1)|0);
   $984 = HEAP16[$983>>1]|0;
   $985 = $984 << 16 >> 16;
   switch ($985|0) {
   case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16:  {
    $986 = $3;
    $987 = ((($986)) + 1372|0);
    $988 = $5;
    $989 = (($987) + ($988<<2)|0);
    $990 = HEAP32[$989>>2]|0;
    $991 = $6;
    $992 = (($990) + ($991<<1)|0);
    HEAP16[$992>>1] = 266;
    $993 = $3;
    $994 = ((($993)) + 1804|0);
    $995 = $5;
    $996 = (($994) + ($995<<2)|0);
    $997 = HEAP32[$996>>2]|0;
    $998 = $6;
    $999 = (($997) + ($998<<1)|0);
    HEAP16[$999>>1] = 406;
    $1000 = $3;
    $1001 = ((($1000)) + 1372|0);
    $1002 = $5;
    $1003 = (($1001) + ($1002<<2)|0);
    $1004 = HEAP32[$1003>>2]|0;
    $1005 = $6;
    $1006 = (($1005) - 1)|0;
    $1007 = (($1004) + ($1006<<1)|0);
    $1008 = HEAP16[$1007>>1]|0;
    $1009 = $1008 << 16 >> 16;
    $1010 = ($1009|0)==(11);
    if ($1010) {
     $1011 = $3;
     $1012 = ((($1011)) + 1372|0);
     $1013 = $5;
     $1014 = (($1012) + ($1013<<2)|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = $6;
     $1017 = (($1016) - 1)|0;
     $1018 = (($1015) + ($1017<<1)|0);
     HEAP16[$1018>>1] = 12;
    }
    $1019 = $3;
    $1020 = ((($1019)) + 1372|0);
    $1021 = $5;
    $1022 = (($1021) - 2)|0;
    $1023 = (($1020) + ($1022<<2)|0);
    $1024 = HEAP32[$1023>>2]|0;
    $1025 = $6;
    $1026 = (($1025) - 1)|0;
    $1027 = (($1024) + ($1026<<1)|0);
    $1028 = HEAP16[$1027>>1]|0;
    $1029 = $1028 << 16 >> 16;
    $1030 = ($1029|0)==(11);
    if ($1030) {
     $1031 = $3;
     $1032 = ((($1031)) + 1372|0);
     $1033 = $5;
     $1034 = (($1033) - 2)|0;
     $1035 = (($1032) + ($1034<<2)|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $6;
     $1038 = (($1037) - 1)|0;
     $1039 = (($1036) + ($1038<<1)|0);
     HEAP16[$1039>>1] = 13;
    }
    $1040 = $3;
    $1041 = ((($1040)) + 44|0);
    $1042 = ((($1041)) + 30|0);
    HEAP8[$1042>>0] = 1;
    $1043 = $3;
    $1044 = ((($1043)) + 44|0);
    $1045 = ((($1044)) + 7|0);
    HEAP8[$1045>>0] = 1;
    $1046 = $3;
    $1047 = ((($1046)) + 184|0);
    $1048 = $4;
    $1049 = (($1047) + ($1048<<2)|0);
    $1050 = HEAP32[$1049>>2]|0;
    $1051 = (($1050) - 1)|0;
    HEAP32[$1049>>2] = $1051;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   case 13: case 12: case 11:  {
    $1052 = $3;
    $1053 = ((($1052)) + 1372|0);
    $1054 = $5;
    $1055 = (($1053) + ($1054<<2)|0);
    $1056 = HEAP32[$1055>>2]|0;
    $1057 = $6;
    $1058 = (($1056) + ($1057<<1)|0);
    HEAP16[$1058>>1] = 266;
    $1059 = $3;
    $1060 = ((($1059)) + 1804|0);
    $1061 = $5;
    $1062 = (($1060) + ($1061<<2)|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = $6;
    $1065 = (($1063) + ($1064<<1)|0);
    HEAP16[$1065>>1] = 406;
    $1066 = $3;
    $1067 = ((($1066)) + 1372|0);
    $1068 = $5;
    $1069 = (($1068) - 1)|0;
    $1070 = (($1067) + ($1069<<2)|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = $6;
    $1073 = (($1071) + ($1072<<1)|0);
    HEAP16[$1073>>1] = 265;
    $1074 = $3;
    $1075 = ((($1074)) + 1804|0);
    $1076 = $5;
    $1077 = (($1076) - 1)|0;
    $1078 = (($1075) + ($1077<<2)|0);
    $1079 = HEAP32[$1078>>2]|0;
    $1080 = $6;
    $1081 = (($1079) + ($1080<<1)|0);
    HEAP16[$1081>>1] = 258;
    $1082 = $3;
    $1083 = ((($1082)) + 44|0);
    $1084 = ((($1083)) + 7|0);
    HEAP8[$1084>>0] = 1;
    $1085 = $3;
    $1086 = ((($1085)) + 184|0);
    $1087 = $4;
    $1088 = (($1086) + ($1087<<2)|0);
    $1089 = HEAP32[$1088>>2]|0;
    $1090 = (($1089) - 1)|0;
    HEAP32[$1088>>2] = $1090;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
    break;
   }
   default: {
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
   }
   break;
  }
  case 286:  {
   $1091 = $3;
   $1092 = ((($1091)) + 200|0);
   $1093 = $4;
   $1094 = (($1092) + ($1093<<2)|0);
   HEAP32[$1094>>2] = 0;
   $1095 = $3;
   $1096 = ((($1095)) + 372|0);
   $1097 = HEAP32[$1096>>2]|0;
   $1098 = $3;
   $1099 = ((($1098)) + 360|0);
   HEAP32[$1099>>2] = $1097;
   $1100 = $5;
   $1101 = $3;
   $1102 = ((($1101)) + 88|0);
   $1103 = HEAP32[$1102>>2]|0;
   $1104 = ($1100|0)<($1103|0);
   if ($1104) {
    $1105 = $3;
    $1106 = ((($1105)) + 36|0);
    $1107 = HEAP32[$1106>>2]|0;
    $1108 = $5;
    $1109 = (($1108) + ($1107))|0;
    $5 = $1109;
   }
   $1110 = $5;
   $1111 = $3;
   $1112 = ((($1111)) + 364|0);
   HEAP32[$1112>>2] = $1110;
   $1113 = $6;
   $1114 = $3;
   $1115 = ((($1114)) + 368|0);
   HEAP32[$1115>>2] = $1113;
   $1116 = $3;
   $1117 = ((($1116)) + 44|0);
   $1118 = ((($1117)) + 9|0);
   HEAP8[$1118>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 288:  {
   $1119 = $3;
   $1120 = ((($1119)) + 200|0);
   $1121 = $4;
   $1122 = (($1120) + ($1121<<2)|0);
   HEAP32[$1122>>2] = 0;
   $1123 = $3;
   $1124 = ((($1123)) + 268|0);
   $1125 = HEAP32[$1124>>2]|0;
   $1126 = $3;
   $1127 = ((($1126)) + 256|0);
   HEAP32[$1127>>2] = $1125;
   $1128 = $3;
   $1129 = ((($1128)) + 264|0);
   $1130 = HEAP32[$1129>>2]|0;
   $1131 = ($1130|0)!=(0);
   $1132 = $1131 ^ 1;
   $1133 = $1132&1;
   $1134 = $3;
   $1135 = ((($1134)) + 264|0);
   HEAP32[$1135>>2] = $1133;
   $1136 = $3;
   $1137 = ((($1136)) + 44|0);
   $1138 = ((($1137)) + 9|0);
   HEAP8[$1138>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 303:  {
   $1139 = $3;
   $1140 = ((($1139)) + 328|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $3;
   $1143 = ((($1142)) + 320|0);
   HEAP32[$1143>>2] = $1141;
   $1144 = $3;
   $1145 = ((($1144)) + 324|0);
   $1146 = HEAP32[$1145>>2]|0;
   $1147 = $3;
   $1148 = ((($1147)) + 12|0);
   $1149 = HEAP32[$1148>>2]|0;
   $1150 = (($1149) + ($1146))|0;
   HEAP32[$1148>>2] = $1150;
   $1151 = $3;
   $1152 = ((($1151)) + 1372|0);
   $1153 = $5;
   $1154 = (($1152) + ($1153<<2)|0);
   $1155 = HEAP32[$1154>>2]|0;
   $1156 = $6;
   $1157 = (($1155) + ($1156<<1)|0);
   HEAP16[$1157>>1] = 10;
   $1158 = $3;
   $1159 = ((($1158)) + 1804|0);
   $1160 = $5;
   $1161 = (($1159) + ($1160<<2)|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = $6;
   $1164 = (($1162) + ($1163<<1)|0);
   HEAP16[$1164>>1] = 406;
   $1165 = $3;
   $1166 = ((($1165)) + 44|0);
   $1167 = ((($1166)) + 5|0);
   HEAP8[$1167>>0] = 1;
   $1168 = $3;
   $1169 = ((($1168)) + 184|0);
   $1170 = $4;
   $1171 = (($1169) + ($1170<<2)|0);
   $1172 = HEAP32[$1171>>2]|0;
   $1173 = (($1172) - 1)|0;
   HEAP32[$1171>>2] = $1173;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 304:  {
   $1174 = $3;
   $1175 = ((($1174)) + 340|0);
   $1176 = HEAP32[$1175>>2]|0;
   $1177 = $3;
   $1178 = ((($1177)) + 332|0);
   HEAP32[$1178>>2] = $1176;
   $1179 = $3;
   $1180 = ((($1179)) + 336|0);
   $1181 = HEAP32[$1180>>2]|0;
   $1182 = $3;
   $1183 = ((($1182)) + 12|0);
   $1184 = HEAP32[$1183>>2]|0;
   $1185 = (($1184) + ($1181))|0;
   HEAP32[$1183>>2] = $1185;
   $1186 = $3;
   $1187 = ((($1186)) + 1372|0);
   $1188 = $5;
   $1189 = (($1187) + ($1188<<2)|0);
   $1190 = HEAP32[$1189>>2]|0;
   $1191 = $6;
   $1192 = (($1190) + ($1191<<1)|0);
   HEAP16[$1192>>1] = 10;
   $1193 = $3;
   $1194 = ((($1193)) + 1804|0);
   $1195 = $5;
   $1196 = (($1194) + ($1195<<2)|0);
   $1197 = HEAP32[$1196>>2]|0;
   $1198 = $6;
   $1199 = (($1197) + ($1198<<1)|0);
   HEAP16[$1199>>1] = 406;
   $1200 = $3;
   $1201 = ((($1200)) + 44|0);
   $1202 = ((($1201)) + 5|0);
   HEAP8[$1202>>0] = 1;
   $1203 = $3;
   $1204 = ((($1203)) + 184|0);
   $1205 = $4;
   $1206 = (($1204) + ($1205<<2)|0);
   $1207 = HEAP32[$1206>>2]|0;
   $1208 = (($1207) - 1)|0;
   HEAP32[$1206>>2] = $1208;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 325:  {
   $7 = 0;
   label = 92;
   break;
  }
  case 326:  {
   $7 = 1;
   label = 92;
   break;
  }
  case 327:  {
   $7 = 2;
   label = 92;
   break;
  }
  case 328: case 329:  {
   $7 = 3;
   label = 92;
   break;
  }
  case 330:  {
   $1224 = $3;
   $1225 = ((($1224)) + 200|0);
   $1226 = $4;
   $1227 = (($1225) + ($1226<<2)|0);
   HEAP32[$1227>>2] = 0;
   $1228 = $3;
   $1229 = ((($1228)) + 376|0);
   HEAP32[$1229>>2] = 0;
   $1230 = $3;
   $1231 = ((($1230)) + 44|0);
   $1232 = ((($1231)) + 9|0);
   HEAP8[$1232>>0] = 1;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  case 334: case 333: case 332:  {
   $1233 = $3;
   $1234 = ((($1233)) + 16|0);
   $1235 = $4;
   $1236 = (($1234) + ($1235<<2)|0);
   HEAP32[$1236>>2] = 1;
   $1237 = $3;
   $1238 = ((($1237)) + 16|0);
   $1239 = HEAP32[$1238>>2]|0;
   $1240 = ($1239|0)>(0);
   if ($1240) {
    $1241 = $3;
    $1242 = ((($1241)) + 16|0);
    $1243 = ((($1242)) + 4|0);
    $1244 = HEAP32[$1243>>2]|0;
    $1245 = ($1244|0)>(0);
    if ($1245) {
     $1246 = $3;
     $1247 = ((($1246)) + 4|0);
     $1248 = HEAP32[$1247>>2]|0;
     $1249 = $3;
     $1250 = ((($1249)) + 304|0);
     $1251 = HEAP32[$1250>>2]|0;
     $1252 = Math_imul($1248, $1251)|0;
     $1253 = (($1252|0) / 100)&-1;
     $1254 = $3;
     $1255 = ((($1254)) + 12|0);
     $1256 = HEAP32[$1255>>2]|0;
     $1257 = (($1256) + ($1253))|0;
     HEAP32[$1255>>2] = $1257;
    }
   }
   $1258 = $3;
   $1259 = ((($1258)) + 44|0);
   HEAP8[$1259>>0] = 1;
   $1260 = $3;
   $1261 = ((($1260)) + 184|0);
   $1262 = $4;
   $1263 = (($1261) + ($1262<<2)|0);
   $1264 = HEAP32[$1263>>2]|0;
   $1265 = (($1264) - 1)|0;
   HEAP32[$1263>>2] = $1265;
   $2 = 1;
   $1266 = $2;
   STACKTOP = sp;return ($1266|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 if ((label|0) == 62) {
  $889 = $7;
  $890 = $3;
  $891 = ((($890)) + 308|0);
  $892 = $4;
  $893 = (($891) + ($892<<2)|0);
  $894 = HEAP32[$893>>2]|0;
  $895 = $894 | $889;
  HEAP32[$893>>2] = $895;
  $896 = $3;
  $897 = ((($896)) + 316|0);
  $898 = HEAP32[$897>>2]|0;
  $899 = $3;
  $900 = ((($899)) + 12|0);
  $901 = HEAP32[$900>>2]|0;
  $902 = (($901) + ($898))|0;
  HEAP32[$900>>2] = $902;
  $903 = $3;
  $904 = ((($903)) + 1372|0);
  $905 = $5;
  $906 = (($904) + ($905<<2)|0);
  $907 = HEAP32[$906>>2]|0;
  $908 = $6;
  $909 = (($907) + ($908<<1)|0);
  HEAP16[$909>>1] = 10;
  $910 = $3;
  $911 = ((($910)) + 1804|0);
  $912 = $5;
  $913 = (($911) + ($912<<2)|0);
  $914 = HEAP32[$913>>2]|0;
  $915 = $6;
  $916 = (($914) + ($915<<1)|0);
  HEAP16[$916>>1] = 406;
  $917 = $3;
  $918 = ((($917)) + 44|0);
  $919 = ((($918)) + 5|0);
  HEAP8[$919>>0] = 1;
  $920 = $3;
  $921 = ((($920)) + 184|0);
  $922 = $4;
  $923 = (($921) + ($922<<2)|0);
  $924 = HEAP32[$923>>2]|0;
  $925 = (($924) - 1)|0;
  HEAP32[$923>>2] = $925;
  $2 = 1;
  $1266 = $2;
  STACKTOP = sp;return ($1266|0);
 }
 else if ((label|0) == 71) {
  $926 = $3;
  $927 = ((($926)) + 308|0);
  $928 = $4;
  $929 = (($927) + ($928<<2)|0);
  $930 = HEAP32[$929>>2]|0;
  $931 = $7;
  $932 = $930 & $931;
  $933 = ($932|0)!=(0);
  if ($933) {
   $934 = $3;
   $935 = ((($934)) + 1372|0);
   $936 = $5;
   $937 = (($936) - 1)|0;
   $938 = (($935) + ($937<<2)|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $6;
   $941 = (($939) + ($940<<1)|0);
   $942 = HEAP16[$941>>1]|0;
   $943 = $942 << 16 >> 16;
   $944 = (11821 + ($943)|0);
   $945 = HEAP8[$944>>0]|0;
   $946 = ($945<<24>>24)!=(0);
   if ($946) {
    $947 = $3;
    $948 = ((($947)) + 1372|0);
    $949 = $5;
    $950 = (($949) - 1)|0;
    $951 = (($948) + ($950<<2)|0);
    $952 = HEAP32[$951>>2]|0;
    $953 = $6;
    $954 = (($952) + ($953<<1)|0);
    HEAP16[$954>>1] = 406;
    $955 = $3;
    $956 = ((($955)) + 1804|0);
    $957 = $5;
    $958 = (($957) - 1)|0;
    $959 = (($956) + ($958<<2)|0);
    $960 = HEAP32[$959>>2]|0;
    $961 = $6;
    $962 = (($960) + ($961<<1)|0);
    HEAP16[$962>>1] = 406;
    $963 = $3;
    $964 = ((($963)) + 44|0);
    $965 = ((($964)) + 10|0);
    HEAP8[$965>>0] = 1;
    $966 = $3;
    $967 = ((($966)) + 184|0);
    $968 = $4;
    $969 = (($967) + ($968<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = (($970) - 2)|0;
    HEAP32[$969>>2] = $971;
    $2 = 1;
    $1266 = $2;
    STACKTOP = sp;return ($1266|0);
   }
  }
 }
 else if ((label|0) == 92) {
  $1209 = $3;
  $1210 = ((($1209)) + 200|0);
  $1211 = $4;
  $1212 = (($1210) + ($1211<<2)|0);
  HEAP32[$1212>>2] = 0;
  $1213 = $7;
  $1214 = $3;
  $1215 = ((($1214)) + 380|0);
  HEAP32[$1215>>2] = $1213;
  $1216 = $3;
  $1217 = ((($1216)) + 384|0);
  $1218 = HEAP32[$1217>>2]|0;
  $1219 = $3;
  $1220 = ((($1219)) + 376|0);
  HEAP32[$1220>>2] = $1218;
  $1221 = $3;
  $1222 = ((($1221)) + 44|0);
  $1223 = ((($1222)) + 9|0);
  HEAP8[$1223>>0] = 1;
  $2 = 1;
  $1266 = $2;
  STACKTOP = sp;return ($1266|0);
 }
 $2 = 0;
 $1266 = $2;
 STACKTOP = sp;return ($1266|0);
}
function _Lplayer_shoot_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 1;
 $22 = $6;
 $23 = (($22) - 1)|0;
 $6 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 29: case 24:  {
   $33 = $3;
   $34 = ((($33)) + 200|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   HEAP32[$36>>2] = 9;
   $37 = $3;
   $38 = ((($37)) + 1372|0);
   $39 = $5;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = (($41) + ($42<<1)|0);
   HEAP16[$43>>1] = 10;
   $44 = $3;
   $45 = ((($44)) + 1804|0);
   $46 = $5;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = (($48) + ($49<<1)|0);
   HEAP16[$50>>1] = 11;
   $51 = $3;
   $52 = ((($51)) + 44|0);
   $53 = ((($52)) + 11|0);
   HEAP8[$53>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 150: case 149:  {
   $54 = $3;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - 1)|0;
   HEAP32[$55>>2] = $57;
   $58 = $3;
   $59 = ((($58)) + 300|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $3;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$62>>2] = $64;
   $65 = $3;
   $66 = ((($65)) + 1372|0);
   $67 = $5;
   $68 = (($66) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $6;
   $71 = (($69) + ($70<<1)|0);
   HEAP16[$71>>1] = 159;
   $72 = $3;
   $73 = ((($72)) + 1804|0);
   $74 = $5;
   $75 = (($73) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $6;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 11;
   $79 = $3;
   $80 = ((($79)) + 44|0);
   $81 = ((($80)) + 5|0);
   HEAP8[$81>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 161: case 160:  {
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) - 3)|0;
   HEAP32[$83>>2] = $85;
   $86 = $3;
   $87 = ((($86)) + 276|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($88))|0;
   HEAP32[$90>>2] = $92;
   $93 = $3;
   $94 = ((($93)) + 1372|0);
   $95 = $5;
   $96 = (($94) + ($95<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $6;
   $99 = (($97) + ($98<<1)|0);
   HEAP16[$99>>1] = 170;
   $100 = $3;
   $101 = ((($100)) + 1804|0);
   $102 = $5;
   $103 = (($101) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = (($104) + ($105<<1)|0);
   HEAP16[$106>>1] = 11;
   $107 = $3;
   $108 = ((($107)) + 44|0);
   $109 = ((($108)) + 5|0);
   HEAP8[$109>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 228:  {
   $110 = $3;
   $111 = ((($110)) + 280|0);
   $112 = $4;
   $113 = (($111) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)<(9999);
   if ($115) {
    $116 = $3;
    $117 = ((($116)) + 280|0);
    $118 = $4;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + 1)|0;
    HEAP32[$119>>2] = $121;
   }
   $122 = $3;
   $123 = ((($122)) + 288|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $3;
   $126 = ((($125)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124))|0;
   HEAP32[$126>>2] = $128;
   $129 = $3;
   $130 = ((($129)) + 1372|0);
   $131 = $5;
   $132 = (($130) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $6;
   $135 = (($133) + ($134<<1)|0);
   HEAP16[$135>>1] = 229;
   $136 = $3;
   $137 = ((($136)) + 1804|0);
   $138 = $5;
   $139 = (($137) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   HEAP16[$142>>1] = 11;
   $143 = $3;
   $144 = ((($143)) + 44|0);
   $145 = ((($144)) + 5|0);
   HEAP8[$145>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 234:  {
   $7 = 1;
   break;
  }
  case 235:  {
   $7 = 2;
   break;
  }
  case 236:  {
   $7 = 4;
   break;
  }
  case 237:  {
   $7 = 8;
   break;
  }
  case 238:  {
   $7 = 16;
   break;
  }
  case 239:  {
   $7 = 32;
   break;
  }
  case 240:  {
   $7 = 64;
   break;
  }
  case 241:  {
   $7 = 128;
   break;
  }
  case 303:  {
   $177 = $3;
   $178 = ((($177)) + 328|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $3;
   $181 = ((($180)) + 320|0);
   HEAP32[$181>>2] = $179;
   $182 = $3;
   $183 = ((($182)) + 324|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $3;
   $186 = ((($185)) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($184))|0;
   HEAP32[$186>>2] = $188;
   $189 = $3;
   $190 = ((($189)) + 1372|0);
   $191 = $5;
   $192 = (($190) + ($191<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $6;
   $195 = (($193) + ($194<<1)|0);
   HEAP16[$195>>1] = 10;
   $196 = $3;
   $197 = ((($196)) + 1804|0);
   $198 = $5;
   $199 = (($197) + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $6;
   $202 = (($200) + ($201<<1)|0);
   HEAP16[$202>>1] = 11;
   $203 = $3;
   $204 = ((($203)) + 44|0);
   $205 = ((($204)) + 5|0);
   HEAP8[$205>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 304:  {
   $206 = $3;
   $207 = ((($206)) + 340|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $3;
   $210 = ((($209)) + 332|0);
   HEAP32[$210>>2] = $208;
   $211 = $3;
   $212 = ((($211)) + 336|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 1372|0);
   $220 = $5;
   $221 = (($219) + ($220<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $6;
   $224 = (($222) + ($223<<1)|0);
   HEAP16[$224>>1] = 10;
   $225 = $3;
   $226 = ((($225)) + 1804|0);
   $227 = $5;
   $228 = (($226) + ($227<<2)|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $6;
   $231 = (($229) + ($230<<1)|0);
   HEAP16[$231>>1] = 11;
   $232 = $3;
   $233 = ((($232)) + 44|0);
   $234 = ((($233)) + 5|0);
   HEAP8[$234>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  default: {
   $2 = 0;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
  }
  }
 } while(0);
 $146 = $7;
 $147 = $3;
 $148 = ((($147)) + 308|0);
 $149 = $4;
 $150 = (($148) + ($149<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $146;
 HEAP32[$150>>2] = $152;
 $153 = $3;
 $154 = ((($153)) + 316|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $3;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + ($155))|0;
 HEAP32[$157>>2] = $159;
 $160 = $3;
 $161 = ((($160)) + 1372|0);
 $162 = $5;
 $163 = (($161) + ($162<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $6;
 $166 = (($164) + ($165<<1)|0);
 HEAP16[$166>>1] = 10;
 $167 = $3;
 $168 = ((($167)) + 1804|0);
 $169 = $5;
 $170 = (($168) + ($169<<2)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $6;
 $173 = (($171) + ($172<<1)|0);
 HEAP16[$173>>1] = 11;
 $174 = $3;
 $175 = ((($174)) + 44|0);
 $176 = ((($175)) + 5|0);
 HEAP8[$176>>0] = 1;
 $2 = 1;
 $235 = $2;
 STACKTOP = sp;return ($235|0);
}
function _Lplayer_shoot_e($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 2;
 $22 = $5;
 $23 = (($22) + 1)|0;
 $5 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 29: case 24:  {
   $33 = $3;
   $34 = ((($33)) + 200|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   HEAP32[$36>>2] = 10;
   $37 = $3;
   $38 = ((($37)) + 1372|0);
   $39 = $5;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = (($41) + ($42<<1)|0);
   HEAP16[$43>>1] = 10;
   $44 = $3;
   $45 = ((($44)) + 1804|0);
   $46 = $5;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = (($48) + ($49<<1)|0);
   HEAP16[$50>>1] = 11;
   $51 = $3;
   $52 = ((($51)) + 44|0);
   $53 = ((($52)) + 11|0);
   HEAP8[$53>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 150: case 149:  {
   $54 = $3;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - 1)|0;
   HEAP32[$55>>2] = $57;
   $58 = $3;
   $59 = ((($58)) + 300|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $3;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$62>>2] = $64;
   $65 = $3;
   $66 = ((($65)) + 1372|0);
   $67 = $5;
   $68 = (($66) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $6;
   $71 = (($69) + ($70<<1)|0);
   HEAP16[$71>>1] = 159;
   $72 = $3;
   $73 = ((($72)) + 1804|0);
   $74 = $5;
   $75 = (($73) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $6;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 11;
   $79 = $3;
   $80 = ((($79)) + 44|0);
   $81 = ((($80)) + 5|0);
   HEAP8[$81>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 161: case 160:  {
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) - 3)|0;
   HEAP32[$83>>2] = $85;
   $86 = $3;
   $87 = ((($86)) + 276|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($88))|0;
   HEAP32[$90>>2] = $92;
   $93 = $3;
   $94 = ((($93)) + 1372|0);
   $95 = $5;
   $96 = (($94) + ($95<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $6;
   $99 = (($97) + ($98<<1)|0);
   HEAP16[$99>>1] = 170;
   $100 = $3;
   $101 = ((($100)) + 1804|0);
   $102 = $5;
   $103 = (($101) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = (($104) + ($105<<1)|0);
   HEAP16[$106>>1] = 11;
   $107 = $3;
   $108 = ((($107)) + 44|0);
   $109 = ((($108)) + 5|0);
   HEAP8[$109>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 228:  {
   $110 = $3;
   $111 = ((($110)) + 280|0);
   $112 = $4;
   $113 = (($111) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)<(9999);
   if ($115) {
    $116 = $3;
    $117 = ((($116)) + 280|0);
    $118 = $4;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + 1)|0;
    HEAP32[$119>>2] = $121;
   }
   $122 = $3;
   $123 = ((($122)) + 288|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $3;
   $126 = ((($125)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124))|0;
   HEAP32[$126>>2] = $128;
   $129 = $3;
   $130 = ((($129)) + 1372|0);
   $131 = $5;
   $132 = (($130) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $6;
   $135 = (($133) + ($134<<1)|0);
   HEAP16[$135>>1] = 229;
   $136 = $3;
   $137 = ((($136)) + 1804|0);
   $138 = $5;
   $139 = (($137) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   HEAP16[$142>>1] = 11;
   $143 = $3;
   $144 = ((($143)) + 44|0);
   $145 = ((($144)) + 5|0);
   HEAP8[$145>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 234:  {
   $7 = 1;
   break;
  }
  case 235:  {
   $7 = 2;
   break;
  }
  case 236:  {
   $7 = 4;
   break;
  }
  case 237:  {
   $7 = 8;
   break;
  }
  case 238:  {
   $7 = 16;
   break;
  }
  case 239:  {
   $7 = 32;
   break;
  }
  case 240:  {
   $7 = 64;
   break;
  }
  case 241:  {
   $7 = 128;
   break;
  }
  case 303:  {
   $177 = $3;
   $178 = ((($177)) + 328|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $3;
   $181 = ((($180)) + 320|0);
   HEAP32[$181>>2] = $179;
   $182 = $3;
   $183 = ((($182)) + 324|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $3;
   $186 = ((($185)) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($184))|0;
   HEAP32[$186>>2] = $188;
   $189 = $3;
   $190 = ((($189)) + 1372|0);
   $191 = $5;
   $192 = (($190) + ($191<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $6;
   $195 = (($193) + ($194<<1)|0);
   HEAP16[$195>>1] = 10;
   $196 = $3;
   $197 = ((($196)) + 1804|0);
   $198 = $5;
   $199 = (($197) + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $6;
   $202 = (($200) + ($201<<1)|0);
   HEAP16[$202>>1] = 11;
   $203 = $3;
   $204 = ((($203)) + 44|0);
   $205 = ((($204)) + 5|0);
   HEAP8[$205>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 304:  {
   $206 = $3;
   $207 = ((($206)) + 340|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $3;
   $210 = ((($209)) + 332|0);
   HEAP32[$210>>2] = $208;
   $211 = $3;
   $212 = ((($211)) + 336|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 1372|0);
   $220 = $5;
   $221 = (($219) + ($220<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $6;
   $224 = (($222) + ($223<<1)|0);
   HEAP16[$224>>1] = 10;
   $225 = $3;
   $226 = ((($225)) + 1804|0);
   $227 = $5;
   $228 = (($226) + ($227<<2)|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $6;
   $231 = (($229) + ($230<<1)|0);
   HEAP16[$231>>1] = 11;
   $232 = $3;
   $233 = ((($232)) + 44|0);
   $234 = ((($233)) + 5|0);
   HEAP8[$234>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  default: {
   $2 = 0;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
  }
  }
 } while(0);
 $146 = $7;
 $147 = $3;
 $148 = ((($147)) + 308|0);
 $149 = $4;
 $150 = (($148) + ($149<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $146;
 HEAP32[$150>>2] = $152;
 $153 = $3;
 $154 = ((($153)) + 316|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $3;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + ($155))|0;
 HEAP32[$157>>2] = $159;
 $160 = $3;
 $161 = ((($160)) + 1372|0);
 $162 = $5;
 $163 = (($161) + ($162<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $6;
 $166 = (($164) + ($165<<1)|0);
 HEAP16[$166>>1] = 10;
 $167 = $3;
 $168 = ((($167)) + 1804|0);
 $169 = $5;
 $170 = (($168) + ($169<<2)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $6;
 $173 = (($171) + ($172<<1)|0);
 HEAP16[$173>>1] = 11;
 $174 = $3;
 $175 = ((($174)) + 44|0);
 $176 = ((($175)) + 5|0);
 HEAP8[$176>>0] = 1;
 $2 = 1;
 $235 = $2;
 STACKTOP = sp;return ($235|0);
}
function _Lplayer_shoot_s($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 3;
 $22 = $6;
 $23 = (($22) + 1)|0;
 $6 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 29: case 24:  {
   $33 = $3;
   $34 = ((($33)) + 200|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   HEAP32[$36>>2] = 11;
   $37 = $3;
   $38 = ((($37)) + 1372|0);
   $39 = $5;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = (($41) + ($42<<1)|0);
   HEAP16[$43>>1] = 10;
   $44 = $3;
   $45 = ((($44)) + 1804|0);
   $46 = $5;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = (($48) + ($49<<1)|0);
   HEAP16[$50>>1] = 11;
   $51 = $3;
   $52 = ((($51)) + 44|0);
   $53 = ((($52)) + 11|0);
   HEAP8[$53>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 150: case 149:  {
   $54 = $3;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - 1)|0;
   HEAP32[$55>>2] = $57;
   $58 = $3;
   $59 = ((($58)) + 300|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $3;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$62>>2] = $64;
   $65 = $3;
   $66 = ((($65)) + 1372|0);
   $67 = $5;
   $68 = (($66) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $6;
   $71 = (($69) + ($70<<1)|0);
   HEAP16[$71>>1] = 159;
   $72 = $3;
   $73 = ((($72)) + 1804|0);
   $74 = $5;
   $75 = (($73) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $6;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 11;
   $79 = $3;
   $80 = ((($79)) + 44|0);
   $81 = ((($80)) + 5|0);
   HEAP8[$81>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 161: case 160:  {
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) - 3)|0;
   HEAP32[$83>>2] = $85;
   $86 = $3;
   $87 = ((($86)) + 276|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($88))|0;
   HEAP32[$90>>2] = $92;
   $93 = $3;
   $94 = ((($93)) + 1372|0);
   $95 = $5;
   $96 = (($94) + ($95<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $6;
   $99 = (($97) + ($98<<1)|0);
   HEAP16[$99>>1] = 170;
   $100 = $3;
   $101 = ((($100)) + 1804|0);
   $102 = $5;
   $103 = (($101) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = (($104) + ($105<<1)|0);
   HEAP16[$106>>1] = 11;
   $107 = $3;
   $108 = ((($107)) + 44|0);
   $109 = ((($108)) + 5|0);
   HEAP8[$109>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 228:  {
   $110 = $3;
   $111 = ((($110)) + 280|0);
   $112 = $4;
   $113 = (($111) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)<(9999);
   if ($115) {
    $116 = $3;
    $117 = ((($116)) + 280|0);
    $118 = $4;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + 1)|0;
    HEAP32[$119>>2] = $121;
   }
   $122 = $3;
   $123 = ((($122)) + 288|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $3;
   $126 = ((($125)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124))|0;
   HEAP32[$126>>2] = $128;
   $129 = $3;
   $130 = ((($129)) + 1372|0);
   $131 = $5;
   $132 = (($130) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $6;
   $135 = (($133) + ($134<<1)|0);
   HEAP16[$135>>1] = 229;
   $136 = $3;
   $137 = ((($136)) + 1804|0);
   $138 = $5;
   $139 = (($137) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   HEAP16[$142>>1] = 11;
   $143 = $3;
   $144 = ((($143)) + 44|0);
   $145 = ((($144)) + 5|0);
   HEAP8[$145>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 234:  {
   $7 = 1;
   break;
  }
  case 235:  {
   $7 = 2;
   break;
  }
  case 236:  {
   $7 = 4;
   break;
  }
  case 237:  {
   $7 = 8;
   break;
  }
  case 238:  {
   $7 = 16;
   break;
  }
  case 239:  {
   $7 = 32;
   break;
  }
  case 240:  {
   $7 = 64;
   break;
  }
  case 241:  {
   $7 = 128;
   break;
  }
  case 303:  {
   $177 = $3;
   $178 = ((($177)) + 328|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $3;
   $181 = ((($180)) + 320|0);
   HEAP32[$181>>2] = $179;
   $182 = $3;
   $183 = ((($182)) + 324|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $3;
   $186 = ((($185)) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($184))|0;
   HEAP32[$186>>2] = $188;
   $189 = $3;
   $190 = ((($189)) + 1372|0);
   $191 = $5;
   $192 = (($190) + ($191<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $6;
   $195 = (($193) + ($194<<1)|0);
   HEAP16[$195>>1] = 10;
   $196 = $3;
   $197 = ((($196)) + 1804|0);
   $198 = $5;
   $199 = (($197) + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $6;
   $202 = (($200) + ($201<<1)|0);
   HEAP16[$202>>1] = 11;
   $203 = $3;
   $204 = ((($203)) + 44|0);
   $205 = ((($204)) + 5|0);
   HEAP8[$205>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 304:  {
   $206 = $3;
   $207 = ((($206)) + 340|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $3;
   $210 = ((($209)) + 332|0);
   HEAP32[$210>>2] = $208;
   $211 = $3;
   $212 = ((($211)) + 336|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 1372|0);
   $220 = $5;
   $221 = (($219) + ($220<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $6;
   $224 = (($222) + ($223<<1)|0);
   HEAP16[$224>>1] = 10;
   $225 = $3;
   $226 = ((($225)) + 1804|0);
   $227 = $5;
   $228 = (($226) + ($227<<2)|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $6;
   $231 = (($229) + ($230<<1)|0);
   HEAP16[$231>>1] = 11;
   $232 = $3;
   $233 = ((($232)) + 44|0);
   $234 = ((($233)) + 5|0);
   HEAP8[$234>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  default: {
   $2 = 0;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
  }
  }
 } while(0);
 $146 = $7;
 $147 = $3;
 $148 = ((($147)) + 308|0);
 $149 = $4;
 $150 = (($148) + ($149<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $146;
 HEAP32[$150>>2] = $152;
 $153 = $3;
 $154 = ((($153)) + 316|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $3;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + ($155))|0;
 HEAP32[$157>>2] = $159;
 $160 = $3;
 $161 = ((($160)) + 1372|0);
 $162 = $5;
 $163 = (($161) + ($162<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $6;
 $166 = (($164) + ($165<<1)|0);
 HEAP16[$166>>1] = 10;
 $167 = $3;
 $168 = ((($167)) + 1804|0);
 $169 = $5;
 $170 = (($168) + ($169<<2)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $6;
 $173 = (($171) + ($172<<1)|0);
 HEAP16[$173>>1] = 11;
 $174 = $3;
 $175 = ((($174)) + 44|0);
 $176 = ((($175)) + 5|0);
 HEAP8[$176>>0] = 1;
 $2 = 1;
 $235 = $2;
 STACKTOP = sp;return ($235|0);
}
function _Lplayer_shoot_w($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 184|0);
 $10 = $4;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 192|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $3;
 $19 = ((($18)) + 200|0);
 $20 = $4;
 $21 = (($19) + ($20<<2)|0);
 HEAP32[$21>>2] = 4;
 $22 = $5;
 $23 = (($22) - 1)|0;
 $5 = $23;
 $24 = $3;
 $25 = ((($24)) + 1372|0);
 $26 = $5;
 $27 = (($25) + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (($28) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 do {
  switch ($32|0) {
  case 29: case 24:  {
   $33 = $3;
   $34 = ((($33)) + 200|0);
   $35 = $4;
   $36 = (($34) + ($35<<2)|0);
   HEAP32[$36>>2] = 12;
   $37 = $3;
   $38 = ((($37)) + 1372|0);
   $39 = $5;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = (($41) + ($42<<1)|0);
   HEAP16[$43>>1] = 10;
   $44 = $3;
   $45 = ((($44)) + 1804|0);
   $46 = $5;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = (($48) + ($49<<1)|0);
   HEAP16[$50>>1] = 11;
   $51 = $3;
   $52 = ((($51)) + 44|0);
   $53 = ((($52)) + 11|0);
   HEAP8[$53>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 150: case 149:  {
   $54 = $3;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - 1)|0;
   HEAP32[$55>>2] = $57;
   $58 = $3;
   $59 = ((($58)) + 300|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $3;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$62>>2] = $64;
   $65 = $3;
   $66 = ((($65)) + 1372|0);
   $67 = $5;
   $68 = (($66) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $6;
   $71 = (($69) + ($70<<1)|0);
   HEAP16[$71>>1] = 159;
   $72 = $3;
   $73 = ((($72)) + 1804|0);
   $74 = $5;
   $75 = (($73) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $6;
   $78 = (($76) + ($77<<1)|0);
   HEAP16[$78>>1] = 11;
   $79 = $3;
   $80 = ((($79)) + 44|0);
   $81 = ((($80)) + 5|0);
   HEAP8[$81>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 161: case 160:  {
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) - 3)|0;
   HEAP32[$83>>2] = $85;
   $86 = $3;
   $87 = ((($86)) + 276|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($88))|0;
   HEAP32[$90>>2] = $92;
   $93 = $3;
   $94 = ((($93)) + 1372|0);
   $95 = $5;
   $96 = (($94) + ($95<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $6;
   $99 = (($97) + ($98<<1)|0);
   HEAP16[$99>>1] = 170;
   $100 = $3;
   $101 = ((($100)) + 1804|0);
   $102 = $5;
   $103 = (($101) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $6;
   $106 = (($104) + ($105<<1)|0);
   HEAP16[$106>>1] = 11;
   $107 = $3;
   $108 = ((($107)) + 44|0);
   $109 = ((($108)) + 5|0);
   HEAP8[$109>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 228:  {
   $110 = $3;
   $111 = ((($110)) + 280|0);
   $112 = $4;
   $113 = (($111) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)<(9999);
   if ($115) {
    $116 = $3;
    $117 = ((($116)) + 280|0);
    $118 = $4;
    $119 = (($117) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + 1)|0;
    HEAP32[$119>>2] = $121;
   }
   $122 = $3;
   $123 = ((($122)) + 288|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $3;
   $126 = ((($125)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124))|0;
   HEAP32[$126>>2] = $128;
   $129 = $3;
   $130 = ((($129)) + 1372|0);
   $131 = $5;
   $132 = (($130) + ($131<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $6;
   $135 = (($133) + ($134<<1)|0);
   HEAP16[$135>>1] = 229;
   $136 = $3;
   $137 = ((($136)) + 1804|0);
   $138 = $5;
   $139 = (($137) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $6;
   $142 = (($140) + ($141<<1)|0);
   HEAP16[$142>>1] = 11;
   $143 = $3;
   $144 = ((($143)) + 44|0);
   $145 = ((($144)) + 5|0);
   HEAP8[$145>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 234:  {
   $7 = 1;
   break;
  }
  case 235:  {
   $7 = 2;
   break;
  }
  case 236:  {
   $7 = 4;
   break;
  }
  case 237:  {
   $7 = 8;
   break;
  }
  case 238:  {
   $7 = 16;
   break;
  }
  case 239:  {
   $7 = 32;
   break;
  }
  case 240:  {
   $7 = 64;
   break;
  }
  case 241:  {
   $7 = 128;
   break;
  }
  case 303:  {
   $177 = $3;
   $178 = ((($177)) + 328|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $3;
   $181 = ((($180)) + 320|0);
   HEAP32[$181>>2] = $179;
   $182 = $3;
   $183 = ((($182)) + 324|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $3;
   $186 = ((($185)) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + ($184))|0;
   HEAP32[$186>>2] = $188;
   $189 = $3;
   $190 = ((($189)) + 1372|0);
   $191 = $5;
   $192 = (($190) + ($191<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $6;
   $195 = (($193) + ($194<<1)|0);
   HEAP16[$195>>1] = 10;
   $196 = $3;
   $197 = ((($196)) + 1804|0);
   $198 = $5;
   $199 = (($197) + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $6;
   $202 = (($200) + ($201<<1)|0);
   HEAP16[$202>>1] = 11;
   $203 = $3;
   $204 = ((($203)) + 44|0);
   $205 = ((($204)) + 5|0);
   HEAP8[$205>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 304:  {
   $206 = $3;
   $207 = ((($206)) + 340|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $3;
   $210 = ((($209)) + 332|0);
   HEAP32[$210>>2] = $208;
   $211 = $3;
   $212 = ((($211)) + 336|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 1372|0);
   $220 = $5;
   $221 = (($219) + ($220<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = $6;
   $224 = (($222) + ($223<<1)|0);
   HEAP16[$224>>1] = 10;
   $225 = $3;
   $226 = ((($225)) + 1804|0);
   $227 = $5;
   $228 = (($226) + ($227<<2)|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $6;
   $231 = (($229) + ($230<<1)|0);
   HEAP16[$231>>1] = 11;
   $232 = $3;
   $233 = ((($232)) + 44|0);
   $234 = ((($233)) + 5|0);
   HEAP8[$234>>0] = 1;
   $2 = 1;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
   break;
  }
  default: {
   $2 = 0;
   $235 = $2;
   STACKTOP = sp;return ($235|0);
  }
  }
 } while(0);
 $146 = $7;
 $147 = $3;
 $148 = ((($147)) + 308|0);
 $149 = $4;
 $150 = (($148) + ($149<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 | $146;
 HEAP32[$150>>2] = $152;
 $153 = $3;
 $154 = ((($153)) + 316|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $3;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + ($155))|0;
 HEAP32[$157>>2] = $159;
 $160 = $3;
 $161 = ((($160)) + 1372|0);
 $162 = $5;
 $163 = (($161) + ($162<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $6;
 $166 = (($164) + ($165<<1)|0);
 HEAP16[$166>>1] = 10;
 $167 = $3;
 $168 = ((($167)) + 1804|0);
 $169 = $5;
 $170 = (($168) + ($169<<2)|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $6;
 $173 = (($171) + ($172<<1)|0);
 HEAP16[$173>>1] = 11;
 $174 = $3;
 $175 = ((($174)) + 44|0);
 $176 = ((($175)) + 5|0);
 HEAP8[$176>>0] = 1;
 $2 = 1;
 $235 = $2;
 STACKTOP = sp;return ($235|0);
}
function _cave_to_logic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 _memset(($7|0),0,70060)|0;
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = (0)<=($13|0);
 if ($14) {
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)<=(9999);
  if ($17) {
   $18 = $2;
   $19 = HEAP32[$18>>2]|0;
   $22 = $19;
  } else {
   $22 = 9999;
  }
 } else {
  $22 = 0;
 }
 $20 = $3;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $22;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (0)<=($25|0);
 if ($26) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<=(9999);
  if ($30) {
   $31 = $2;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $36 = $33;
  } else {
   $36 = 9999;
  }
 } else {
  $36 = 0;
 }
 $34 = $3;
 $35 = ((($34)) + 8|0);
 HEAP32[$35>>2] = $36;
 $37 = $3;
 $38 = ((($37)) + 32|0);
 HEAP32[$38>>2] = 7;
 $39 = $2;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (1)<=($41|0);
 if ($42) {
  $43 = $2;
  $44 = ((($43)) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)<=(100);
  if ($46) {
   $47 = $2;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $52 = $49;
  } else {
   $52 = 100;
  }
 } else {
  $52 = 1;
 }
 $50 = $3;
 $51 = ((($50)) + 36|0);
 HEAP32[$51>>2] = $52;
 $53 = $2;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (1)<=($55|0);
 if ($56) {
  $57 = $2;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)<=(100);
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $66 = $63;
  } else {
   $66 = 100;
  }
 } else {
  $66 = 1;
 }
 $64 = $3;
 $65 = ((($64)) + 40|0);
 HEAP32[$65>>2] = $66;
 $67 = $3;
 $68 = ((($67)) + 88|0);
 HEAP32[$68>>2] = 4;
 $69 = $3;
 $70 = ((($69)) + 92|0);
 HEAP32[$70>>2] = 2;
 $71 = $3;
 $72 = ((($71)) + 88|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $3;
 $75 = ((($74)) + 36|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($73) + ($76))|0;
 $78 = (($77) - 1)|0;
 $79 = $3;
 $80 = ((($79)) + 96|0);
 HEAP32[$80>>2] = $78;
 $81 = $3;
 $82 = ((($81)) + 92|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $3;
 $85 = ((($84)) + 40|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($83) + ($86))|0;
 $88 = (($87) - 1)|0;
 $89 = $3;
 $90 = ((($89)) + 100|0);
 HEAP32[$90>>2] = $88;
 $6 = 0;
 while(1) {
  $91 = $6;
  $92 = ($91|0)<(2);
  if (!($92)) {
   break;
  }
  $93 = $3;
  $94 = ((($93)) + 88|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $2;
  $97 = ((($96)) + 20|0);
  $98 = $6;
  $99 = (($97) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (0)<=($100|0);
  if ($101) {
   $102 = $2;
   $103 = ((($102)) + 20|0);
   $104 = $6;
   $105 = (($103) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)<=(99);
   if ($107) {
    $108 = $2;
    $109 = ((($108)) + 20|0);
    $110 = $6;
    $111 = (($109) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $114 = $112;
   } else {
    $114 = 99;
   }
  } else {
   $114 = 0;
  }
  $113 = (($95) + ($114))|0;
  $4 = $113;
  $115 = $3;
  $116 = ((($115)) + 92|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $2;
  $119 = ((($118)) + 28|0);
  $120 = $6;
  $121 = (($119) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (0)<=($122|0);
  if ($123) {
   $124 = $2;
   $125 = ((($124)) + 28|0);
   $126 = $6;
   $127 = (($125) + ($126<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)<=(99);
   if ($129) {
    $130 = $2;
    $131 = ((($130)) + 28|0);
    $132 = $6;
    $133 = (($131) + ($132<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $136 = $134;
   } else {
    $136 = 99;
   }
  } else {
   $136 = 0;
  }
  $135 = (($117) + ($136))|0;
  $5 = $135;
  $137 = $4;
  $138 = $3;
  $139 = ((($138)) + 168|0);
  $140 = $6;
  $141 = (($139) + ($140<<2)|0);
  HEAP32[$141>>2] = $137;
  $142 = $5;
  $143 = $3;
  $144 = ((($143)) + 176|0);
  $145 = $6;
  $146 = (($144) + ($145<<2)|0);
  HEAP32[$146>>2] = $142;
  $147 = $4;
  $148 = $3;
  $149 = ((($148)) + 184|0);
  $150 = $6;
  $151 = (($149) + ($150<<2)|0);
  HEAP32[$151>>2] = $147;
  $152 = $5;
  $153 = $3;
  $154 = ((($153)) + 192|0);
  $155 = $6;
  $156 = (($154) + ($155<<2)|0);
  HEAP32[$156>>2] = $152;
  $157 = $3;
  $158 = ((($157)) + 200|0);
  $159 = $6;
  $160 = (($158) + ($159<<2)|0);
  HEAP32[$160>>2] = 0;
  $161 = $6;
  $162 = (($161) + 1)|0;
  $6 = $162;
 }
 $163 = $2;
 $164 = ((($163)) + 136|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = $165 << 31;
 $167 = $166 >> 31;
 $168 = ($167|0)!=(0);
 if (!($168)) {
  $169 = $3;
  $170 = ((($169)) + 16|0);
  $171 = ((($170)) + 4|0);
  HEAP32[$171>>2] = 1;
  $172 = $3;
  $173 = ((($172)) + 24|0);
  $174 = ((($173)) + 4|0);
  HEAP32[$174>>2] = 1;
 }
 $175 = $2;
 $176 = ((($175)) + 36|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (0)<=($177|0);
 if ($178) {
  $179 = $2;
  $180 = ((($179)) + 36|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)<=(9999);
  if ($182) {
   $183 = $2;
   $184 = ((($183)) + 36|0);
   $185 = HEAP32[$184>>2]|0;
   $188 = $185;
  } else {
   $188 = 9999;
  }
 } else {
  $188 = 0;
 }
 $186 = $3;
 $187 = ((($186)) + 296|0);
 HEAP32[$187>>2] = $188;
 $189 = $2;
 $190 = ((($189)) + 40|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = (0)<=($191|0);
 if ($192) {
  $193 = $2;
  $194 = ((($193)) + 40|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ($195|0)<=(9999);
  if ($196) {
   $197 = $2;
   $198 = ((($197)) + 40|0);
   $199 = HEAP32[$198>>2]|0;
   $202 = $199;
  } else {
   $202 = 9999;
  }
 } else {
  $202 = 0;
 }
 $200 = $3;
 $201 = ((($200)) + 232|0);
 HEAP32[$201>>2] = $202;
 $203 = $2;
 $204 = ((($203)) + 44|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = (0)<=($205|0);
 if ($206) {
  $207 = $2;
  $208 = ((($207)) + 44|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)<=(9999);
  if ($210) {
   $211 = $2;
   $212 = ((($211)) + 44|0);
   $213 = HEAP32[$212>>2]|0;
   $216 = $213;
  } else {
   $216 = 9999;
  }
 } else {
  $216 = 0;
 }
 $214 = $3;
 $215 = ((($214)) + 272|0);
 HEAP32[$215>>2] = $216;
 $217 = $2;
 $218 = ((($217)) + 48|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = (0)<=($219|0);
 if ($220) {
  $221 = $2;
  $222 = ((($221)) + 48|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ($223|0)<=(9999);
  if ($224) {
   $225 = $2;
   $226 = ((($225)) + 48|0);
   $227 = HEAP32[$226>>2]|0;
   $230 = $227;
  } else {
   $230 = 9999;
  }
 } else {
  $230 = 0;
 }
 $228 = $3;
 $229 = ((($228)) + 356|0);
 HEAP32[$229>>2] = $230;
 $231 = $2;
 $232 = ((($231)) + 52|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = (0)<=($233|0);
 if ($234) {
  $235 = $2;
  $236 = ((($235)) + 52|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ($237|0)<=(9999);
  if ($238) {
   $239 = $2;
   $240 = ((($239)) + 52|0);
   $241 = HEAP32[$240>>2]|0;
   $244 = $241;
  } else {
   $244 = 9999;
  }
 } else {
  $244 = 0;
 }
 $242 = $3;
 $243 = ((($242)) + 300|0);
 HEAP32[$243>>2] = $244;
 $245 = $2;
 $246 = ((($245)) + 56|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = (0)<=($247|0);
 if ($248) {
  $249 = $2;
  $250 = ((($249)) + 56|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($251|0)<=(9999);
  if ($252) {
   $253 = $2;
   $254 = ((($253)) + 56|0);
   $255 = HEAP32[$254>>2]|0;
   $258 = $255;
  } else {
   $258 = 9999;
  }
 } else {
  $258 = 0;
 }
 $256 = $3;
 $257 = ((($256)) + 276|0);
 HEAP32[$257>>2] = $258;
 $259 = $2;
 $260 = ((($259)) + 60|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = (0)<=($261|0);
 if ($262) {
  $263 = $2;
  $264 = ((($263)) + 60|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)<=(9999);
  if ($266) {
   $267 = $2;
   $268 = ((($267)) + 60|0);
   $269 = HEAP32[$268>>2]|0;
   $272 = $269;
  } else {
   $272 = 9999;
  }
 } else {
  $272 = 0;
 }
 $270 = $3;
 $271 = ((($270)) + 344|0);
 HEAP32[$271>>2] = $272;
 $273 = $2;
 $274 = ((($273)) + 64|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = (0)<=($275|0);
 if ($276) {
  $277 = $2;
  $278 = ((($277)) + 64|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ($279|0)<=(9999);
  if ($280) {
   $281 = $2;
   $282 = ((($281)) + 64|0);
   $283 = HEAP32[$282>>2]|0;
   $286 = $283;
  } else {
   $286 = 9999;
  }
 } else {
  $286 = 0;
 }
 $284 = $3;
 $285 = ((($284)) + 352|0);
 HEAP32[$285>>2] = $286;
 $287 = $2;
 $288 = ((($287)) + 68|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (0)<=($289|0);
 if ($290) {
  $291 = $2;
  $292 = ((($291)) + 68|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = ($293|0)<=(9999);
  if ($294) {
   $295 = $2;
   $296 = ((($295)) + 68|0);
   $297 = HEAP32[$296>>2]|0;
   $300 = $297;
  } else {
   $300 = 9999;
  }
 } else {
  $300 = 0;
 }
 $298 = $3;
 $299 = ((($298)) + 288|0);
 HEAP32[$299>>2] = $300;
 $301 = $2;
 $302 = ((($301)) + 72|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = (0)<=($303|0);
 if ($304) {
  $305 = $2;
  $306 = ((($305)) + 72|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = ($307|0)<=(9999);
  if ($308) {
   $309 = $2;
   $310 = ((($309)) + 72|0);
   $311 = HEAP32[$310>>2]|0;
   $314 = $311;
  } else {
   $314 = 9999;
  }
 } else {
  $314 = 0;
 }
 $312 = $3;
 $313 = ((($312)) + 316|0);
 HEAP32[$313>>2] = $314;
 $315 = $2;
 $316 = ((($315)) + 76|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = (0)<=($317|0);
 if ($318) {
  $319 = $2;
  $320 = ((($319)) + 76|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = ($321|0)<=(9999);
  if ($322) {
   $323 = $2;
   $324 = ((($323)) + 76|0);
   $325 = HEAP32[$324>>2]|0;
   $328 = $325;
  } else {
   $328 = 9999;
  }
 } else {
  $328 = 0;
 }
 $326 = $3;
 $327 = ((($326)) + 324|0);
 HEAP32[$327>>2] = $328;
 $329 = $2;
 $330 = ((($329)) + 80|0);
 $331 = HEAP32[$330>>2]|0;
 $332 = (0)<=($331|0);
 if ($332) {
  $333 = $2;
  $334 = ((($333)) + 80|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ($335|0)<=(9999);
  if ($336) {
   $337 = $2;
   $338 = ((($337)) + 80|0);
   $339 = HEAP32[$338>>2]|0;
   $342 = $339;
  } else {
   $342 = 9999;
  }
 } else {
  $342 = 0;
 }
 $340 = $3;
 $341 = ((($340)) + 336|0);
 HEAP32[$341>>2] = $342;
 $343 = $2;
 $344 = ((($343)) + 84|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = (0)<=($345|0);
 if ($346) {
  $347 = $2;
  $348 = ((($347)) + 84|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ($349|0)<=(9999);
  if ($350) {
   $351 = $2;
   $352 = ((($351)) + 84|0);
   $353 = HEAP32[$352>>2]|0;
   $356 = $353;
  } else {
   $356 = 9999;
  }
 } else {
  $356 = 0;
 }
 $354 = $3;
 $355 = ((($354)) + 304|0);
 HEAP32[$355>>2] = $356;
 $357 = $2;
 $358 = ((($357)) + 88|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = (0)<=($359|0);
 do {
  if ($360) {
   $361 = $2;
   $362 = ((($361)) + 88|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ($363|0)<=(9999);
   if (!($364)) {
    $370 = 9999;
    break;
   }
   $365 = $2;
   $366 = ((($365)) + 88|0);
   $367 = HEAP32[$366>>2]|0;
   $370 = $367;
  } else {
   $370 = 0;
  }
 } while(0);
 $368 = $3;
 $369 = ((($368)) + 244|0);
 HEAP32[$369>>2] = $370;
 $371 = $2;
 $372 = ((($371)) + 92|0);
 $373 = HEAP32[$372>>2]|0;
 $374 = (0)<=($373|0);
 do {
  if ($374) {
   $375 = $2;
   $376 = ((($375)) + 92|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = ($377|0)<=(9999);
   if (!($378)) {
    $384 = 9999;
    break;
   }
   $379 = $2;
   $380 = ((($379)) + 92|0);
   $381 = HEAP32[$380>>2]|0;
   $384 = $381;
  } else {
   $384 = 0;
  }
 } while(0);
 $382 = $3;
 $383 = ((($382)) + 252|0);
 HEAP32[$383>>2] = $384;
 $385 = $2;
 $386 = ((($385)) + 96|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = (0)<=($387|0);
 do {
  if ($388) {
   $389 = $2;
   $390 = ((($389)) + 96|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)<=(9999);
   if (!($392)) {
    $398 = 9999;
    break;
   }
   $393 = $2;
   $394 = ((($393)) + 96|0);
   $395 = HEAP32[$394>>2]|0;
   $398 = $395;
  } else {
   $398 = 0;
  }
 } while(0);
 $396 = $3;
 $397 = ((($396)) + 268|0);
 HEAP32[$397>>2] = $398;
 $399 = $2;
 $400 = ((($399)) + 100|0);
 $401 = HEAP32[$400>>2]|0;
 $402 = (0)<=($401|0);
 do {
  if ($402) {
   $403 = $2;
   $404 = ((($403)) + 100|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = ($405|0)<=(999);
   if (!($406)) {
    $412 = 999;
    break;
   }
   $407 = $2;
   $408 = ((($407)) + 100|0);
   $409 = HEAP32[$408>>2]|0;
   $412 = $409;
  } else {
   $412 = 0;
  }
 } while(0);
 $410 = $3;
 $411 = ((($410)) + 236|0);
 HEAP32[$411>>2] = $412;
 $413 = $2;
 $414 = ((($413)) + 104|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = (0)<=($415|0);
 do {
  if ($416) {
   $417 = $2;
   $418 = ((($417)) + 104|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = ($419|0)<=(9999);
   if (!($420)) {
    $426 = 9999;
    break;
   }
   $421 = $2;
   $422 = ((($421)) + 104|0);
   $423 = HEAP32[$422>>2]|0;
   $426 = $423;
  } else {
   $426 = 0;
  }
 } while(0);
 $424 = $3;
 $425 = ((($424)) + 392|0);
 HEAP32[$425>>2] = $426;
 $427 = $2;
 $428 = ((($427)) + 108|0);
 $429 = HEAP32[$428>>2]|0;
 $430 = (0)<=($429|0);
 do {
  if ($430) {
   $431 = $2;
   $432 = ((($431)) + 108|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = ($433|0)<=(9999);
   if (!($434)) {
    $440 = 9999;
    break;
   }
   $435 = $2;
   $436 = ((($435)) + 108|0);
   $437 = HEAP32[$436>>2]|0;
   $440 = $437;
  } else {
   $440 = 0;
  }
 } while(0);
 $438 = $3;
 $439 = ((($438)) + 372|0);
 HEAP32[$439>>2] = $440;
 $441 = $2;
 $442 = ((($441)) + 112|0);
 $443 = HEAP32[$442>>2]|0;
 $444 = (0)<=($443|0);
 do {
  if ($444) {
   $445 = $2;
   $446 = ((($445)) + 112|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = ($447|0)<=(9999);
   if (!($448)) {
    $454 = 9999;
    break;
   }
   $449 = $2;
   $450 = ((($449)) + 112|0);
   $451 = HEAP32[$450>>2]|0;
   $454 = $451;
  } else {
   $454 = 0;
  }
 } while(0);
 $452 = $3;
 $453 = ((($452)) + 328|0);
 HEAP32[$453>>2] = $454;
 $455 = $2;
 $456 = ((($455)) + 116|0);
 $457 = HEAP32[$456>>2]|0;
 $458 = (0)<=($457|0);
 do {
  if ($458) {
   $459 = $2;
   $460 = ((($459)) + 116|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = ($461|0)<=(9999);
   if (!($462)) {
    $468 = 9999;
    break;
   }
   $463 = $2;
   $464 = ((($463)) + 116|0);
   $465 = HEAP32[$464>>2]|0;
   $468 = $465;
  } else {
   $468 = 0;
  }
 } while(0);
 $466 = $3;
 $467 = ((($466)) + 340|0);
 HEAP32[$467>>2] = $468;
 $469 = $2;
 $470 = ((($469)) + 120|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = (0)<=($471|0);
 do {
  if ($472) {
   $473 = $2;
   $474 = ((($473)) + 120|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = ($475|0)<=(9999);
   if (!($476)) {
    $482 = 9999;
    break;
   }
   $477 = $2;
   $478 = ((($477)) + 120|0);
   $479 = HEAP32[$478>>2]|0;
   $482 = $479;
  } else {
   $482 = 0;
  }
 } while(0);
 $480 = $3;
 $481 = ((($480)) + 384|0);
 HEAP32[$481>>2] = $482;
 $483 = $3;
 $484 = ((($483)) + 88|0);
 $485 = HEAP32[$484>>2]|0;
 $486 = $2;
 $487 = ((($486)) + 124|0);
 $488 = HEAP32[$487>>2]|0;
 $489 = (0)<=($488|0);
 do {
  if ($489) {
   $490 = $2;
   $491 = ((($490)) + 124|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = ($492|0)<=(99);
   if (!($493)) {
    $498 = 99;
    break;
   }
   $494 = $2;
   $495 = ((($494)) + 124|0);
   $496 = HEAP32[$495>>2]|0;
   $498 = $496;
  } else {
   $498 = 0;
  }
 } while(0);
 $497 = (($485) + ($498))|0;
 $499 = $3;
 $500 = ((($499)) + 364|0);
 HEAP32[$500>>2] = $497;
 $501 = $3;
 $502 = ((($501)) + 92|0);
 $503 = HEAP32[$502>>2]|0;
 $504 = $2;
 $505 = ((($504)) + 128|0);
 $506 = HEAP32[$505>>2]|0;
 $507 = (0)<=($506|0);
 do {
  if ($507) {
   $508 = $2;
   $509 = ((($508)) + 128|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = ($510|0)<=(99);
   if (!($511)) {
    $516 = 99;
    break;
   }
   $512 = $2;
   $513 = ((($512)) + 128|0);
   $514 = HEAP32[$513>>2]|0;
   $516 = $514;
  } else {
   $516 = 0;
  }
 } while(0);
 $515 = (($503) + ($516))|0;
 $517 = $3;
 $518 = ((($517)) + 368|0);
 HEAP32[$518>>2] = $515;
 $519 = $2;
 $520 = ((($519)) + 132|0);
 $521 = HEAP32[$520>>2]|0;
 $522 = (0)<=($521|0);
 do {
  if ($522) {
   $523 = $2;
   $524 = ((($523)) + 132|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = ($525|0)<=(3);
   if (!($526)) {
    $532 = 3;
    break;
   }
   $527 = $2;
   $528 = ((($527)) + 132|0);
   $529 = HEAP32[$528>>2]|0;
   $532 = $529;
  } else {
   $532 = 0;
  }
 } while(0);
 $530 = $3;
 $531 = ((($530)) + 380|0);
 HEAP32[$531>>2] = $532;
 $533 = $2;
 $534 = ((($533)) + 136|0);
 $535 = HEAP32[$534>>2]|0;
 $536 = $535 << 29;
 $537 = $536 >> 31;
 $538 = ($537|0)!=(0);
 if ($538) {
  $539 = $3;
  $540 = ((($539)) + 260|0);
  HEAP32[$540>>2] = 1;
 }
 $541 = $2;
 $542 = ((($541)) + 136|0);
 $543 = HEAP32[$542>>2]|0;
 $544 = $543 << 28;
 $545 = $544 >> 31;
 $546 = ($545|0)!=(0);
 if ($546) {
  $547 = $3;
  $548 = ((($547)) + 264|0);
  HEAP32[$548>>2] = 1;
 }
 $549 = $2;
 $550 = ((($549)) + 136|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = $551 << 27;
 $553 = $552 >> 31;
 $554 = ($553|0)!=(0);
 if ($554) {
  $555 = $3;
  $556 = ((($555)) + 388|0);
  HEAP32[$556>>2] = 1;
 }
 $557 = $2;
 $558 = ((($557)) + 136|0);
 $559 = HEAP32[$558>>2]|0;
 $560 = $559 << 26;
 $561 = $560 >> 31;
 $562 = ($561|0)!=(0);
 if ($562) {
  $563 = $3;
  $564 = ((($563)) + 372|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = $3;
  $567 = ((($566)) + 360|0);
  HEAP32[$567>>2] = $565;
 }
 $568 = $2;
 $569 = ((($568)) + 136|0);
 $570 = HEAP32[$569>>2]|0;
 $571 = $570 << 25;
 $572 = $571 >> 31;
 $573 = ($572|0)!=(0);
 if ($573) {
  $574 = $3;
  $575 = ((($574)) + 328|0);
  $576 = HEAP32[$575>>2]|0;
  $577 = $3;
  $578 = ((($577)) + 320|0);
  HEAP32[$578>>2] = $576;
 }
 $579 = $2;
 $580 = ((($579)) + 136|0);
 $581 = HEAP32[$580>>2]|0;
 $582 = $581 << 24;
 $583 = $582 >> 31;
 $584 = ($583|0)!=(0);
 if ($584) {
  $585 = $3;
  $586 = ((($585)) + 340|0);
  $587 = HEAP32[$586>>2]|0;
  $588 = $3;
  $589 = ((($588)) + 332|0);
  HEAP32[$589>>2] = $587;
 }
 $590 = $2;
 $591 = ((($590)) + 136|0);
 $592 = HEAP32[$591>>2]|0;
 $593 = $592 << 23;
 $594 = $593 >> 31;
 $595 = ($594|0)!=(0);
 if ($595) {
  $596 = $3;
  $597 = ((($596)) + 384|0);
  $598 = HEAP32[$597>>2]|0;
  $599 = $3;
  $600 = ((($599)) + 376|0);
  HEAP32[$600>>2] = $598;
 }
 $601 = $3;
 $602 = ((($601)) + 244|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = $3;
 $605 = ((($604)) + 240|0);
 HEAP32[$605>>2] = $603;
 $606 = $3;
 $607 = ((($606)) + 252|0);
 $608 = HEAP32[$607>>2]|0;
 $609 = $3;
 $610 = ((($609)) + 248|0);
 HEAP32[$610>>2] = $608;
 $611 = $3;
 $612 = ((($611)) + 268|0);
 $613 = HEAP32[$612>>2]|0;
 $614 = $3;
 $615 = ((($614)) + 256|0);
 HEAP32[$615>>2] = $613;
 $4 = 0;
 while(1) {
  $616 = $4;
  $617 = ($616|0)<(8);
  if (!($617)) {
   break;
  }
  $5 = 0;
  while(1) {
   $618 = $5;
   $619 = ($618|0)<(9);
   if (!($619)) {
    break;
   }
   $620 = $2;
   $621 = ((($620)) + 140|0);
   $622 = $4;
   $623 = (($621) + (($622*18)|0)|0);
   $624 = $5;
   $625 = (($623) + ($624<<1)|0);
   $626 = HEAP16[$625>>1]|0;
   $627 = $626 << 16 >> 16;
   $628 = (0)<=($627|0);
   do {
    if ($628) {
     $629 = $2;
     $630 = ((($629)) + 140|0);
     $631 = $4;
     $632 = (($630) + (($631*18)|0)|0);
     $633 = $5;
     $634 = (($632) + ($633<<1)|0);
     $635 = HEAP16[$634>>1]|0;
     $636 = $635 << 16 >> 16;
     $637 = ($636|0)<=(191);
     if (!($637)) {
      $647 = 191;
      break;
     }
     $638 = $2;
     $639 = ((($638)) + 140|0);
     $640 = $4;
     $641 = (($639) + (($640*18)|0)|0);
     $642 = $5;
     $643 = (($641) + ($642<<1)|0);
     $644 = HEAP16[$643>>1]|0;
     $645 = $644 << 16 >> 16;
     $647 = $645;
    } else {
     $647 = 0;
    }
   } while(0);
   $646 = (2588 + ($647<<1)|0);
   $648 = HEAP16[$646>>1]|0;
   $649 = $3;
   $650 = ((($649)) + 396|0);
   $651 = $4;
   $652 = (($650) + (($651*18)|0)|0);
   $653 = $5;
   $654 = (($652) + ($653<<1)|0);
   HEAP16[$654>>1] = $648;
   $655 = $5;
   $656 = (($655) + 1)|0;
   $5 = $656;
  }
  $657 = $4;
  $658 = (($657) + 1)|0;
  $4 = $658;
 }
 $4 = 0;
 while(1) {
  $659 = $4;
  $660 = ($659|0)<(8);
  if (!($660)) {
   break;
  }
  $661 = $2;
  $662 = ((($661)) + 284|0);
  $663 = $4;
  $664 = (($662) + ($663<<1)|0);
  $665 = HEAP16[$664>>1]|0;
  $666 = $665 << 16 >> 16;
  $667 = (0)<=($666|0);
  do {
   if ($667) {
    $668 = $2;
    $669 = ((($668)) + 284|0);
    $670 = $4;
    $671 = (($669) + ($670<<1)|0);
    $672 = HEAP16[$671>>1]|0;
    $673 = $672 << 16 >> 16;
    $674 = ($673|0)<=(191);
    if (!($674)) {
     $682 = 191;
     break;
    }
    $675 = $2;
    $676 = ((($675)) + 284|0);
    $677 = $4;
    $678 = (($676) + ($677<<1)|0);
    $679 = HEAP16[$678>>1]|0;
    $680 = $679 << 16 >> 16;
    $682 = $680;
   } else {
    $682 = 0;
   }
  } while(0);
  $681 = (2588 + ($682<<1)|0);
  $683 = HEAP16[$681>>1]|0;
  $684 = $3;
  $685 = ((($684)) + 540|0);
  $686 = $4;
  $687 = (($685) + ($686<<1)|0);
  HEAP16[$687>>1] = $683;
  $688 = $4;
  $689 = (($688) + 1)|0;
  $4 = $689;
 }
 $4 = 0;
 while(1) {
  $690 = $4;
  $691 = ($690|0)<(407);
  if (!($691)) {
   break;
  }
  $692 = $3;
  $693 = ((($692)) + 556|0);
  $694 = $4;
  $695 = (($693) + ($694<<1)|0);
  HEAP16[$695>>1] = 11;
  $696 = $4;
  $697 = (($696) + 1)|0;
  $4 = $697;
 }
 $698 = $2;
 $699 = ((($698)) + 136|0);
 $700 = HEAP32[$699>>2]|0;
 $701 = $700 << 22;
 $702 = $701 >> 31;
 $703 = ($702|0)!=(0);
 if ($703) {
  $704 = $3;
  $705 = ((($704)) + 556|0);
  $706 = ((($705)) + 118|0);
  HEAP16[$706>>1] = 59;
  $707 = $3;
  $708 = ((($707)) + 556|0);
  $709 = ((($708)) + 128|0);
  HEAP16[$709>>1] = 59;
  $710 = $3;
  $711 = ((($710)) + 556|0);
  $712 = ((($711)) + 120|0);
  HEAP16[$712>>1] = 60;
  $713 = $3;
  $714 = ((($713)) + 556|0);
  $715 = ((($714)) + 132|0);
  HEAP16[$715>>1] = 60;
  $716 = $3;
  $717 = ((($716)) + 556|0);
  $718 = ((($717)) + 122|0);
  HEAP16[$718>>1] = 61;
  $719 = $3;
  $720 = ((($719)) + 556|0);
  $721 = ((($720)) + 136|0);
  HEAP16[$721>>1] = 61;
  $722 = $3;
  $723 = ((($722)) + 556|0);
  $724 = ((($723)) + 124|0);
  HEAP16[$724>>1] = 62;
  $725 = $3;
  $726 = ((($725)) + 556|0);
  $727 = ((($726)) + 140|0);
  HEAP16[$727>>1] = 62;
 }
 $728 = $2;
 $729 = ((($728)) + 136|0);
 $730 = HEAP32[$729>>2]|0;
 $731 = $730 << 21;
 $732 = $731 >> 31;
 $733 = ($732|0)!=(0);
 if ($733) {
  $734 = $3;
  $735 = ((($734)) + 556|0);
  $736 = ((($735)) + 146|0);
  HEAP16[$736>>1] = 73;
  $737 = $3;
  $738 = ((($737)) + 556|0);
  $739 = ((($738)) + 148|0);
  HEAP16[$739>>1] = 73;
  $740 = $3;
  $741 = ((($740)) + 556|0);
  $742 = ((($741)) + 152|0);
  HEAP16[$742>>1] = 73;
  $743 = $3;
  $744 = ((($743)) + 556|0);
  $745 = ((($744)) + 156|0);
  HEAP16[$745>>1] = 73;
  $746 = $3;
  $747 = ((($746)) + 556|0);
  $748 = ((($747)) + 160|0);
  HEAP16[$748>>1] = 73;
  $749 = $3;
  $750 = ((($749)) + 556|0);
  $751 = ((($750)) + 164|0);
  HEAP16[$751>>1] = 73;
 }
 $752 = $2;
 $753 = ((($752)) + 136|0);
 $754 = HEAP32[$753>>2]|0;
 $755 = $754 << 20;
 $756 = $755 >> 31;
 $757 = ($756|0)!=(0);
 if ($757) {
  $758 = $3;
  $759 = ((($758)) + 556|0);
  $760 = ((($759)) + 170|0);
  HEAP16[$760>>1] = 85;
  $761 = $3;
  $762 = ((($761)) + 556|0);
  $763 = ((($762)) + 172|0);
  HEAP16[$763>>1] = 85;
  $764 = $3;
  $765 = ((($764)) + 556|0);
  $766 = ((($765)) + 188|0);
  HEAP16[$766>>1] = 85;
  $767 = $3;
  $768 = ((($767)) + 556|0);
  $769 = ((($768)) + 204|0);
  HEAP16[$769>>1] = 85;
  $770 = $3;
  $771 = ((($770)) + 556|0);
  $772 = ((($771)) + 216|0);
  HEAP16[$772>>1] = 85;
  $773 = $3;
  $774 = ((($773)) + 556|0);
  $775 = ((($774)) + 174|0);
  HEAP16[$775>>1] = 87;
  $776 = $3;
  $777 = ((($776)) + 556|0);
  $778 = ((($777)) + 176|0);
  HEAP16[$778>>1] = 87;
  $779 = $3;
  $780 = ((($779)) + 556|0);
  $781 = ((($780)) + 192|0);
  HEAP16[$781>>1] = 87;
  $782 = $3;
  $783 = ((($782)) + 556|0);
  $784 = ((($783)) + 206|0);
  HEAP16[$784>>1] = 87;
  $785 = $3;
  $786 = ((($785)) + 556|0);
  $787 = ((($786)) + 210|0);
  HEAP16[$787>>1] = 87;
  $788 = $3;
  $789 = ((($788)) + 556|0);
  $790 = ((($789)) + 178|0);
  HEAP16[$790>>1] = 89;
  $791 = $3;
  $792 = ((($791)) + 556|0);
  $793 = ((($792)) + 180|0);
  HEAP16[$793>>1] = 89;
  $794 = $3;
  $795 = ((($794)) + 556|0);
  $796 = ((($795)) + 196|0);
  HEAP16[$796>>1] = 89;
  $797 = $3;
  $798 = ((($797)) + 556|0);
  $799 = ((($798)) + 208|0);
  HEAP16[$799>>1] = 89;
  $800 = $3;
  $801 = ((($800)) + 556|0);
  $802 = ((($801)) + 212|0);
  HEAP16[$802>>1] = 89;
  $803 = $3;
  $804 = ((($803)) + 556|0);
  $805 = ((($804)) + 182|0);
  HEAP16[$805>>1] = 91;
  $806 = $3;
  $807 = ((($806)) + 556|0);
  $808 = ((($807)) + 184|0);
  HEAP16[$808>>1] = 91;
  $809 = $3;
  $810 = ((($809)) + 556|0);
  $811 = ((($810)) + 200|0);
  HEAP16[$811>>1] = 91;
  $812 = $3;
  $813 = ((($812)) + 556|0);
  $814 = ((($813)) + 202|0);
  HEAP16[$814>>1] = 91;
  $815 = $3;
  $816 = ((($815)) + 556|0);
  $817 = ((($816)) + 214|0);
  HEAP16[$817>>1] = 91;
 }
 $818 = $2;
 $819 = ((($818)) + 136|0);
 $820 = HEAP32[$819>>2]|0;
 $821 = $820 << 19;
 $822 = $821 >> 31;
 $823 = ($822|0)!=(0);
 if ($823) {
  $824 = $3;
  $825 = ((($824)) + 556|0);
  $826 = ((($825)) + 234|0);
  HEAP16[$826>>1] = 117;
  $827 = $3;
  $828 = ((($827)) + 556|0);
  $829 = ((($828)) + 236|0);
  HEAP16[$829>>1] = 117;
  $830 = $3;
  $831 = ((($830)) + 556|0);
  $832 = ((($831)) + 252|0);
  HEAP16[$832>>1] = 117;
  $833 = $3;
  $834 = ((($833)) + 556|0);
  $835 = ((($834)) + 268|0);
  HEAP16[$835>>1] = 117;
  $836 = $3;
  $837 = ((($836)) + 556|0);
  $838 = ((($837)) + 280|0);
  HEAP16[$838>>1] = 117;
  $839 = $3;
  $840 = ((($839)) + 556|0);
  $841 = ((($840)) + 238|0);
  HEAP16[$841>>1] = 119;
  $842 = $3;
  $843 = ((($842)) + 556|0);
  $844 = ((($843)) + 240|0);
  HEAP16[$844>>1] = 119;
  $845 = $3;
  $846 = ((($845)) + 556|0);
  $847 = ((($846)) + 256|0);
  HEAP16[$847>>1] = 119;
  $848 = $3;
  $849 = ((($848)) + 556|0);
  $850 = ((($849)) + 270|0);
  HEAP16[$850>>1] = 119;
  $851 = $3;
  $852 = ((($851)) + 556|0);
  $853 = ((($852)) + 274|0);
  HEAP16[$853>>1] = 119;
  $854 = $3;
  $855 = ((($854)) + 556|0);
  $856 = ((($855)) + 242|0);
  HEAP16[$856>>1] = 121;
  $857 = $3;
  $858 = ((($857)) + 556|0);
  $859 = ((($858)) + 244|0);
  HEAP16[$859>>1] = 121;
  $860 = $3;
  $861 = ((($860)) + 556|0);
  $862 = ((($861)) + 260|0);
  HEAP16[$862>>1] = 121;
  $863 = $3;
  $864 = ((($863)) + 556|0);
  $865 = ((($864)) + 272|0);
  HEAP16[$865>>1] = 121;
  $866 = $3;
  $867 = ((($866)) + 556|0);
  $868 = ((($867)) + 276|0);
  HEAP16[$868>>1] = 121;
  $869 = $3;
  $870 = ((($869)) + 556|0);
  $871 = ((($870)) + 246|0);
  HEAP16[$871>>1] = 123;
  $872 = $3;
  $873 = ((($872)) + 556|0);
  $874 = ((($873)) + 248|0);
  HEAP16[$874>>1] = 123;
  $875 = $3;
  $876 = ((($875)) + 556|0);
  $877 = ((($876)) + 264|0);
  HEAP16[$877>>1] = 123;
  $878 = $3;
  $879 = ((($878)) + 556|0);
  $880 = ((($879)) + 266|0);
  HEAP16[$880>>1] = 123;
  $881 = $3;
  $882 = ((($881)) + 556|0);
  $883 = ((($882)) + 278|0);
  HEAP16[$883>>1] = 123;
 }
 $884 = $2;
 $885 = ((($884)) + 136|0);
 $886 = HEAP32[$885>>2]|0;
 $887 = $886 << 18;
 $888 = $887 >> 31;
 $889 = ($888|0)!=(0);
 if ($889) {
  $890 = $3;
  $891 = ((($890)) + 556|0);
  $892 = ((($891)) + 298|0);
  HEAP16[$892>>1] = 149;
  $893 = $3;
  $894 = ((($893)) + 556|0);
  $895 = ((($894)) + 300|0);
  HEAP16[$895>>1] = 149;
  $896 = $3;
  $897 = ((($896)) + 556|0);
  $898 = ((($897)) + 302|0);
  HEAP16[$898>>1] = 149;
  $899 = $3;
  $900 = ((($899)) + 556|0);
  $901 = ((($900)) + 306|0);
  HEAP16[$901>>1] = 149;
  $902 = $3;
  $903 = ((($902)) + 556|0);
  $904 = ((($903)) + 310|0);
  HEAP16[$904>>1] = 149;
  $905 = $3;
  $906 = ((($905)) + 556|0);
  $907 = ((($906)) + 314|0);
  HEAP16[$907>>1] = 149;
 }
 $908 = $2;
 $909 = ((($908)) + 136|0);
 $910 = HEAP32[$909>>2]|0;
 $911 = $910 << 17;
 $912 = $911 >> 31;
 $913 = ($912|0)!=(0);
 if ($913) {
  $914 = $3;
  $915 = ((($914)) + 556|0);
  $916 = ((($915)) + 320|0);
  HEAP16[$916>>1] = 160;
  $917 = $3;
  $918 = ((($917)) + 556|0);
  $919 = ((($918)) + 322|0);
  HEAP16[$919>>1] = 160;
  $920 = $3;
  $921 = ((($920)) + 556|0);
  $922 = ((($921)) + 324|0);
  HEAP16[$922>>1] = 160;
  $923 = $3;
  $924 = ((($923)) + 556|0);
  $925 = ((($924)) + 328|0);
  HEAP16[$925>>1] = 160;
  $926 = $3;
  $927 = ((($926)) + 556|0);
  $928 = ((($927)) + 332|0);
  HEAP16[$928>>1] = 160;
  $929 = $3;
  $930 = ((($929)) + 556|0);
  $931 = ((($930)) + 336|0);
  HEAP16[$931>>1] = 160;
 }
 $932 = $2;
 $933 = ((($932)) + 136|0);
 $934 = HEAP32[$933>>2]|0;
 $935 = $934 << 16;
 $936 = $935 >> 31;
 $937 = ($936|0)!=(0);
 if ($937) {
  $938 = $3;
  $939 = ((($938)) + 556|0);
  $940 = ((($939)) + 344|0);
  HEAP16[$940>>1] = 172;
  $941 = $3;
  $942 = ((($941)) + 556|0);
  $943 = ((($942)) + 346|0);
  HEAP16[$943>>1] = 172;
  $944 = $3;
  $945 = ((($944)) + 556|0);
  $946 = ((($945)) + 348|0);
  HEAP16[$946>>1] = 172;
  $947 = $3;
  $948 = ((($947)) + 556|0);
  $949 = ((($948)) + 352|0);
  HEAP16[$949>>1] = 172;
  $950 = $3;
  $951 = ((($950)) + 556|0);
  $952 = ((($951)) + 356|0);
  HEAP16[$952>>1] = 172;
  $953 = $3;
  $954 = ((($953)) + 556|0);
  $955 = ((($954)) + 360|0);
  HEAP16[$955>>1] = 172;
 }
 $956 = $2;
 $957 = ((($956)) + 136|0);
 $958 = HEAP32[$957>>2]|0;
 $959 = $958 << 15;
 $960 = $959 >> 31;
 $961 = ($960|0)!=(0);
 if ($961) {
  $962 = $3;
  $963 = ((($962)) + 556|0);
  $964 = ((($963)) + 362|0);
  HEAP16[$964>>1] = 181;
  $965 = $3;
  $966 = ((($965)) + 556|0);
  $967 = ((($966)) + 364|0);
  HEAP16[$967>>1] = 181;
  $968 = $3;
  $969 = ((($968)) + 556|0);
  $970 = ((($969)) + 366|0);
  HEAP16[$970>>1] = 181;
  $971 = $3;
  $972 = ((($971)) + 556|0);
  $973 = ((($972)) + 370|0);
  HEAP16[$973>>1] = 181;
  $974 = $3;
  $975 = ((($974)) + 556|0);
  $976 = ((($975)) + 374|0);
  HEAP16[$976>>1] = 181;
  $977 = $3;
  $978 = ((($977)) + 556|0);
  $979 = ((($978)) + 378|0);
  HEAP16[$979>>1] = 181;
 }
 $980 = $2;
 $981 = ((($980)) + 136|0);
 $982 = HEAP32[$981>>2]|0;
 $983 = $982 << 14;
 $984 = $983 >> 31;
 $985 = ($984|0)!=(0);
 if ($985) {
  $986 = $3;
  $987 = ((($986)) + 556|0);
  $988 = ((($987)) + 382|0);
  HEAP16[$988>>1] = 191;
  $989 = $3;
  $990 = ((($989)) + 556|0);
  $991 = ((($990)) + 384|0);
  HEAP16[$991>>1] = 191;
  $992 = $3;
  $993 = ((($992)) + 556|0);
  $994 = ((($993)) + 386|0);
  HEAP16[$994>>1] = 191;
  $995 = $3;
  $996 = ((($995)) + 556|0);
  $997 = ((($996)) + 390|0);
  HEAP16[$997>>1] = 191;
  $998 = $3;
  $999 = ((($998)) + 556|0);
  $1000 = ((($999)) + 394|0);
  HEAP16[$1000>>1] = 191;
  $1001 = $3;
  $1002 = ((($1001)) + 556|0);
  $1003 = ((($1002)) + 398|0);
  HEAP16[$1003>>1] = 191;
 }
 $1004 = $2;
 $1005 = ((($1004)) + 136|0);
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = $1006 << 13;
 $1008 = $1007 >> 31;
 $1009 = ($1008|0)!=(0);
 if ($1009) {
  $1010 = $3;
  $1011 = ((($1010)) + 556|0);
  $1012 = ((($1011)) + 402|0);
  HEAP16[$1012>>1] = 201;
  $1013 = $3;
  $1014 = ((($1013)) + 556|0);
  $1015 = ((($1014)) + 404|0);
  HEAP16[$1015>>1] = 201;
  $1016 = $3;
  $1017 = ((($1016)) + 556|0);
  $1018 = ((($1017)) + 406|0);
  HEAP16[$1018>>1] = 201;
  $1019 = $3;
  $1020 = ((($1019)) + 556|0);
  $1021 = ((($1020)) + 408|0);
  HEAP16[$1021>>1] = 201;
  $1022 = $3;
  $1023 = ((($1022)) + 556|0);
  $1024 = ((($1023)) + 410|0);
  HEAP16[$1024>>1] = 201;
  $1025 = $3;
  $1026 = ((($1025)) + 556|0);
  $1027 = ((($1026)) + 414|0);
  HEAP16[$1027>>1] = 201;
  $1028 = $3;
  $1029 = ((($1028)) + 556|0);
  $1030 = ((($1029)) + 418|0);
  HEAP16[$1030>>1] = 201;
  $1031 = $3;
  $1032 = ((($1031)) + 556|0);
  $1033 = ((($1032)) + 422|0);
  HEAP16[$1033>>1] = 201;
  $1034 = $3;
  $1035 = ((($1034)) + 556|0);
  $1036 = ((($1035)) + 426|0);
  HEAP16[$1036>>1] = 201;
  $1037 = $3;
  $1038 = ((($1037)) + 556|0);
  $1039 = ((($1038)) + 430|0);
  HEAP16[$1039>>1] = 201;
 }
 $1040 = $2;
 $1041 = ((($1040)) + 136|0);
 $1042 = HEAP32[$1041>>2]|0;
 $1043 = $1042 << 12;
 $1044 = $1043 >> 31;
 $1045 = ($1044|0)!=(0);
 if ($1045) {
  $1046 = $3;
  $1047 = ((($1046)) + 556|0);
  $1048 = ((($1047)) + 456|0);
  HEAP16[$1048>>1] = 228;
 }
 $1049 = $2;
 $1050 = ((($1049)) + 136|0);
 $1051 = HEAP32[$1050>>2]|0;
 $1052 = $1051 << 11;
 $1053 = $1052 >> 31;
 $1054 = ($1053|0)!=(0);
 if ($1054) {
  $1055 = $3;
  $1056 = ((($1055)) + 556|0);
  $1057 = ((($1056)) + 516|0);
  HEAP16[$1057>>1] = 258;
  $1058 = $3;
  $1059 = ((($1058)) + 556|0);
  $1060 = ((($1059)) + 520|0);
  HEAP16[$1060>>1] = 258;
  $1061 = $3;
  $1062 = ((($1061)) + 556|0);
  $1063 = ((($1062)) + 524|0);
  HEAP16[$1063>>1] = 258;
  $1064 = $3;
  $1065 = ((($1064)) + 556|0);
  $1066 = ((($1065)) + 528|0);
  HEAP16[$1066>>1] = 258;
  $1067 = $3;
  $1068 = ((($1067)) + 556|0);
  $1069 = ((($1068)) + 532|0);
  HEAP16[$1069>>1] = 258;
 }
 $1070 = $2;
 $1071 = ((($1070)) + 136|0);
 $1072 = HEAP32[$1071>>2]|0;
 $1073 = $1072 << 10;
 $1074 = $1073 >> 31;
 $1075 = ($1074|0)!=(0);
 if ($1075) {
  $1076 = $3;
  $1077 = ((($1076)) + 556|0);
  $1078 = ((($1077)) + 602|0);
  HEAP16[$1078>>1] = 279;
  $1079 = $3;
  $1080 = ((($1079)) + 556|0);
  $1081 = ((($1080)) + 604|0);
  HEAP16[$1081>>1] = 279;
  $1082 = $3;
  $1083 = ((($1082)) + 556|0);
  $1084 = ((($1083)) + 542|0);
  HEAP16[$1084>>1] = 279;
  $1085 = $3;
  $1086 = ((($1085)) + 556|0);
  $1087 = ((($1086)) + 544|0);
  HEAP16[$1087>>1] = 279;
  $1088 = $3;
  $1089 = ((($1088)) + 556|0);
  $1090 = ((($1089)) + 546|0);
  HEAP16[$1090>>1] = 279;
  $1091 = $3;
  $1092 = ((($1091)) + 556|0);
  $1093 = ((($1092)) + 548|0);
  HEAP16[$1093>>1] = 279;
  $1094 = $3;
  $1095 = ((($1094)) + 556|0);
  $1096 = ((($1095)) + 550|0);
  HEAP16[$1096>>1] = 279;
  $1097 = $3;
  $1098 = ((($1097)) + 556|0);
  $1099 = ((($1098)) + 552|0);
  HEAP16[$1099>>1] = 279;
  $1100 = $3;
  $1101 = ((($1100)) + 556|0);
  $1102 = ((($1101)) + 554|0);
  HEAP16[$1102>>1] = 279;
  $1103 = $3;
  $1104 = ((($1103)) + 556|0);
  $1105 = ((($1104)) + 556|0);
  HEAP16[$1105>>1] = 279;
 }
 $4 = 0;
 while(1) {
  $1106 = $4;
  $1107 = ($1106|0)<(108);
  if (!($1107)) {
   break;
  }
  $1108 = $3;
  $1109 = ((($1108)) + 2668|0);
  $1110 = $4;
  $1111 = (($1109) + (($1110*208)|0)|0);
  $1112 = $3;
  $1113 = ((($1112)) + 1372|0);
  $1114 = $4;
  $1115 = (($1113) + ($1114<<2)|0);
  HEAP32[$1115>>2] = $1111;
  $1116 = $3;
  $1117 = ((($1116)) + 25132|0);
  $1118 = $4;
  $1119 = (($1117) + (($1118*208)|0)|0);
  $1120 = $3;
  $1121 = ((($1120)) + 1804|0);
  $1122 = $4;
  $1123 = (($1121) + ($1122<<2)|0);
  HEAP32[$1123>>2] = $1119;
  $1124 = $3;
  $1125 = ((($1124)) + 47596|0);
  $1126 = $4;
  $1127 = (($1125) + (($1126*208)|0)|0);
  $1128 = $3;
  $1129 = ((($1128)) + 2236|0);
  $1130 = $4;
  $1131 = (($1129) + ($1130<<2)|0);
  HEAP32[$1131>>2] = $1127;
  $5 = 0;
  while(1) {
   $1132 = $5;
   $1133 = ($1132|0)<(104);
   if (!($1133)) {
    break;
   }
   $1134 = $3;
   $1135 = ((($1134)) + 1372|0);
   $1136 = $4;
   $1137 = (($1135) + ($1136<<2)|0);
   $1138 = HEAP32[$1137>>2]|0;
   $1139 = $5;
   $1140 = (($1138) + ($1139<<1)|0);
   HEAP16[$1140>>1] = 0;
   $1141 = $5;
   $1142 = (($1141) + 1)|0;
   $5 = $1142;
  }
  $5 = 0;
  while(1) {
   $1143 = $5;
   $1144 = ($1143|0)<(104);
   if (!($1144)) {
    break;
   }
   $1145 = $3;
   $1146 = ((($1145)) + 1804|0);
   $1147 = $4;
   $1148 = (($1146) + ($1147<<2)|0);
   $1149 = HEAP32[$1148>>2]|0;
   $1150 = $5;
   $1151 = (($1149) + ($1150<<1)|0);
   HEAP16[$1151>>1] = 0;
   $1152 = $5;
   $1153 = (($1152) + 1)|0;
   $5 = $1153;
  }
  $5 = 0;
  while(1) {
   $1154 = $5;
   $1155 = ($1154|0)<(104);
   if (!($1155)) {
    break;
   }
   $1156 = $3;
   $1157 = ((($1156)) + 2236|0);
   $1158 = $4;
   $1159 = (($1157) + ($1158<<2)|0);
   $1160 = HEAP32[$1159>>2]|0;
   $1161 = $5;
   $1162 = (($1160) + ($1161<<1)|0);
   HEAP16[$1162>>1] = 11;
   $1163 = $5;
   $1164 = (($1163) + 1)|0;
   $5 = $1164;
  }
  $1165 = $4;
  $1166 = (($1165) + 1)|0;
  $4 = $1166;
 }
 $1167 = $2;
 $1168 = ((($1167)) + 136|0);
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = $1169 << 30;
 $1171 = $1170 >> 31;
 $1172 = ($1171|0)!=(0);
 L232: do {
  if ($1172) {
   $4 = 0;
   while(1) {
    $1173 = $4;
    $1174 = ($1173|0)<(8);
    if (!($1174)) {
     break L232;
    }
    $1175 = $3;
    $1176 = ((($1175)) + 1372|0);
    $1177 = $4;
    $1178 = (($1176) + ($1177<<2)|0);
    $1179 = HEAP32[$1178>>2]|0;
    $1180 = $3;
    $1181 = ((($1180)) + 1372|0);
    $1182 = $3;
    $1183 = ((($1182)) + 36|0);
    $1184 = HEAP32[$1183>>2]|0;
    $1185 = $4;
    $1186 = (($1184) + ($1185))|0;
    $1187 = (($1181) + ($1186<<2)|0);
    HEAP32[$1187>>2] = $1179;
    $1188 = $3;
    $1189 = ((($1188)) + 1804|0);
    $1190 = $4;
    $1191 = (($1189) + ($1190<<2)|0);
    $1192 = HEAP32[$1191>>2]|0;
    $1193 = $3;
    $1194 = ((($1193)) + 1804|0);
    $1195 = $3;
    $1196 = ((($1195)) + 36|0);
    $1197 = HEAP32[$1196>>2]|0;
    $1198 = $4;
    $1199 = (($1197) + ($1198))|0;
    $1200 = (($1194) + ($1199<<2)|0);
    HEAP32[$1200>>2] = $1192;
    $1201 = $3;
    $1202 = ((($1201)) + 2236|0);
    $1203 = $4;
    $1204 = (($1202) + ($1203<<2)|0);
    $1205 = HEAP32[$1204>>2]|0;
    $1206 = $3;
    $1207 = ((($1206)) + 2236|0);
    $1208 = $3;
    $1209 = ((($1208)) + 36|0);
    $1210 = HEAP32[$1209>>2]|0;
    $1211 = $4;
    $1212 = (($1210) + ($1211))|0;
    $1213 = (($1207) + ($1212<<2)|0);
    HEAP32[$1213>>2] = $1205;
    $1214 = $4;
    $1215 = (($1214) + 1)|0;
    $4 = $1215;
   }
  }
 } while(0);
 $4 = 0;
 while(1) {
  $1216 = $4;
  $1217 = $3;
  $1218 = ((($1217)) + 36|0);
  $1219 = HEAP32[$1218>>2]|0;
  $1220 = ($1216|0)<($1219|0);
  if (!($1220)) {
   break;
  }
  $5 = 0;
  while(1) {
   $1221 = $5;
   $1222 = $3;
   $1223 = ((($1222)) + 40|0);
   $1224 = HEAP32[$1223>>2]|0;
   $1225 = ($1221|0)<($1224|0);
   if (!($1225)) {
    break;
   }
   $1226 = $2;
   $1227 = ((($1226)) + 300|0);
   $1228 = $4;
   $1229 = (($1227) + (($1228*200)|0)|0);
   $1230 = $5;
   $1231 = (($1229) + ($1230<<1)|0);
   $1232 = HEAP16[$1231>>1]|0;
   $1233 = $1232 << 16 >> 16;
   $1234 = (0)<=($1233|0);
   do {
    if ($1234) {
     $1235 = $2;
     $1236 = ((($1235)) + 300|0);
     $1237 = $4;
     $1238 = (($1236) + (($1237*200)|0)|0);
     $1239 = $5;
     $1240 = (($1238) + ($1239<<1)|0);
     $1241 = HEAP16[$1240>>1]|0;
     $1242 = $1241 << 16 >> 16;
     $1243 = ($1242|0)<=(191);
     if (!($1243)) {
      $1253 = 191;
      break;
     }
     $1244 = $2;
     $1245 = ((($1244)) + 300|0);
     $1246 = $4;
     $1247 = (($1245) + (($1246*200)|0)|0);
     $1248 = $5;
     $1249 = (($1247) + ($1248<<1)|0);
     $1250 = HEAP16[$1249>>1]|0;
     $1251 = $1250 << 16 >> 16;
     $1253 = $1251;
    } else {
     $1253 = 0;
    }
   } while(0);
   $1252 = (2588 + ($1253<<1)|0);
   $1254 = HEAP16[$1252>>1]|0;
   $1255 = $3;
   $1256 = ((($1255)) + 1372|0);
   $1257 = $3;
   $1258 = ((($1257)) + 88|0);
   $1259 = HEAP32[$1258>>2]|0;
   $1260 = $4;
   $1261 = (($1259) + ($1260))|0;
   $1262 = (($1256) + ($1261<<2)|0);
   $1263 = HEAP32[$1262>>2]|0;
   $1264 = $3;
   $1265 = ((($1264)) + 92|0);
   $1266 = HEAP32[$1265>>2]|0;
   $1267 = $5;
   $1268 = (($1266) + ($1267))|0;
   $1269 = (($1263) + ($1268<<1)|0);
   HEAP16[$1269>>1] = $1254;
   $1270 = $5;
   $1271 = (($1270) + 1)|0;
   $5 = $1271;
  }
  $1272 = $4;
  $1273 = (($1272) + 1)|0;
  $4 = $1273;
 }
 $1274 = $3;
 $1275 = ((($1274)) + 25132|0);
 $1276 = $3;
 $1277 = ((($1276)) + 2668|0);
 _memcpy(($1275|0),($1277|0),22464)|0;
 STACKTOP = sp;return;
}
function _binary_to_cave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 _memset(($5|0),0,20300)|0;
 $6 = $2;
 $7 = ((($6)) + 2106|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = $9 & 255;
 $11 = ($10|0)==(255);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 2107|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = $15 & 255;
  $17 = ($16|0)==(54);
  if ($17) {
   $18 = $2;
   $19 = ((($18)) + 2108|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = $21 & 255;
   $23 = ($22|0)==(48);
   if ($23) {
    $24 = $2;
    $25 = ((($24)) + 2109|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = $27 & 255;
    $29 = ($28|0)==(48);
    if ($29) {
     $30 = $2;
     $31 = $3;
     _version_six($30,$31);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $32 = $2;
 $33 = ((($32)) + 2106|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = $35 & 255;
 $37 = ($36|0)==(255);
 if ($37) {
  $38 = $2;
  $39 = ((($38)) + 2107|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = $41 & 255;
  $43 = ($42|0)==(53);
  if ($43) {
   $44 = $2;
   $45 = ((($44)) + 2108|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = $47 & 255;
   $49 = ($48|0)==(48);
   if ($49) {
    $50 = $2;
    $51 = ((($50)) + 2109|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52 << 24 >> 24;
    $54 = $53 & 255;
    $55 = ($54|0)==(48);
    if ($55) {
     $56 = $2;
     $57 = $3;
     _version_five($56,$57);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $58 = $2;
 $59 = ((($58)) + 1983|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 << 24 >> 24;
 $62 = $61 & 255;
 $63 = ($62|0)==(116);
 if (!($63)) {
  $64 = $2;
  $65 = ((($64)) + 2047|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = $67 & 255;
  $69 = ($68|0)==(116);
  if (!($69)) {
   $72 = $2;
   $73 = ((($72)) + 1983|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = $75 & 255;
   $77 = ($76|0)==(27);
   if (!($77)) {
    $78 = $2;
    $79 = ((($78)) + 2047|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = $81 & 255;
    $83 = ($82|0)==(219);
    if (!($83)) {
     STACKTOP = sp;return;
    }
   }
   $84 = $2;
   HEAP8[$84>>0] = -125;
   $85 = $2;
   $86 = ((($85)) + 1|0);
   HEAP8[$86>>0] = -125;
   $4 = 2;
   while(1) {
    $87 = $4;
    $88 = ($87|0)<(2106);
    $89 = $2;
    if (!($88)) {
     break;
    }
    $90 = $4;
    $91 = (($89) + ($90)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92 << 24 >> 24;
    $94 = $4;
    $95 = ($94*7)|0;
    $96 = (($95) + 101)|0;
    $97 = $93 ^ $96;
    $98 = (($97) - 17)|0;
    $99 = $98&255;
    $100 = $2;
    $101 = $4;
    $102 = (($100) + ($101)|0);
    HEAP8[$102>>0] = $99;
    $103 = $4;
    $104 = (($103) + 1)|0;
    $4 = $104;
   }
   $105 = $3;
   _version_four($89,$105);
   STACKTOP = sp;return;
  }
 }
 $70 = $2;
 $71 = $3;
 _version_four($70,$71);
 STACKTOP = sp;return;
}
function _version_six($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 64;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 32;
 $12 = $3;
 $13 = ((($12)) + 136|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -3;
 $16 = $15 | 2;
 HEAP32[$13>>2] = $16;
 $17 = $2;
 $18 = ((($17)) + 2150|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 255;
 $22 = $21 & 128;
 $23 = ($22|0)!=(0);
 $24 = $23 ? 1 : 0;
 $25 = $3;
 $26 = ((($25)) + 136|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24 & 1;
 $29 = $27 & -2;
 $30 = $29 | $28;
 HEAP32[$26>>2] = $30;
 $31 = $2;
 $32 = ((($31)) + 2110|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = $34 & 255;
 $36 = $35 << 8;
 $37 = $2;
 $38 = ((($37)) + 2111|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39 << 24 >> 24;
 $41 = $40 & 255;
 $42 = $36 | $41;
 $43 = ($42*50)|0;
 $44 = (($43) + 7)|0;
 $45 = (($44|0) / 8)&-1;
 $46 = $3;
 HEAP32[$46>>2] = $45;
 $47 = $2;
 $48 = ((($47)) + 2095|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49 << 24 >> 24;
 $51 = $50 & 255;
 $52 = $3;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = $51;
 $54 = $2;
 $55 = ((($54)) + 2089|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = $57 & 255;
 $59 = $3;
 $60 = ((($59)) + 36|0);
 HEAP32[$60>>2] = $58;
 $61 = $2;
 $62 = ((($61)) + 2086|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = $64 & 255;
 $66 = $3;
 $67 = ((($66)) + 40|0);
 HEAP32[$67>>2] = $65;
 $68 = $2;
 $69 = ((($68)) + 2088|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = $71 & 255;
 $73 = $3;
 $74 = ((($73)) + 44|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = ((($75)) + 2087|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = $78 & 255;
 $80 = $3;
 $81 = ((($80)) + 48|0);
 HEAP32[$81>>2] = $79;
 $82 = $2;
 $83 = ((($82)) + 2084|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 << 24 >> 24;
 $86 = $85 & 255;
 $87 = $3;
 $88 = ((($87)) + 52|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 $90 = ((($89)) + 2085|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = $92 & 255;
 $94 = $3;
 $95 = ((($94)) + 56|0);
 HEAP32[$95>>2] = $93;
 $96 = $2;
 $97 = ((($96)) + 2090|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98 << 24 >> 24;
 $100 = $99 & 255;
 $101 = $3;
 $102 = ((($101)) + 60|0);
 HEAP32[$102>>2] = $100;
 $103 = $2;
 $104 = ((($103)) + 2153|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105 << 24 >> 24;
 $107 = $106 & 255;
 $108 = $3;
 $109 = ((($108)) + 64|0);
 HEAP32[$109>>2] = $107;
 $110 = $2;
 $111 = ((($110)) + 2091|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112 << 24 >> 24;
 $114 = $113 & 255;
 $115 = $3;
 $116 = ((($115)) + 68|0);
 HEAP32[$116>>2] = $114;
 $117 = $2;
 $118 = ((($117)) + 2092|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119 << 24 >> 24;
 $121 = $120 & 255;
 $122 = $3;
 $123 = ((($122)) + 72|0);
 HEAP32[$123>>2] = $121;
 $124 = $2;
 $125 = ((($124)) + 2151|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126 << 24 >> 24;
 $128 = $127 & 255;
 $129 = $3;
 $130 = ((($129)) + 76|0);
 HEAP32[$130>>2] = $128;
 $131 = $2;
 $132 = ((($131)) + 2152|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133 << 24 >> 24;
 $135 = $134 & 255;
 $136 = $3;
 $137 = ((($136)) + 80|0);
 HEAP32[$137>>2] = $135;
 $138 = $2;
 $139 = ((($138)) + 2093|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = $140 << 24 >> 24;
 $142 = $141 & 255;
 $143 = $142<<3;
 $144 = (($143|0) / 5)&-1;
 $145 = $3;
 $146 = ((($145)) + 84|0);
 HEAP32[$146>>2] = $144;
 $147 = $2;
 $148 = ((($147)) + 2164|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149 << 24 >> 24;
 $151 = $150 & 255;
 $152 = $151 << 8;
 $153 = $2;
 $154 = ((($153)) + 2165|0);
 $155 = HEAP8[$154>>0]|0;
 $156 = $155 << 24 >> 24;
 $157 = $156 & 255;
 $158 = $152 | $157;
 $159 = $3;
 $160 = ((($159)) + 88|0);
 HEAP32[$160>>2] = $158;
 $161 = $2;
 $162 = ((($161)) + 2166|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163 << 24 >> 24;
 $165 = $164 & 255;
 $166 = $165 << 8;
 $167 = $2;
 $168 = ((($167)) + 2167|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = $169 << 24 >> 24;
 $171 = $170 & 255;
 $172 = $166 | $171;
 $173 = $3;
 $174 = ((($173)) + 92|0);
 HEAP32[$174>>2] = $172;
 $175 = $2;
 $176 = ((($175)) + 2160|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177 << 24 >> 24;
 $179 = $178 & 255;
 $180 = $179 << 8;
 $181 = $2;
 $182 = ((($181)) + 2161|0);
 $183 = HEAP8[$182>>0]|0;
 $184 = $183 << 24 >> 24;
 $185 = $184 & 255;
 $186 = $180 | $185;
 $187 = $3;
 $188 = ((($187)) + 96|0);
 HEAP32[$188>>2] = $186;
 $189 = $2;
 $190 = ((($189)) + 2100|0);
 $191 = HEAP8[$190>>0]|0;
 $192 = $191 << 24 >> 24;
 $193 = $192 & 255;
 $194 = $193 << 8;
 $195 = $2;
 $196 = ((($195)) + 2101|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197 << 24 >> 24;
 $199 = $198 & 255;
 $200 = $194 | $199;
 $201 = $200<<3;
 $202 = $3;
 $203 = ((($202)) + 100|0);
 HEAP32[$203>>2] = $201;
 $204 = $2;
 $205 = ((($204)) + 2102|0);
 $206 = HEAP8[$205>>0]|0;
 $207 = $206 << 24 >> 24;
 $208 = $207 & 255;
 $209 = $208 << 8;
 $210 = $2;
 $211 = ((($210)) + 2103|0);
 $212 = HEAP8[$211>>0]|0;
 $213 = $212 << 24 >> 24;
 $214 = $213 & 255;
 $215 = $209 | $214;
 $216 = $3;
 $217 = ((($216)) + 104|0);
 HEAP32[$217>>2] = $215;
 $218 = $2;
 $219 = ((($218)) + 2104|0);
 $220 = HEAP8[$219>>0]|0;
 $221 = $220 << 24 >> 24;
 $222 = $221 & 255;
 $223 = $222 << 8;
 $224 = $2;
 $225 = ((($224)) + 2105|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = $226 << 24 >> 24;
 $228 = $227 & 255;
 $229 = $223 | $228;
 $230 = $3;
 $231 = ((($230)) + 108|0);
 HEAP32[$231>>2] = $229;
 $232 = $2;
 $233 = ((($232)) + 2154|0);
 $234 = HEAP8[$233>>0]|0;
 $235 = $234 << 24 >> 24;
 $236 = $235 & 255;
 $237 = $236 << 8;
 $238 = $2;
 $239 = ((($238)) + 2155|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240 << 24 >> 24;
 $242 = $241 & 255;
 $243 = $237 | $242;
 $244 = $3;
 $245 = ((($244)) + 112|0);
 HEAP32[$245>>2] = $243;
 $246 = $2;
 $247 = ((($246)) + 2156|0);
 $248 = HEAP8[$247>>0]|0;
 $249 = $248 << 24 >> 24;
 $250 = $249 & 255;
 $251 = $250 << 8;
 $252 = $2;
 $253 = ((($252)) + 2157|0);
 $254 = HEAP8[$253>>0]|0;
 $255 = $254 << 24 >> 24;
 $256 = $255 & 255;
 $257 = $251 | $256;
 $258 = $3;
 $259 = ((($258)) + 116|0);
 HEAP32[$259>>2] = $257;
 $260 = $3;
 $261 = ((($260)) + 120|0);
 HEAP32[$261>>2] = 9999;
 $262 = $2;
 $263 = ((($262)) + 2149|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = $264 << 24 >> 24;
 $266 = $265 & 255;
 $6 = $266;
 $267 = $6;
 $268 = $267 & 8;
 $269 = ($268|0)!=(0);
 if ($269) {
  $282 = 0;
 } else {
  $270 = $6;
  $271 = $270 & 1;
  $272 = ($271|0)!=(0);
  if ($272) {
   $282 = 1;
  } else {
   $273 = $6;
   $274 = $273 & 2;
   $275 = ($274|0)!=(0);
   if ($275) {
    $282 = 2;
   } else {
    $276 = $6;
    $277 = $276 & 4;
    $278 = ($277|0)!=(0);
    $279 = $278 ? 3 : 0;
    $282 = $279;
   }
  }
 }
 $280 = $3;
 $281 = ((($280)) + 132|0);
 HEAP32[$281>>2] = $282;
 $283 = $6;
 $284 = $283 & 15;
 $285 = ($284|0)!=(0);
 $286 = $285 ? 1 : 0;
 $287 = $3;
 $288 = ((($287)) + 136|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = $286 & 1;
 $291 = $290 << 8;
 $292 = $289 & -257;
 $293 = $292 | $291;
 HEAP32[$288>>2] = $293;
 $4 = 0;
 while(1) {
  $294 = $4;
  $295 = ($294|0)<(8);
  $296 = $2;
  if (!($295)) {
   break;
  }
  $297 = ((($296)) + 2159|0);
  $298 = HEAP8[$297>>0]|0;
  $299 = $298 << 24 >> 24;
  $300 = $299 & 255;
  $301 = (4060 + ($300<<1)|0);
  $302 = HEAP16[$301>>1]|0;
  $303 = $3;
  $304 = ((($303)) + 284|0);
  $305 = $4;
  $306 = (($304) + ($305<<1)|0);
  HEAP16[$306>>1] = $302;
  $307 = $4;
  $308 = (($307) + 1)|0;
  $4 = $308;
 }
 $309 = ((($296)) + 2162|0);
 $310 = HEAP8[$309>>0]|0;
 $311 = $310 << 24 >> 24;
 $312 = $311 & 255;
 $6 = $312;
 $313 = $6;
 $314 = $313 & 1;
 $315 = ($314|0)!=(0);
 $316 = $315 ? 1 : 0;
 $317 = $3;
 $318 = ((($317)) + 136|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = $316 & 1;
 $321 = $320 << 2;
 $322 = $319 & -5;
 $323 = $322 | $321;
 HEAP32[$318>>2] = $323;
 $324 = $6;
 $325 = $324 & 128;
 $326 = ($325|0)!=(0);
 $327 = $326 ? 1 : 0;
 $328 = $3;
 $329 = ((($328)) + 136|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = $327 & 1;
 $332 = $331 << 3;
 $333 = $330 & -9;
 $334 = $333 | $332;
 HEAP32[$329>>2] = $334;
 $335 = $6;
 $336 = $335 & 1;
 $337 = ($336|0)==(0);
 if ($337) {
  $338 = $2;
  $339 = ((($338)) + 2163|0);
  $340 = HEAP8[$339>>0]|0;
  $341 = $340 << 24 >> 24;
  $342 = $341 & 255;
  $6 = $342;
  $343 = $6;
  $344 = $343 & 1;
  $345 = ($344|0)==(0);
  if ($345) {
   $346 = $3;
   $347 = ((($346)) + 284|0);
   $348 = ((($347)) + 2|0);
   HEAP16[$348>>1] = 0;
  }
  $349 = $6;
  $350 = $349 & 4;
  $351 = ($350|0)==(0);
  if ($351) {
   $352 = $3;
   $353 = ((($352)) + 284|0);
   $354 = ((($353)) + 6|0);
   HEAP16[$354>>1] = 0;
  }
  $355 = $6;
  $356 = $355 & 8;
  $357 = ($356|0)==(0);
  if ($357) {
   $358 = $3;
   $359 = ((($358)) + 284|0);
   $360 = ((($359)) + 8|0);
   HEAP16[$360>>1] = 0;
  }
  $361 = $6;
  $362 = $361 & 2;
  $363 = ($362|0)==(0);
  if ($363) {
   $364 = $3;
   $365 = ((($364)) + 284|0);
   $366 = ((($365)) + 12|0);
   HEAP16[$366>>1] = 0;
  }
  $367 = $6;
  $368 = $367 & 128;
  $369 = ($368|0)==(0);
  if ($369) {
   $370 = $3;
   $371 = ((($370)) + 284|0);
   HEAP16[$371>>1] = 0;
  }
  $372 = $6;
  $373 = $372 & 64;
  $374 = ($373|0)==(0);
  if ($374) {
   $375 = $3;
   $376 = ((($375)) + 284|0);
   $377 = ((($376)) + 4|0);
   HEAP16[$377>>1] = 0;
  }
  $378 = $6;
  $379 = $378 & 32;
  $380 = ($379|0)==(0);
  if ($380) {
   $381 = $3;
   $382 = ((($381)) + 284|0);
   $383 = ((($382)) + 10|0);
   HEAP16[$383>>1] = 0;
  }
  $384 = $6;
  $385 = $384 & 16;
  $386 = ($385|0)==(0);
  if ($386) {
   $387 = $3;
   $388 = ((($387)) + 284|0);
   $389 = ((($388)) + 14|0);
   HEAP16[$389>>1] = 0;
  }
 }
 $390 = $2;
 $391 = ((($390)) + 2168|0);
 $392 = HEAP8[$391>>0]|0;
 $393 = $392 << 24 >> 24;
 $394 = $393 & 255;
 $395 = $394 << 8;
 $396 = $2;
 $397 = ((($396)) + 2169|0);
 $398 = HEAP8[$397>>0]|0;
 $399 = $398 << 24 >> 24;
 $400 = $399 & 255;
 $401 = $395 | $400;
 $6 = $401;
 $402 = $6;
 $403 = $402 & 64;
 $404 = ($403|0)!=(0);
 $405 = $404 ? 1 : 0;
 $406 = $3;
 $407 = ((($406)) + 136|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = $405 & 1;
 $410 = $409 << 9;
 $411 = $408 & -513;
 $412 = $411 | $410;
 HEAP32[$407>>2] = $412;
 $413 = $6;
 $414 = $413 & 256;
 $415 = ($414|0)!=(0);
 $416 = $415 ? 1 : 0;
 $417 = $3;
 $418 = ((($417)) + 136|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = $416 & 1;
 $421 = $420 << 10;
 $422 = $419 & -1025;
 $423 = $422 | $421;
 HEAP32[$418>>2] = $423;
 $424 = $6;
 $425 = $424 & 128;
 $426 = ($425|0)!=(0);
 $427 = $426 ? 1 : 0;
 $428 = $3;
 $429 = ((($428)) + 136|0);
 $430 = HEAP32[$429>>2]|0;
 $431 = $427 & 1;
 $432 = $431 << 11;
 $433 = $430 & -2049;
 $434 = $433 | $432;
 HEAP32[$429>>2] = $434;
 $435 = $6;
 $436 = $435 & 32;
 $437 = ($436|0)!=(0);
 $438 = $437 ? 1 : 0;
 $439 = $3;
 $440 = ((($439)) + 136|0);
 $441 = HEAP32[$440>>2]|0;
 $442 = $438 & 1;
 $443 = $442 << 12;
 $444 = $441 & -4097;
 $445 = $444 | $443;
 HEAP32[$440>>2] = $445;
 $446 = $6;
 $447 = $446 & 1;
 $448 = ($447|0)!=(0);
 $449 = $448 ? 1 : 0;
 $450 = $3;
 $451 = ((($450)) + 136|0);
 $452 = HEAP32[$451>>2]|0;
 $453 = $449 & 1;
 $454 = $453 << 13;
 $455 = $452 & -8193;
 $456 = $455 | $454;
 HEAP32[$451>>2] = $456;
 $457 = $6;
 $458 = $457 & 2;
 $459 = ($458|0)!=(0);
 $460 = $459 ? 1 : 0;
 $461 = $3;
 $462 = ((($461)) + 136|0);
 $463 = HEAP32[$462>>2]|0;
 $464 = $460 & 1;
 $465 = $464 << 14;
 $466 = $463 & -16385;
 $467 = $466 | $465;
 HEAP32[$462>>2] = $467;
 $468 = $6;
 $469 = $468 & 4;
 $470 = ($469|0)!=(0);
 $471 = $470 ? 1 : 0;
 $472 = $3;
 $473 = ((($472)) + 136|0);
 $474 = HEAP32[$473>>2]|0;
 $475 = $471 & 1;
 $476 = $475 << 15;
 $477 = $474 & -32769;
 $478 = $477 | $476;
 HEAP32[$473>>2] = $478;
 $479 = $6;
 $480 = $479 & 8;
 $481 = ($480|0)!=(0);
 $482 = $481 ? 1 : 0;
 $483 = $3;
 $484 = ((($483)) + 136|0);
 $485 = HEAP32[$484>>2]|0;
 $486 = $482 & 1;
 $487 = $486 << 16;
 $488 = $485 & -65537;
 $489 = $488 | $487;
 HEAP32[$484>>2] = $489;
 $490 = $6;
 $491 = $490 & 16;
 $492 = ($491|0)!=(0);
 $493 = $492 ? 1 : 0;
 $494 = $3;
 $495 = ((($494)) + 136|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = $493 & 1;
 $498 = $497 << 17;
 $499 = $496 & -131073;
 $500 = $499 | $498;
 HEAP32[$495>>2] = $500;
 $501 = $6;
 $502 = $501 & 512;
 $503 = ($502|0)!=(0);
 $504 = $503 ? 1 : 0;
 $505 = $3;
 $506 = ((($505)) + 136|0);
 $507 = HEAP32[$506>>2]|0;
 $508 = $504 & 1;
 $509 = $508 << 18;
 $510 = $507 & -262145;
 $511 = $510 | $509;
 HEAP32[$506>>2] = $511;
 $512 = $6;
 $513 = $512 & 4096;
 $514 = ($513|0)!=(0);
 $515 = $514 ? 1 : 0;
 $516 = $3;
 $517 = ((($516)) + 136|0);
 $518 = HEAP32[$517>>2]|0;
 $519 = $515 & 1;
 $520 = $519 << 19;
 $521 = $518 & -524289;
 $522 = $521 | $520;
 HEAP32[$517>>2] = $522;
 $523 = $6;
 $524 = $523 & 1024;
 $525 = ($524|0)!=(0);
 $526 = $525 ? 1 : 0;
 $527 = $3;
 $528 = ((($527)) + 136|0);
 $529 = HEAP32[$528>>2]|0;
 $530 = $526 & 1;
 $531 = $530 << 20;
 $532 = $529 & -1048577;
 $533 = $532 | $531;
 HEAP32[$528>>2] = $533;
 $534 = $6;
 $535 = $534 & 2048;
 $536 = ($535|0)!=(0);
 $537 = $536 ? 1 : 0;
 $538 = $3;
 $539 = ((($538)) + 136|0);
 $540 = HEAP32[$539>>2]|0;
 $541 = $537 & 1;
 $542 = $541 << 21;
 $543 = $540 & -2097153;
 $544 = $543 | $542;
 HEAP32[$539>>2] = $544;
 $4 = 0;
 while(1) {
  $545 = $4;
  $546 = ($545|0)<(8);
  if (!($546)) {
   break;
  }
  $547 = $4;
  $548 = (($547|0) / 4)&-1;
  $549 = $548<<6;
  $550 = (2048 + ($549))|0;
  $551 = $4;
  $552 = (($551|0) % 4)&-1;
  $553 = ($552*9)|0;
  $554 = (($550) + ($553))|0;
  $7 = $554;
  $5 = 0;
  while(1) {
   $555 = $5;
   $556 = ($555|0)<(9);
   if (!($556)) {
    break;
   }
   $557 = $2;
   $558 = $7;
   $559 = (($557) + ($558)|0);
   $560 = HEAP8[$559>>0]|0;
   $561 = $560 << 24 >> 24;
   $562 = $561 & 255;
   $563 = (4060 + ($562<<1)|0);
   $564 = HEAP16[$563>>1]|0;
   $565 = $3;
   $566 = ((($565)) + 140|0);
   $567 = $4;
   $568 = (($566) + (($567*18)|0)|0);
   $569 = $5;
   $570 = (($568) + ($569<<1)|0);
   HEAP16[$570>>1] = $564;
   $571 = $7;
   $572 = (($571) + 1)|0;
   $7 = $572;
   $573 = $5;
   $574 = (($573) + 1)|0;
   $5 = $574;
  }
  $575 = $4;
  $576 = (($575) + 1)|0;
  $4 = $576;
 }
 $7 = 0;
 $5 = 0;
 while(1) {
  $577 = $5;
  $578 = ($577|0)<(32);
  $4 = 0;
  if (!($578)) {
   break;
  }
  while(1) {
   $579 = $4;
   $580 = ($579|0)<(64);
   if (!($580)) {
    break;
   }
   $581 = $2;
   $582 = $7;
   $583 = (($581) + ($582)|0);
   $584 = HEAP8[$583>>0]|0;
   $585 = $584 << 24 >> 24;
   $586 = $585 & 255;
   $587 = (4060 + ($586<<1)|0);
   $588 = HEAP16[$587>>1]|0;
   $589 = $3;
   $590 = ((($589)) + 300|0);
   $591 = $4;
   $592 = (($590) + (($591*200)|0)|0);
   $593 = $5;
   $594 = (($592) + ($593<<1)|0);
   HEAP16[$594>>1] = $588;
   $595 = $7;
   $596 = (($595) + 1)|0;
   $7 = $596;
   $597 = $4;
   $598 = (($597) + 1)|0;
   $4 = $598;
  }
  $599 = $5;
  $600 = (($599) + 1)|0;
  $5 = $600;
 }
 while(1) {
  $601 = $4;
  $602 = ($601|0)<(8);
  if (!($602)) {
   break;
  }
  $5 = 0;
  while(1) {
   $603 = $5;
   $604 = ($603|0)<(9);
   if (!($604)) {
    break;
   }
   $605 = $5;
   $606 = ($605|0)<(6);
   if ($606) {
    $607 = $3;
    $608 = ((($607)) + 140|0);
    $609 = $4;
    $610 = (($608) + (($609*18)|0)|0);
    $611 = $5;
    $612 = (($611) + 3)|0;
    $613 = (($610) + ($612<<1)|0);
    $614 = HEAP16[$613>>1]|0;
    $615 = $614 << 16 >> 16;
    $616 = ($615|0)==(101);
    if ($616) {
     $617 = $3;
     $618 = ((($617)) + 140|0);
     $619 = $4;
     $620 = (($618) + (($619*18)|0)|0);
     $621 = $5;
     $622 = (($620) + ($621<<1)|0);
     HEAP16[$622>>1] = 106;
     $623 = $5;
     $624 = ($623|0)<(3);
     if ($624) {
      $625 = $3;
      $626 = ((($625)) + 140|0);
      $627 = $4;
      $628 = (($626) + (($627*18)|0)|0);
      $629 = $5;
      $630 = (($629) + 6)|0;
      $631 = (($628) + ($630<<1)|0);
      $632 = HEAP16[$631>>1]|0;
      $633 = $632 << 16 >> 16;
      $634 = ($633|0)==(101);
      if ($634) {
       $635 = $3;
       $636 = ((($635)) + 140|0);
       $637 = $4;
       $638 = (($636) + (($637*18)|0)|0);
       $639 = $5;
       $640 = (($638) + ($639<<1)|0);
       HEAP16[$640>>1] = 0;
      }
     }
    }
   }
   $641 = $5;
   $642 = (($641) + 1)|0;
   $5 = $642;
  }
  $643 = $4;
  $644 = (($643) + 1)|0;
  $4 = $644;
 }
 $4 = 0;
 while(1) {
  $645 = $4;
  $646 = ($645|0)<(64);
  if (!($646)) {
   break;
  }
  $5 = 0;
  while(1) {
   $647 = $5;
   $648 = ($647|0)<(32);
   if (!($648)) {
    break;
   }
   $649 = $5;
   $650 = ($649|0)<(31);
   if ($650) {
    $651 = $3;
    $652 = ((($651)) + 300|0);
    $653 = $4;
    $654 = (($652) + (($653*200)|0)|0);
    $655 = $5;
    $656 = (($655) + 1)|0;
    $657 = (($654) + ($656<<1)|0);
    $658 = HEAP16[$657>>1]|0;
    $659 = $658 << 16 >> 16;
    $660 = ($659|0)==(101);
    if ($660) {
     $661 = $3;
     $662 = ((($661)) + 300|0);
     $663 = $4;
     $664 = (($662) + (($663*200)|0)|0);
     $665 = $5;
     $666 = (($664) + ($665<<1)|0);
     HEAP16[$666>>1] = 106;
     $667 = $5;
     $668 = ($667|0)<(30);
     if ($668) {
      $669 = $3;
      $670 = ((($669)) + 300|0);
      $671 = $4;
      $672 = (($670) + (($671*200)|0)|0);
      $673 = $5;
      $674 = (($673) + 2)|0;
      $675 = (($672) + ($674<<1)|0);
      $676 = HEAP16[$675>>1]|0;
      $677 = $676 << 16 >> 16;
      $678 = ($677|0)==(101);
      if ($678) {
       $679 = $3;
       $680 = ((($679)) + 300|0);
       $681 = $4;
       $682 = (($680) + (($681*200)|0)|0);
       $683 = $5;
       $684 = (($682) + ($683<<1)|0);
       HEAP16[$684>>1] = 0;
      }
     }
    }
   }
   $685 = $5;
   $686 = (($685) + 1)|0;
   $5 = $686;
  }
  $687 = $4;
  $688 = (($687) + 1)|0;
  $4 = $688;
 }
 $7 = 2096;
 $6 = 0;
 while(1) {
  $689 = $6;
  $690 = ($689|0)<(2);
  if (!($690)) {
   break;
  }
  $691 = $2;
  $692 = $7;
  $693 = (($691) + ($692)|0);
  $694 = HEAP8[$693>>0]|0;
  $695 = $694 << 24 >> 24;
  $696 = $695 & 255;
  $697 = $696 << 8;
  $698 = $2;
  $699 = $7;
  $700 = (($699) + 1)|0;
  $701 = (($698) + ($700)|0);
  $702 = HEAP8[$701>>0]|0;
  $703 = $702 << 24 >> 24;
  $704 = $703 & 255;
  $705 = $697 | $704;
  $4 = $705;
  $706 = $4;
  $707 = $706 >> 0;
  $708 = $707 & 63;
  $4 = $708;
  $709 = $2;
  $710 = $7;
  $711 = (($709) + ($710)|0);
  $712 = HEAP8[$711>>0]|0;
  $713 = $712 << 24 >> 24;
  $714 = $713 & 255;
  $715 = $714 << 8;
  $716 = $2;
  $717 = $7;
  $718 = (($717) + 1)|0;
  $719 = (($716) + ($718)|0);
  $720 = HEAP8[$719>>0]|0;
  $721 = $720 << 24 >> 24;
  $722 = $721 & 255;
  $723 = $715 | $722;
  $5 = $723;
  $724 = $5;
  $725 = $724 >> 6;
  $726 = $725 & 31;
  $5 = $726;
  $727 = $4;
  $728 = $3;
  $729 = ((($728)) + 20|0);
  $730 = $6;
  $731 = (($729) + ($730<<2)|0);
  HEAP32[$731>>2] = $727;
  $732 = $5;
  $733 = $3;
  $734 = ((($733)) + 28|0);
  $735 = $6;
  $736 = (($734) + ($735<<2)|0);
  HEAP32[$736>>2] = $732;
  $737 = $3;
  $738 = ((($737)) + 300|0);
  $739 = $4;
  $740 = (($738) + (($739*200)|0)|0);
  $741 = $5;
  $742 = (($740) + ($741<<1)|0);
  HEAP16[$742>>1] = 0;
  $743 = $7;
  $744 = (($743) + 2)|0;
  $7 = $744;
  $745 = $6;
  $746 = (($745) + 1)|0;
  $6 = $746;
 }
 $747 = $3;
 $748 = HEAP32[$747>>2]|0;
 $749 = ($748|0)==(0);
 if ($749) {
  $750 = $3;
  HEAP32[$750>>2] = 9999;
 }
 $7 = 0;
 while(1) {
  $751 = $7;
  $752 = ($751|0)<(2048);
  if (!($752)) {
   break;
  }
  $753 = $2;
  $754 = $7;
  $755 = (($753) + ($754)|0);
  $756 = HEAP8[$755>>0]|0;
  $757 = $756 << 24 >> 24;
  $758 = $757 & 255;
  switch ($758|0) {
  case 36:  {
   $759 = $3;
   $760 = ((($759)) + 136|0);
   $761 = HEAP32[$760>>2]|0;
   $762 = $761 & -17;
   $763 = $762 | 16;
   HEAP32[$760>>2] = $763;
   $764 = $3;
   $765 = ((($764)) + 104|0);
   HEAP32[$765>>2] = 9999;
   break;
  }
  case 40:  {
   $766 = $3;
   $767 = ((($766)) + 136|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = $768 & -33;
   $770 = $769 | 32;
   HEAP32[$767>>2] = $770;
   $771 = $7;
   $772 = $771 >> 0;
   $773 = $772 & 63;
   $4 = $773;
   $774 = $7;
   $775 = $774 >> 6;
   $776 = $775 & 31;
   $5 = $776;
   $777 = $4;
   $778 = $3;
   $779 = ((($778)) + 124|0);
   HEAP32[$779>>2] = $777;
   $780 = $5;
   $781 = $3;
   $782 = ((($781)) + 128|0);
   HEAP32[$782>>2] = $780;
   break;
  }
  case 163:  {
   $783 = $3;
   $784 = ((($783)) + 136|0);
   $785 = HEAP32[$784>>2]|0;
   $786 = $785 & -65;
   $787 = $786 | 64;
   HEAP32[$784>>2] = $787;
   break;
  }
  case 164:  {
   $788 = $3;
   $789 = ((($788)) + 136|0);
   $790 = HEAP32[$789>>2]|0;
   $791 = $790 & -129;
   $792 = $791 | 128;
   HEAP32[$789>>2] = $792;
   break;
  }
  default: {
  }
  }
  $793 = $7;
  $794 = (($793) + 1)|0;
  $7 = $794;
 }
 STACKTOP = sp;return;
}
function _version_five($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 64;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 32;
 $12 = $3;
 $13 = ((($12)) + 136|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -3;
 $16 = $15 | 2;
 HEAP32[$13>>2] = $16;
 $17 = $2;
 $18 = ((($17)) + 2094|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 255;
 $22 = ($21*500)|0;
 $23 = (($22) + 7)|0;
 $24 = (($23|0) / 8)&-1;
 $25 = $3;
 HEAP32[$25>>2] = $24;
 $26 = $2;
 $27 = ((($26)) + 2095|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = $29 & 255;
 $31 = $3;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 $34 = ((($33)) + 2089|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = $36 & 255;
 $38 = $3;
 $39 = ((($38)) + 36|0);
 HEAP32[$39>>2] = $37;
 $40 = $2;
 $41 = ((($40)) + 2086|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 << 24 >> 24;
 $44 = $43 & 255;
 $45 = $3;
 $46 = ((($45)) + 40|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = ((($47)) + 2088|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49 << 24 >> 24;
 $51 = $50 & 255;
 $52 = $3;
 $53 = ((($52)) + 44|0);
 HEAP32[$53>>2] = $51;
 $54 = $2;
 $55 = ((($54)) + 2087|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = $57 & 255;
 $59 = $3;
 $60 = ((($59)) + 48|0);
 HEAP32[$60>>2] = $58;
 $61 = $2;
 $62 = ((($61)) + 2084|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = $64 & 255;
 $66 = $3;
 $67 = ((($66)) + 52|0);
 HEAP32[$67>>2] = $65;
 $68 = $2;
 $69 = ((($68)) + 2085|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = $71 & 255;
 $73 = $3;
 $74 = ((($73)) + 56|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = ((($75)) + 2090|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = $78 & 255;
 $80 = $3;
 $81 = ((($80)) + 60|0);
 HEAP32[$81>>2] = $79;
 $82 = $2;
 $83 = ((($82)) + 2091|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 << 24 >> 24;
 $86 = $85 & 255;
 $87 = $3;
 $88 = ((($87)) + 68|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 $90 = ((($89)) + 2092|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = $92 & 255;
 $94 = $3;
 $95 = ((($94)) + 72|0);
 HEAP32[$95>>2] = $93;
 $96 = $2;
 $97 = ((($96)) + 2093|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98 << 24 >> 24;
 $100 = $99 & 255;
 $101 = $100<<3;
 $102 = (($101|0) / 5)&-1;
 $103 = $3;
 $104 = ((($103)) + 84|0);
 HEAP32[$104>>2] = $102;
 $105 = $2;
 $106 = ((($105)) + 2100|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107 << 24 >> 24;
 $109 = $108 & 255;
 $110 = $109 << 8;
 $111 = $2;
 $112 = ((($111)) + 2101|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113 << 24 >> 24;
 $115 = $114 & 255;
 $116 = $110 | $115;
 $117 = $116<<3;
 $118 = $3;
 $119 = ((($118)) + 100|0);
 HEAP32[$119>>2] = $117;
 $120 = $2;
 $121 = ((($120)) + 2102|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122 << 24 >> 24;
 $124 = $123 & 255;
 $125 = $124 << 8;
 $126 = $2;
 $127 = ((($126)) + 2103|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = $128 << 24 >> 24;
 $130 = $129 & 255;
 $131 = $125 | $130;
 $132 = $3;
 $133 = ((($132)) + 104|0);
 HEAP32[$133>>2] = $131;
 $134 = $2;
 $135 = ((($134)) + 2104|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136 << 24 >> 24;
 $138 = $137 & 255;
 $139 = $138 << 8;
 $140 = $2;
 $141 = ((($140)) + 2105|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142 << 24 >> 24;
 $144 = $143 & 255;
 $145 = $139 | $144;
 $146 = $3;
 $147 = ((($146)) + 108|0);
 HEAP32[$147>>2] = $145;
 $148 = $3;
 $149 = ((($148)) + 120|0);
 HEAP32[$149>>2] = 9999;
 $4 = 0;
 while(1) {
  $150 = $4;
  $151 = ($150|0)<(8);
  if (!($151)) {
   break;
  }
  $152 = $4;
  $153 = (($152|0) % 4)&-1;
  $154 = ($153*9)|0;
  $155 = (2048 + ($154))|0;
  $7 = $155;
  $5 = 0;
  while(1) {
   $156 = $5;
   $157 = ($156|0)<(9);
   if (!($157)) {
    break;
   }
   $158 = $2;
   $159 = $7;
   $160 = (($158) + ($159)|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = $162 & 255;
   $164 = (3548 + ($163<<1)|0);
   $165 = HEAP16[$164>>1]|0;
   $166 = $3;
   $167 = ((($166)) + 140|0);
   $168 = $4;
   $169 = (($167) + (($168*18)|0)|0);
   $170 = $5;
   $171 = (($169) + ($170<<1)|0);
   HEAP16[$171>>1] = $165;
   $172 = $7;
   $173 = (($172) + 1)|0;
   $7 = $173;
   $174 = $5;
   $175 = (($174) + 1)|0;
   $5 = $175;
  }
  $176 = $4;
  $177 = (($176) + 1)|0;
  $4 = $177;
 }
 $7 = 0;
 $5 = 0;
 while(1) {
  $178 = $5;
  $179 = ($178|0)<(32);
  $4 = 0;
  if (!($179)) {
   break;
  }
  while(1) {
   $180 = $4;
   $181 = ($180|0)<(64);
   if (!($181)) {
    break;
   }
   $182 = $2;
   $183 = $7;
   $184 = (($182) + ($183)|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185 << 24 >> 24;
   $187 = $186 & 255;
   $188 = (3548 + ($187<<1)|0);
   $189 = HEAP16[$188>>1]|0;
   $190 = $3;
   $191 = ((($190)) + 300|0);
   $192 = $4;
   $193 = (($191) + (($192*200)|0)|0);
   $194 = $5;
   $195 = (($193) + ($194<<1)|0);
   HEAP16[$195>>1] = $189;
   $196 = $7;
   $197 = (($196) + 1)|0;
   $7 = $197;
   $198 = $4;
   $199 = (($198) + 1)|0;
   $4 = $199;
  }
  $200 = $5;
  $201 = (($200) + 1)|0;
  $5 = $201;
 }
 while(1) {
  $202 = $4;
  $203 = ($202|0)<(8);
  if (!($203)) {
   break;
  }
  $5 = 0;
  while(1) {
   $204 = $5;
   $205 = ($204|0)<(9);
   if (!($205)) {
    break;
   }
   $206 = $5;
   $207 = ($206|0)<(6);
   if ($207) {
    $208 = $3;
    $209 = ((($208)) + 140|0);
    $210 = $4;
    $211 = (($209) + (($210*18)|0)|0);
    $212 = $5;
    $213 = (($212) + 3)|0;
    $214 = (($211) + ($213<<1)|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = $215 << 16 >> 16;
    $217 = ($216|0)==(101);
    if ($217) {
     $218 = $3;
     $219 = ((($218)) + 140|0);
     $220 = $4;
     $221 = (($219) + (($220*18)|0)|0);
     $222 = $5;
     $223 = (($221) + ($222<<1)|0);
     HEAP16[$223>>1] = 106;
     $224 = $5;
     $225 = ($224|0)<(3);
     if ($225) {
      $226 = $3;
      $227 = ((($226)) + 140|0);
      $228 = $4;
      $229 = (($227) + (($228*18)|0)|0);
      $230 = $5;
      $231 = (($230) + 6)|0;
      $232 = (($229) + ($231<<1)|0);
      $233 = HEAP16[$232>>1]|0;
      $234 = $233 << 16 >> 16;
      $235 = ($234|0)==(101);
      if ($235) {
       $236 = $3;
       $237 = ((($236)) + 140|0);
       $238 = $4;
       $239 = (($237) + (($238*18)|0)|0);
       $240 = $5;
       $241 = (($239) + ($240<<1)|0);
       HEAP16[$241>>1] = 0;
      }
     }
    }
   }
   $242 = $5;
   $243 = (($242) + 1)|0;
   $5 = $243;
  }
  $244 = $4;
  $245 = (($244) + 1)|0;
  $4 = $245;
 }
 $4 = 0;
 while(1) {
  $246 = $4;
  $247 = ($246|0)<(64);
  if (!($247)) {
   break;
  }
  $5 = 0;
  while(1) {
   $248 = $5;
   $249 = ($248|0)<(32);
   if (!($249)) {
    break;
   }
   $250 = $5;
   $251 = ($250|0)<(31);
   if ($251) {
    $252 = $3;
    $253 = ((($252)) + 300|0);
    $254 = $4;
    $255 = (($253) + (($254*200)|0)|0);
    $256 = $5;
    $257 = (($256) + 1)|0;
    $258 = (($255) + ($257<<1)|0);
    $259 = HEAP16[$258>>1]|0;
    $260 = $259 << 16 >> 16;
    $261 = ($260|0)==(101);
    if ($261) {
     $262 = $3;
     $263 = ((($262)) + 300|0);
     $264 = $4;
     $265 = (($263) + (($264*200)|0)|0);
     $266 = $5;
     $267 = (($265) + ($266<<1)|0);
     HEAP16[$267>>1] = 106;
     $268 = $5;
     $269 = ($268|0)<(30);
     if ($269) {
      $270 = $3;
      $271 = ((($270)) + 300|0);
      $272 = $4;
      $273 = (($271) + (($272*200)|0)|0);
      $274 = $5;
      $275 = (($274) + 2)|0;
      $276 = (($273) + ($275<<1)|0);
      $277 = HEAP16[$276>>1]|0;
      $278 = $277 << 16 >> 16;
      $279 = ($278|0)==(101);
      if ($279) {
       $280 = $3;
       $281 = ((($280)) + 300|0);
       $282 = $4;
       $283 = (($281) + (($282*200)|0)|0);
       $284 = $5;
       $285 = (($283) + ($284<<1)|0);
       HEAP16[$285>>1] = 0;
      }
     }
    }
   }
   $286 = $5;
   $287 = (($286) + 1)|0;
   $5 = $287;
  }
  $288 = $4;
  $289 = (($288) + 1)|0;
  $4 = $289;
 }
 $7 = 2096;
 $6 = 0;
 while(1) {
  $290 = $6;
  $291 = ($290|0)<(2);
  if (!($291)) {
   break;
  }
  $292 = $2;
  $293 = $7;
  $294 = (($292) + ($293)|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = $295 << 24 >> 24;
  $297 = $296 & 255;
  $298 = $297 << 8;
  $299 = $2;
  $300 = $7;
  $301 = (($300) + 1)|0;
  $302 = (($299) + ($301)|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303 << 24 >> 24;
  $305 = $304 & 255;
  $306 = $298 | $305;
  $4 = $306;
  $307 = $4;
  $308 = $307 >> 0;
  $309 = $308 & 63;
  $4 = $309;
  $310 = $2;
  $311 = $7;
  $312 = (($310) + ($311)|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313 << 24 >> 24;
  $315 = $314 & 255;
  $316 = $315 << 8;
  $317 = $2;
  $318 = $7;
  $319 = (($318) + 1)|0;
  $320 = (($317) + ($319)|0);
  $321 = HEAP8[$320>>0]|0;
  $322 = $321 << 24 >> 24;
  $323 = $322 & 255;
  $324 = $316 | $323;
  $5 = $324;
  $325 = $5;
  $326 = $325 >> 6;
  $327 = $326 & 31;
  $5 = $327;
  $328 = $4;
  $329 = $3;
  $330 = ((($329)) + 20|0);
  $331 = $6;
  $332 = (($330) + ($331<<2)|0);
  HEAP32[$332>>2] = $328;
  $333 = $5;
  $334 = $3;
  $335 = ((($334)) + 28|0);
  $336 = $6;
  $337 = (($335) + ($336<<2)|0);
  HEAP32[$337>>2] = $333;
  $338 = $3;
  $339 = ((($338)) + 300|0);
  $340 = $4;
  $341 = (($339) + (($340*200)|0)|0);
  $342 = $5;
  $343 = (($341) + ($342<<1)|0);
  HEAP16[$343>>1] = 0;
  $344 = $7;
  $345 = (($344) + 2)|0;
  $7 = $345;
  $346 = $6;
  $347 = (($346) + 1)|0;
  $6 = $347;
 }
 $348 = $3;
 $349 = HEAP32[$348>>2]|0;
 $350 = ($349|0)==(0);
 if ($350) {
  $351 = $3;
  HEAP32[$351>>2] = 9999;
 }
 $352 = $3;
 $353 = ((($352)) + 108|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==(0);
 if ($355) {
  $356 = $3;
  $357 = ((($356)) + 108|0);
  HEAP32[$357>>2] = 9999;
 }
 $7 = 0;
 while(1) {
  $358 = $7;
  $359 = ($358|0)<(2048);
  if (!($359)) {
   break;
  }
  $360 = $2;
  $361 = $7;
  $362 = (($360) + ($361)|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = $363 << 24 >> 24;
  $365 = $364 & 255;
  $cond = ($365|0)==(36);
  if ($cond) {
   $366 = $3;
   $367 = ((($366)) + 136|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $368 & -17;
   $370 = $369 | 16;
   HEAP32[$367>>2] = $370;
   $371 = $3;
   $372 = ((($371)) + 104|0);
   HEAP32[$372>>2] = 9999;
  }
  $373 = $7;
  $374 = (($373) + 1)|0;
  $7 = $374;
 }
 STACKTOP = sp;return;
}
function _version_four($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 64;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 32;
 $12 = $3;
 $13 = ((($12)) + 136|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -3;
 $16 = $15 | 2;
 HEAP32[$13>>2] = $16;
 $17 = $2;
 $18 = ((($17)) + 2094|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 255;
 $22 = ($21*500)|0;
 $23 = (($22) + 7)|0;
 $24 = (($23|0) / 8)&-1;
 $25 = $3;
 HEAP32[$25>>2] = $24;
 $26 = $2;
 $27 = ((($26)) + 2095|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 $30 = $29 & 255;
 $31 = $3;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 $34 = ((($33)) + 2089|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = $36 & 255;
 $38 = $3;
 $39 = ((($38)) + 36|0);
 HEAP32[$39>>2] = $37;
 $40 = $2;
 $41 = ((($40)) + 2086|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 << 24 >> 24;
 $44 = $43 & 255;
 $45 = $3;
 $46 = ((($45)) + 40|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = ((($47)) + 2088|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49 << 24 >> 24;
 $51 = $50 & 255;
 $52 = $3;
 $53 = ((($52)) + 44|0);
 HEAP32[$53>>2] = $51;
 $54 = $2;
 $55 = ((($54)) + 2087|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = $57 & 255;
 $59 = $3;
 $60 = ((($59)) + 48|0);
 HEAP32[$60>>2] = $58;
 $61 = $2;
 $62 = ((($61)) + 2084|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = $64 & 255;
 $66 = $3;
 $67 = ((($66)) + 52|0);
 HEAP32[$67>>2] = $65;
 $68 = $2;
 $69 = ((($68)) + 2085|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = $71 & 255;
 $73 = $3;
 $74 = ((($73)) + 56|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = ((($75)) + 2090|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = $78 & 255;
 $80 = $3;
 $81 = ((($80)) + 60|0);
 HEAP32[$81>>2] = $79;
 $82 = $2;
 $83 = ((($82)) + 2091|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 << 24 >> 24;
 $86 = $85 & 255;
 $87 = $3;
 $88 = ((($87)) + 68|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 $90 = ((($89)) + 2092|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = $92 & 255;
 $94 = $3;
 $95 = ((($94)) + 72|0);
 HEAP32[$95>>2] = $93;
 $96 = $2;
 $97 = ((($96)) + 2093|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98 << 24 >> 24;
 $100 = $99 & 255;
 $101 = $100<<3;
 $102 = (($101|0) / 5)&-1;
 $103 = $3;
 $104 = ((($103)) + 84|0);
 HEAP32[$104>>2] = $102;
 $105 = $2;
 $106 = ((($105)) + 2100|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107 << 24 >> 24;
 $109 = $108 & 255;
 $110 = $109 << 8;
 $111 = $2;
 $112 = ((($111)) + 2101|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113 << 24 >> 24;
 $115 = $114 & 255;
 $116 = $110 | $115;
 $117 = $116<<3;
 $118 = $3;
 $119 = ((($118)) + 100|0);
 HEAP32[$119>>2] = $117;
 $120 = $2;
 $121 = ((($120)) + 2102|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122 << 24 >> 24;
 $124 = $123 & 255;
 $125 = $124 << 8;
 $126 = $2;
 $127 = ((($126)) + 2103|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = $128 << 24 >> 24;
 $130 = $129 & 255;
 $131 = $125 | $130;
 $132 = $3;
 $133 = ((($132)) + 104|0);
 HEAP32[$133>>2] = $131;
 $134 = $2;
 $135 = ((($134)) + 2104|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136 << 24 >> 24;
 $138 = $137 & 255;
 $139 = $138 << 8;
 $140 = $2;
 $141 = ((($140)) + 2105|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142 << 24 >> 24;
 $144 = $143 & 255;
 $145 = $139 | $144;
 $146 = $3;
 $147 = ((($146)) + 108|0);
 HEAP32[$147>>2] = $145;
 $4 = 0;
 while(1) {
  $148 = $4;
  $149 = ($148|0)<(8);
  if (!($149)) {
   break;
  }
  $150 = $4;
  $151 = (($150|0) % 4)&-1;
  $152 = ($151*9)|0;
  $153 = (2048 + ($152))|0;
  $7 = $153;
  $5 = 0;
  while(1) {
   $154 = $5;
   $155 = ($154|0)<(9);
   if (!($155)) {
    break;
   }
   $156 = $2;
   $157 = $7;
   $158 = (($156) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = $160 & 255;
   $162 = $161 & 31;
   $163 = (2972 + ($162<<1)|0);
   $164 = HEAP16[$163>>1]|0;
   $165 = $3;
   $166 = ((($165)) + 140|0);
   $167 = $4;
   $168 = (($166) + (($167*18)|0)|0);
   $169 = $5;
   $170 = (($168) + ($169<<1)|0);
   HEAP16[$170>>1] = $164;
   $171 = $7;
   $172 = (($171) + 1)|0;
   $7 = $172;
   $173 = $5;
   $174 = (($173) + 1)|0;
   $5 = $174;
  }
  $175 = $4;
  $176 = (($175) + 1)|0;
  $4 = $176;
 }
 $7 = 0;
 $5 = 0;
 while(1) {
  $177 = $5;
  $178 = ($177|0)<(32);
  $4 = 0;
  if (!($178)) {
   break;
  }
  while(1) {
   $179 = $4;
   $180 = ($179|0)<(64);
   if (!($180)) {
    break;
   }
   $181 = $2;
   $182 = $7;
   $183 = (($181) + ($182)|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184 << 24 >> 24;
   $186 = $185 & 255;
   $187 = (3036 + ($186<<1)|0);
   $188 = HEAP16[$187>>1]|0;
   $189 = $3;
   $190 = ((($189)) + 300|0);
   $191 = $4;
   $192 = (($190) + (($191*200)|0)|0);
   $193 = $5;
   $194 = (($192) + ($193<<1)|0);
   HEAP16[$194>>1] = $188;
   $195 = $7;
   $196 = (($195) + 1)|0;
   $7 = $196;
   $197 = $4;
   $198 = (($197) + 1)|0;
   $4 = $198;
  }
  $199 = $5;
  $200 = (($199) + 1)|0;
  $5 = $200;
 }
 while(1) {
  $201 = $4;
  $202 = ($201|0)<(64);
  if (!($202)) {
   break;
  }
  $5 = 0;
  while(1) {
   $203 = $5;
   $204 = ($203|0)<(32);
   if (!($204)) {
    break;
   }
   $205 = $5;
   $206 = ($205|0)<(31);
   if ($206) {
    $207 = $3;
    $208 = ((($207)) + 300|0);
    $209 = $4;
    $210 = (($208) + (($209*200)|0)|0);
    $211 = $5;
    $212 = (($211) + 1)|0;
    $213 = (($210) + ($212<<1)|0);
    $214 = HEAP16[$213>>1]|0;
    $215 = $214 << 16 >> 16;
    $216 = ($215|0)==(101);
    if ($216) {
     $217 = $3;
     $218 = ((($217)) + 300|0);
     $219 = $4;
     $220 = (($218) + (($219*200)|0)|0);
     $221 = $5;
     $222 = (($220) + ($221<<1)|0);
     HEAP16[$222>>1] = 106;
     $223 = $5;
     $224 = ($223|0)<(30);
     if ($224) {
      $225 = $3;
      $226 = ((($225)) + 300|0);
      $227 = $4;
      $228 = (($226) + (($227*200)|0)|0);
      $229 = $5;
      $230 = (($229) + 2)|0;
      $231 = (($228) + ($230<<1)|0);
      $232 = HEAP16[$231>>1]|0;
      $233 = $232 << 16 >> 16;
      $234 = ($233|0)==(101);
      if ($234) {
       $235 = $3;
       $236 = ((($235)) + 300|0);
       $237 = $4;
       $238 = (($236) + (($237*200)|0)|0);
       $239 = $5;
       $240 = (($238) + ($239<<1)|0);
       HEAP16[$240>>1] = 0;
      }
     }
    }
   }
   $241 = $5;
   $242 = (($241) + 1)|0;
   $5 = $242;
  }
  $243 = $4;
  $244 = (($243) + 1)|0;
  $4 = $244;
 }
 $7 = 2096;
 $6 = 0;
 while(1) {
  $245 = $6;
  $246 = ($245|0)<(2);
  if (!($246)) {
   break;
  }
  $247 = $2;
  $248 = $7;
  $249 = (($247) + ($248)|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $250 << 24 >> 24;
  $252 = $251 & 255;
  $253 = $252 << 8;
  $254 = $2;
  $255 = $7;
  $256 = (($255) + 1)|0;
  $257 = (($254) + ($256)|0);
  $258 = HEAP8[$257>>0]|0;
  $259 = $258 << 24 >> 24;
  $260 = $259 & 255;
  $261 = $253 | $260;
  $4 = $261;
  $262 = $4;
  $263 = $262 >> 0;
  $264 = $263 & 63;
  $4 = $264;
  $265 = $2;
  $266 = $7;
  $267 = (($265) + ($266)|0);
  $268 = HEAP8[$267>>0]|0;
  $269 = $268 << 24 >> 24;
  $270 = $269 & 255;
  $271 = $270 << 8;
  $272 = $2;
  $273 = $7;
  $274 = (($273) + 1)|0;
  $275 = (($272) + ($274)|0);
  $276 = HEAP8[$275>>0]|0;
  $277 = $276 << 24 >> 24;
  $278 = $277 & 255;
  $279 = $271 | $278;
  $5 = $279;
  $280 = $5;
  $281 = $280 >> 6;
  $282 = $281 & 31;
  $5 = $282;
  $283 = $4;
  $284 = $3;
  $285 = ((($284)) + 20|0);
  $286 = $6;
  $287 = (($285) + ($286<<2)|0);
  HEAP32[$287>>2] = $283;
  $288 = $5;
  $289 = $3;
  $290 = ((($289)) + 28|0);
  $291 = $6;
  $292 = (($290) + ($291<<2)|0);
  HEAP32[$292>>2] = $288;
  $293 = $3;
  $294 = ((($293)) + 300|0);
  $295 = $4;
  $296 = (($294) + (($295*200)|0)|0);
  $297 = $5;
  $298 = (($296) + ($297<<1)|0);
  HEAP16[$298>>1] = 0;
  $299 = $7;
  $300 = (($299) + 2)|0;
  $7 = $300;
  $301 = $6;
  $302 = (($301) + 1)|0;
  $6 = $302;
 }
 $303 = $3;
 $304 = HEAP32[$303>>2]|0;
 $305 = ($304|0)==(0);
 if ($305) {
  $306 = $3;
  HEAP32[$306>>2] = 9999;
 }
 $307 = $3;
 $308 = ((($307)) + 108|0);
 $309 = HEAP32[$308>>2]|0;
 $310 = ($309|0)==(0);
 if ($310) {
  $311 = $3;
  $312 = ((($311)) + 108|0);
  HEAP32[$312>>2] = 9999;
 }
 $7 = 0;
 while(1) {
  $313 = $7;
  $314 = ($313|0)<(2048);
  if (!($314)) {
   break;
  }
  $315 = $2;
  $316 = $7;
  $317 = (($315) + ($316)|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $318 << 24 >> 24;
  $320 = $319 & 255;
  $cond = ($320|0)==(36);
  if ($cond) {
   $321 = $3;
   $322 = ((($321)) + 136|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & -17;
   $325 = $324 | 16;
   HEAP32[$322>>2] = $325;
   $326 = $3;
   $327 = ((($326)) + 104|0);
   HEAP32[$327>>2] = 9999;
  }
  $328 = $7;
  $329 = (($328) + 1)|0;
  $7 = $329;
 }
 STACKTOP = sp;return;
}
function _end_game() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4230]|0;
 $1 = (16924 + (($0*20)|0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[(17136)>>2]|0;
 $6 = HEAP32[4230]|0;
 $7 = (16924 + (($6*20)|0)|0);
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($5))|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[(17140)>>2]|0;
 $12 = ($11|0)>(0);
 $13 = HEAP32[(17144)>>2]|0;
 $14 = ($13|0)>(0);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = HEAP32[4230]|0;
  $16 = (16924 + (($15*20)|0)|0);
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
 }
 HEAP32[21796] = 11;
 ;HEAP8[156130>>0]=0|0;HEAP8[156130+1>>0]=0|0;HEAP8[156130+2>>0]=0|0;HEAP8[156130+3>>0]=0|0;HEAP8[156130+4>>0]=0|0;HEAP8[156130+5>>0]=0|0;
 _emscripten_cancel_main_loop();
 _emscripten_set_main_loop((128|0),0,0);
 return;
}
function _menu_main_js() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0;
 var $vararg_buffer14 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = HEAP32[425]|0;
 $13 = (($12) + 1)|0;
 HEAP32[425] = $13;
 _x11_menu_clear();
 dest=156136; stop=dest+15|0; do { HEAP8[dest>>0]=1|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $14 = HEAP32[21797]|0;
 $15 = ($14|0)>(3);
 if ($15) {
  HEAP32[21797] = 3;
 }
 $16 = HEAP32[21797]|0;
 $17 = ($16|0)<(0);
 if ($17) {
  HEAP32[21797] = 0;
 }
 $18 = HEAP32[21798]|0;
 $19 = ($18|0)>(1);
 if ($19) {
  HEAP32[21798] = 1;
 }
 $20 = HEAP32[21798]|0;
 $21 = ($20|0)<(0);
 if ($21) {
  HEAP32[21798] = 0;
 }
 $22 = HEAP32[4230]|0;
 $23 = ($22|0)>(9);
 if ($23) {
  HEAP32[4230] = 9;
 }
 $24 = HEAP32[4230]|0;
 $25 = ($24|0)<(0);
 if ($25) {
  HEAP32[4230] = 0;
 }
 $26 = HEAP32[21797]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  HEAP32[21796] = 7;
 }
 $28 = HEAP32[4230]|0;
 $29 = (16924 + (($28*20)|0)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[(107624)>>2]|0;
 $32 = ($30|0)>=($31|0);
 if ($32) {
  $33 = HEAP32[(107624)>>2]|0;
  $34 = (($33) - 1)|0;
  $35 = HEAP32[4230]|0;
  $36 = (16924 + (($35*20)|0)|0);
  HEAP32[$36>>2] = $34;
 }
 $37 = HEAP32[4230]|0;
 $38 = (16924 + (($37*20)|0)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)<(0);
 if ($40) {
  $41 = HEAP32[4230]|0;
  $42 = (16924 + (($41*20)|0)|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = HEAP32[4230]|0;
 $44 = (16924 + (($43*20)|0)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>(99);
 if ($47) {
  $48 = HEAP32[4230]|0;
  $49 = (16924 + (($48*20)|0)|0);
  $50 = ((($49)) + 4|0);
  HEAP32[$50>>2] = 99;
 }
 $51 = HEAP32[4230]|0;
 $52 = (16924 + (($51*20)|0)|0);
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)<(0);
 if ($55) {
  $56 = HEAP32[4230]|0;
  $57 = (16924 + (($56*20)|0)|0);
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = HEAP32[4230]|0;
 $60 = (16924 + (($59*20)|0)|0);
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)>(9999);
 if ($63) {
  $64 = HEAP32[4230]|0;
  $65 = (16924 + (($64*20)|0)|0);
  $66 = ((($65)) + 8|0);
  HEAP32[$66>>2] = 9999;
 }
 $67 = HEAP32[4230]|0;
 $68 = (16924 + (($67*20)|0)|0);
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)<(0);
 if ($71) {
  $72 = HEAP32[4230]|0;
  $73 = (16924 + (($72*20)|0)|0);
  $74 = ((($73)) + 8|0);
  HEAP32[$74>>2] = 0;
 }
 $75 = HEAP32[4230]|0;
 $76 = (16924 + (($75*20)|0)|0);
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)>(99999999);
 if ($79) {
  $80 = HEAP32[4230]|0;
  $81 = (16924 + (($80*20)|0)|0);
  $82 = ((($81)) + 12|0);
  HEAP32[$82>>2] = 99999999;
 }
 $83 = HEAP32[4230]|0;
 $84 = (16924 + (($83*20)|0)|0);
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)<(0);
 if ($87) {
  $88 = HEAP32[4230]|0;
  $89 = (16924 + (($88*20)|0)|0);
  $90 = ((($89)) + 12|0);
  HEAP32[$90>>2] = 0;
 }
 $91 = HEAP32[4230]|0;
 $92 = (16924 + (($91*20)|0)|0);
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)>(9999);
 if ($95) {
  $96 = HEAP32[4230]|0;
  $97 = (16924 + (($96*20)|0)|0);
  $98 = ((($97)) + 16|0);
  HEAP32[$98>>2] = 9999;
 }
 $99 = HEAP32[4230]|0;
 $100 = (16924 + (($99*20)|0)|0);
 $101 = ((($100)) + 16|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)<(0);
 if ($103) {
  $104 = HEAP32[4230]|0;
  $105 = (16924 + (($104*20)|0)|0);
  $106 = ((($105)) + 16|0);
  HEAP32[$106>>2] = 0;
 }
 $107 = HEAP32[21796]|0;
 $108 = ($107|0)>(11);
 if ($108) {
  HEAP32[21796] = 11;
 }
 $109 = HEAP32[21796]|0;
 $110 = ($109|0)<(7);
 if ($110) {
  HEAP32[21796] = 7;
 }
 _game_input();
 _menu_main_refresh();
 $111 = HEAP32[21796]|0;
 _x11_menu_ants(4,316,$111);
 _x11_menu_to_screen();
 $112 = HEAP8[156151]|0;
 $113 = ($112<<24>>24)!=(0);
 if ($113) {
  $118 = 0;
 } else {
  $114 = HEAP8[156130]|0;
  $115 = $114 << 24 >> 24;
  $116 = ($115|0)!=(0);
  $118 = $116;
 }
 $117 = $118&1;
 $0 = $117;
 $119 = HEAP8[(156152)>>0]|0;
 $120 = ($119<<24>>24)!=(0);
 if ($120) {
  $125 = 0;
 } else {
  $121 = HEAP8[(156131)>>0]|0;
  $122 = $121 << 24 >> 24;
  $123 = ($122|0)!=(0);
  $125 = $123;
 }
 $124 = $125&1;
 $1 = $124;
 $126 = HEAP8[(156153)>>0]|0;
 $127 = ($126<<24>>24)!=(0);
 if ($127) {
  $132 = 0;
 } else {
  $128 = HEAP8[(156132)>>0]|0;
  $129 = $128 << 24 >> 24;
  $130 = ($129|0)!=(0);
  $132 = $130;
 }
 $131 = $132&1;
 $2 = $131;
 $133 = HEAP8[(156154)>>0]|0;
 $134 = ($133<<24>>24)!=(0);
 if ($134) {
  $139 = 0;
 } else {
  $135 = HEAP8[(156133)>>0]|0;
  $136 = $135 << 24 >> 24;
  $137 = ($136|0)!=(0);
  $139 = $137;
 }
 $138 = $139&1;
 $3 = $138;
 $140 = HEAP8[(156155)>>0]|0;
 $141 = ($140<<24>>24)!=(0);
 if ($141) {
  $146 = 0;
 } else {
  $142 = HEAP8[(156134)>>0]|0;
  $143 = $142 << 24 >> 24;
  $144 = ($143|0)!=(0);
  $146 = $144;
 }
 $145 = $146&1;
 $4 = $145;
 $147 = HEAP8[(156156)>>0]|0;
 $148 = ($147<<24>>24)!=(0);
 if ($148) {
  $153 = 0;
 } else {
  $149 = HEAP8[(156135)>>0]|0;
  $150 = $149 << 24 >> 24;
  $151 = ($150|0)!=(0);
  $153 = $151;
 }
 $152 = $153&1;
 $5 = $152;
 $154 = HEAP32[21799]|0;
 $155 = ($154|0)==(-1);
 $156 = HEAP32[5]|0;
 $157 = ($156|0)!=(-1);
 $158 = $155 ? $157 : 0;
 $159 = $158&1;
 $6 = $159;
 $160 = $0;
 $161 = ($160|0)!=(0);
 $162 = $1;
 $163 = ($162|0)!=(0);
 $or$cond = $161 | $163;
 $164 = $2;
 $165 = ($164|0)!=(0);
 $or$cond3 = $or$cond | $165;
 $166 = $3;
 $167 = ($166|0)!=(0);
 $or$cond5 = $or$cond3 | $167;
 $168 = $4;
 $169 = ($168|0)!=(0);
 $or$cond7 = $or$cond5 | $169;
 $170 = $5;
 $171 = ($170|0)!=(0);
 $or$cond9 = $or$cond7 | $171;
 $172 = $6;
 $173 = ($172|0)!=(0);
 $or$cond11 = $or$cond9 | $173;
 if (!($or$cond11)) {
  STACKTOP = sp;return;
 }
 $174 = HEAP32[21796]|0;
 $175 = (156136 + ($174)|0);
 HEAP8[$175>>0] = 1;
 $176 = $4;
 $177 = ($176|0)!=(0);
 if ($177) {
  $178 = HEAP32[583]|0;
  $179 = HEAP32[21796]|0;
  HEAP32[$vararg_buffer>>2] = $179;
  (_fprintf($178,12228,$vararg_buffer)|0);
  $180 = HEAP32[583]|0;
  $181 = HEAP32[21797]|0;
  HEAP32[$vararg_buffer14>>2] = $181;
  (_fprintf($180,12240,$vararg_buffer14)|0);
  $182 = HEAP32[21797]|0;
  $183 = ($182|0)==(0);
  if ($183) {
   _emscripten_cancel_main_loop();
   _init_game();
   STACKTOP = sp;return;
  }
  $184 = HEAP32[21797]|0;
  $185 = ($184|0)==(3);
  if (!($185)) {
   STACKTOP = sp;return;
  }
  _x11_quit();
  STACKTOP = sp;return;
 }
 $186 = HEAP32[5]|0;
 $187 = (_isalpha($186)|0);
 $188 = ($187|0)!=(0);
 if ($188) {
  $7 = 1;
  $8 = 1;
  $9 = 0;
  while(1) {
   $189 = $9;
   $190 = HEAP32[(107624)>>2]|0;
   $191 = ($189|0)<($190|0);
   if (!($191)) {
    break;
   }
   $192 = HEAP32[26905]|0;
   $193 = HEAP32[4230]|0;
   $194 = (16924 + (($193*20)|0)|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($192) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $11 = $197;
   $198 = $11;
   $199 = (_strlen($198)|0);
   $10 = $199;
   while(1) {
    $200 = $10;
    $201 = ($200|0)>(0);
    if (!($201)) {
     break;
    }
    $202 = $11;
    $203 = $10;
    $204 = (($203) - 1)|0;
    $205 = (($202) + ($204)|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206 << 24 >> 24;
    $208 = ($207|0)==(47);
    if ($208) {
     break;
    }
    $209 = $10;
    $210 = (($209) + -1)|0;
    $10 = $210;
   }
   $211 = $7;
   $8 = $211;
   $212 = $11;
   $213 = $10;
   $214 = (($212) + ($213)|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = $215 << 24 >> 24;
   $217 = (_toupper($216)|0);
   $218 = (_tolower($217)|0);
   $219 = HEAP32[5]|0;
   $220 = (_toupper($219)|0);
   $221 = (_tolower($220)|0);
   $222 = ($218|0)==($221|0);
   $223 = $222&1;
   $7 = $223;
   $224 = $7;
   $225 = ($224|0)==(0);
   $226 = $8;
   $227 = ($226|0)!=(0);
   $or$cond13 = $225 | $227;
   if (!($or$cond13)) {
    break;
   }
   $228 = HEAP32[4230]|0;
   $229 = (16924 + (($228*20)|0)|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + 1)|0;
   $232 = HEAP32[(107624)>>2]|0;
   $233 = (($231|0) % ($232|0))&-1;
   $234 = HEAP32[4230]|0;
   $235 = (16924 + (($234*20)|0)|0);
   HEAP32[$235>>2] = $233;
   $236 = $9;
   $237 = (($236) + 1)|0;
   $9 = $237;
  }
  HEAP8[(156146)>>0] = 1;
 }
 $238 = HEAP32[5]|0;
 $239 = (_isdigit($238)|0);
 $240 = ($239|0)!=(0);
 if ($240) {
  $241 = HEAP32[4230]|0;
  $242 = (16924 + (($241*20)|0)|0);
  $243 = ((($242)) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($244*10)|0;
  $246 = HEAP32[5]|0;
  $247 = (($246) - 48)|0;
  $248 = (($245) + ($247))|0;
  $249 = (($248|0) % 100)&-1;
  $250 = HEAP32[4230]|0;
  $251 = (16924 + (($250*20)|0)|0);
  $252 = ((($251)) + 4|0);
  HEAP32[$252>>2] = $249;
  HEAP8[(156147)>>0] = 1;
 }
 $253 = HEAP32[21796]|0;
 L106: do {
  switch ($253|0) {
  case 7:  {
   $254 = $1;
   $255 = ($254|0)!=(0);
   if ($255) {
    $256 = HEAP32[21797]|0;
    $257 = (($256) + 1)|0;
    HEAP32[21797] = $257;
   }
   $258 = $3;
   $259 = ($258|0)!=(0);
   if (!($259)) {
    break L106;
   }
   $260 = HEAP32[21797]|0;
   $261 = (($260) + -1)|0;
   HEAP32[21797] = $261;
   break;
  }
  case 8:  {
   $262 = $1;
   $263 = ($262|0)!=(0);
   if ($263) {
    $264 = HEAP32[21798]|0;
    $265 = (($264) + 1)|0;
    HEAP32[21798] = $265;
   }
   $266 = $3;
   $267 = ($266|0)!=(0);
   if (!($267)) {
    break L106;
   }
   $268 = HEAP32[21798]|0;
   $269 = (($268) + -1)|0;
   HEAP32[21798] = $269;
   break;
  }
  case 9:  {
   $270 = $1;
   $271 = ($270|0)!=(0);
   if ($271) {
    $272 = HEAP32[4230]|0;
    $273 = (($272) + 1)|0;
    HEAP32[4230] = $273;
    HEAP8[(156146)>>0] = 1;
    HEAP8[(156147)>>0] = 1;
    HEAP8[(156150)>>0] = 1;
   }
   $274 = $3;
   $275 = ($274|0)!=(0);
   if (!($275)) {
    break L106;
   }
   $276 = HEAP32[4230]|0;
   $277 = (($276) + -1)|0;
   HEAP32[4230] = $277;
   HEAP8[(156146)>>0] = 1;
   HEAP8[(156147)>>0] = 1;
   HEAP8[(156150)>>0] = 1;
   break;
  }
  case 10:  {
   $278 = $1;
   $279 = ($278|0)!=(0);
   if ($279) {
    $280 = HEAP32[4230]|0;
    $281 = (16924 + (($280*20)|0)|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + 1)|0;
    HEAP32[$281>>2] = $283;
   }
   $284 = $3;
   $285 = ($284|0)!=(0);
   if (!($285)) {
    break L106;
   }
   $286 = HEAP32[4230]|0;
   $287 = (16924 + (($286*20)|0)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) + -1)|0;
   HEAP32[$287>>2] = $289;
   break;
  }
  case 11:  {
   $290 = $1;
   $291 = ($290|0)!=(0);
   if ($291) {
    $292 = HEAP32[4230]|0;
    $293 = (16924 + (($292*20)|0)|0);
    $294 = ((($293)) + 4|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + 1)|0;
    HEAP32[$294>>2] = $296;
   }
   $297 = $3;
   $298 = ($297|0)!=(0);
   if (!($298)) {
    break L106;
   }
   $299 = HEAP32[4230]|0;
   $300 = (16924 + (($299*20)|0)|0);
   $301 = ((($300)) + 4|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (($302) + -1)|0;
   HEAP32[$301>>2] = $303;
   break;
  }
  default: {
  }
  }
 } while(0);
 $304 = $0;
 $305 = ($304|0)!=(0);
 if ($305) {
  $306 = HEAP32[21796]|0;
  $307 = (($306) + -1)|0;
  HEAP32[21796] = $307;
 }
 $308 = $2;
 $309 = ($308|0)!=(0);
 if (!($309)) {
  STACKTOP = sp;return;
 }
 $310 = HEAP32[21796]|0;
 $311 = (($310) + 1)|0;
 HEAP32[21796] = $311;
 STACKTOP = sp;return;
}
function _game_input() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[4]|0;
 HEAP32[26878] = $1;
 $2 = HEAP32[5]|0;
 HEAP32[21799] = $2;
 dest=156169; src=156118; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[156151>>0]=HEAP8[156130>>0]|0;HEAP8[156151+1>>0]=HEAP8[156130+1>>0]|0;HEAP8[156151+2>>0]=HEAP8[156130+2>>0]|0;HEAP8[156151+3>>0]=HEAP8[156130+3>>0]|0;HEAP8[156151+4>>0]=HEAP8[156130+4>>0]|0;HEAP8[156151+5>>0]=HEAP8[156130+5>>0]|0;
 _keyboard_read();
 $0 = 0;
 while(1) {
  $3 = $0;
  $4 = ($3|0)<(2);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = (156169 + (($5*6)|0)|0);
  $7 = $0;
  $8 = (156118 + (($7*6)|0)|0);
  $9 = (_memcmp($6,$8,6)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $0;
   $12 = (156157 + (($11*6)|0)|0);
   $13 = $0;
   $14 = (156118 + (($13*6)|0)|0);
   ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;HEAP8[$12+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$14+3>>0]|0;HEAP8[$12+4>>0]=HEAP8[$14+4>>0]|0;HEAP8[$12+5>>0]=HEAP8[$14+5>>0]|0;
   $15 = $0;
   $16 = (156118 + (($15*6)|0)|0);
   ;HEAP8[156130>>0]=HEAP8[$16>>0]|0;HEAP8[156130+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[156130+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[156130+3>>0]=HEAP8[$16+3>>0]|0;HEAP8[156130+4>>0]=HEAP8[$16+4>>0]|0;HEAP8[156130+5>>0]=HEAP8[$16+5>>0]|0;
  }
  $17 = $0;
  $18 = ((17332) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   label = 10;
  } else {
   $21 = $0;
   $22 = (156157 + (($21*6)|0)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 10;
   } else {
    $26 = $0;
    $27 = (156157 + (($26*6)|0)|0);
    $28 = ((($27)) + 1|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)!=(0);
    if ($31) {
     label = 10;
    } else {
     $32 = $0;
     $33 = (156157 + (($32*6)|0)|0);
     $34 = ((($33)) + 2|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = ($36|0)!=(0);
     if ($37) {
      label = 10;
     } else {
      $38 = $0;
      $39 = (156157 + (($38*6)|0)|0);
      $40 = ((($39)) + 3|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      $43 = ($42|0)!=(0);
      if ($43) {
       label = 10;
      }
     }
    }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $44 = $0;
   $45 = (156157 + (($44*6)|0)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $0;
   $48 = ((17199) + (($47*6)|0)|0);
   HEAP8[$48>>0] = $46;
   $49 = $0;
   $50 = (156157 + (($49*6)|0)|0);
   $51 = ((($50)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $0;
   $54 = ((17199) + (($53*6)|0)|0);
   $55 = ((($54)) + 1|0);
   HEAP8[$55>>0] = $52;
   $56 = $0;
   $57 = (156157 + (($56*6)|0)|0);
   $58 = ((($57)) + 2|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $0;
   $61 = ((17199) + (($60*6)|0)|0);
   $62 = ((($61)) + 2|0);
   HEAP8[$62>>0] = $59;
   $63 = $0;
   $64 = (156157 + (($63*6)|0)|0);
   $65 = ((($64)) + 3|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $0;
   $68 = ((17199) + (($67*6)|0)|0);
   $69 = ((($68)) + 3|0);
   HEAP8[$69>>0] = $66;
  }
  $70 = $0;
  $71 = (156157 + (($70*6)|0)|0);
  $72 = ((($71)) + 4|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $0;
  $75 = ((17199) + (($74*6)|0)|0);
  $76 = ((($75)) + 4|0);
  HEAP8[$76>>0] = $73;
  $77 = $0;
  $78 = (156157 + (($77*6)|0)|0);
  $79 = ((($78)) + 5|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $0;
  $82 = ((17199) + (($81*6)|0)|0);
  $83 = ((($82)) + 5|0);
  HEAP8[$83>>0] = $80;
  $84 = $0;
  $85 = (($84) + 1)|0;
  $0 = $85;
 }
 STACKTOP = sp;return;
}
function _menu_main_refresh() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer36 = sp + 144|0;
 $vararg_buffer34 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 176|0;
 $4 = HEAP8[156136]|0;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  (_sprintf($0,12340,$vararg_buffer)|0);
  _x11_menu_print($0,0);
 }
 $6 = HEAP8[(156137)>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if ($7) {
  (_sprintf($0,12367,$vararg_buffer1)|0);
  _x11_menu_print($0,1);
 }
 $8 = HEAP8[(156138)>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  (_sprintf($0,12394,$vararg_buffer3)|0);
  _x11_menu_print($0,2);
 }
 $10 = HEAP8[(156139)>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 if ($11) {
  (_sprintf($0,12421,$vararg_buffer5)|0);
  _x11_menu_print($0,3);
 }
 $12 = HEAP8[(156140)>>0]|0;
 $13 = ($12<<24>>24)!=(0);
 if ($13) {
  (_sprintf($0,12448,$vararg_buffer7)|0);
  _x11_menu_print($0,4);
 }
 $14 = HEAP8[(156141)>>0]|0;
 $15 = ($14<<24>>24)!=(0);
 if ($15) {
  (_sprintf($0,12367,$vararg_buffer9)|0);
  _x11_menu_print($0,5);
 }
 $16 = HEAP8[(156142)>>0]|0;
 $17 = ($16<<24>>24)!=(0);
 if ($17) {
  (_sprintf($0,12367,$vararg_buffer11)|0);
  _x11_menu_print($0,6);
 }
 $18 = HEAP8[(156143)>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if ($19) {
  $20 = HEAP32[21797]|0;
  switch ($20|0) {
  case 0:  {
   (_sprintf($0,12475,$vararg_buffer13)|0);
   break;
  }
  case 1:  {
   (_sprintf($0,12502,$vararg_buffer15)|0);
   break;
  }
  case 2:  {
   (_sprintf($0,12529,$vararg_buffer17)|0);
   break;
  }
  case 3:  {
   (_sprintf($0,12556,$vararg_buffer19)|0);
   break;
  }
  default: {
  }
  }
  _x11_menu_print($0,7);
 }
 $21 = HEAP8[(156144)>>0]|0;
 $22 = ($21<<24>>24)!=(0);
 if ($22) {
  $23 = HEAP32[21798]|0;
  switch ($23|0) {
  case 0:  {
   (_sprintf($0,12583,$vararg_buffer21)|0);
   break;
  }
  case 1:  {
   (_sprintf($0,12610,$vararg_buffer23)|0);
   break;
  }
  default: {
  }
  }
  _x11_menu_print($0,8);
 }
 $24 = HEAP8[(156145)>>0]|0;
 $25 = ($24<<24>>24)!=(0);
 if ($25) {
  $26 = HEAP32[4230]|0;
  HEAP32[$vararg_buffer25>>2] = $26;
  (_sprintf($0,12637,$vararg_buffer25)|0);
  _x11_menu_print($0,9);
 }
 $27 = HEAP8[(156146)>>0]|0;
 $28 = ($27<<24>>24)!=(0);
 if ($28) {
  $29 = HEAP32[4230]|0;
  $30 = (16924 + (($29*20)|0)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)>=(0);
  if ($32) {
   $33 = HEAP32[4230]|0;
   $34 = (16924 + (($33*20)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[(107624)>>2]|0;
   $37 = ($35|0)<($36|0);
   if ($37) {
    $38 = HEAP32[26905]|0;
    $39 = HEAP32[4230]|0;
    $40 = (16924 + (($39*20)|0)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $1 = $43;
    $44 = $1;
    $45 = (_strlen($44)|0);
    $2 = $45;
    $3 = 0;
    while(1) {
     $46 = $2;
     $47 = ($46|0)>(0);
     $48 = $3;
     $49 = ($48|0)<(26);
     $50 = $47 ? $49 : 0;
     if (!($50)) {
      break;
     }
     $51 = $1;
     $52 = $2;
     $53 = (($52) - 1)|0;
     $54 = (($51) + ($53)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55 << 24 >> 24;
     $57 = ($56|0)==(47);
     if ($57) {
      break;
     }
     $58 = $2;
     $59 = (($58) + -1)|0;
     $2 = $59;
     $60 = $3;
     $61 = (($60) + 1)|0;
     $3 = $61;
    }
    (_sprintf($0,12367,$vararg_buffer27)|0);
    $62 = ((($0)) + 13|0);
    $63 = $3;
    $64 = (($63|0) / 2)&-1;
    $65 = (0 - ($64))|0;
    $66 = (($62) + ($65)|0);
    $67 = $1;
    $68 = $2;
    $69 = (($67) + ($68)|0);
    $70 = $3;
    (_strncpy($66,$69,$70)|0);
   } else {
    label = 37;
   }
  } else {
   label = 37;
  }
  if ((label|0) == 37) {
   (_sprintf($0,12666,$vararg_buffer29)|0);
  }
  _x11_menu_print($0,10);
 }
 $71 = HEAP8[(156147)>>0]|0;
 $72 = ($71<<24>>24)!=(0);
 if ($72) {
  $73 = HEAP32[4230]|0;
  $74 = (16924 + (($73*20)|0)|0);
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$vararg_buffer31>>2] = $76;
  (_sprintf($0,12693,$vararg_buffer31)|0);
  _x11_menu_print($0,11);
 }
 $77 = HEAP8[(156148)>>0]|0;
 $78 = ($77<<24>>24)!=(0);
 if ($78) {
  (_sprintf($0,12367,$vararg_buffer34)|0);
  _x11_menu_print($0,12);
 }
 $79 = HEAP8[(156149)>>0]|0;
 $80 = ($79<<24>>24)!=(0);
 if ($80) {
  (_sprintf($0,12720,$vararg_buffer36)|0);
  _x11_menu_print($0,13);
 }
 $81 = HEAP8[(156150)>>0]|0;
 $82 = ($81<<24>>24)!=(0);
 if (!($82)) {
  dest=156136; stop=dest+15|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $83 = HEAP32[4230]|0;
 $84 = (16924 + (($83*20)|0)|0);
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[4230]|0;
 $88 = (16924 + (($87*20)|0)|0);
 $89 = ((($88)) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[4230]|0;
 $92 = (16924 + (($91*20)|0)|0);
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$vararg_buffer38>>2] = $86;
 $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
 HEAP32[$vararg_ptr41>>2] = $90;
 $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
 HEAP32[$vararg_ptr42>>2] = $94;
 (_sprintf($0,12747,$vararg_buffer38)|0);
 _x11_menu_print($0,14);
 dest=156136; stop=dest+15|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _init_game() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[21800] = 15;
 HEAP32[21801] = 30;
 $0 = HEAP32[4230]|0;
 $1 = (16924 + (($0*20)|0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[4230]|0;
 $4 = (16924 + (($3*20)|0)|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_file_select_cave_level($2,$6)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  return;
 }
 _binary_to_cave(156181,87208);
 $9 = HEAP32[425]|0;
 HEAP32[(87216)>>2] = $9;
 $10 = HEAP32[21798]|0;
 $11 = HEAP32[(87344)>>2]|0;
 $12 = $10 & 1;
 $13 = $11 & -2;
 $14 = $13 | $12;
 HEAP32[(87344)>>2] = $14;
 _cave_to_logic(87208,17124);
 _x11_game_clear();
 _x11_score_clear();
 _emscripten_set_main_loop((129|0),0,0);
 return;
}
function _game_loop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 _game_input();
 _logic(17124);
 _audio_write(17124);
 _game_score();
 _x11_game_scroll(17124);
 _x11_game_object(17124);
 _x11_game_player(17124);
 _x11_game_score(17124);
 _x11_game_to_screen();
 $1 = HEAP32[21800]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[(17156)>>2]|0;
  $4 = (($3) + 1)|0;
  $5 = (($4|0) % 8)&-1;
  HEAP32[(17156)>>2] = $5;
 }
 $6 = HEAP32[21801]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = HEAP8[(156161)>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)!=(0);
   if ($10) {
    label = 6;
   } else {
    $11 = HEAP8[(156167)>>0]|0;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)!=(0);
    if ($13) {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    $0 = 1;
   }
   $14 = HEAP8[(156162)>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)!=(0);
   if (!($16)) {
    $17 = HEAP8[(156168)>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     break;
    }
   }
   $0 = 1;
  }
 } while(0);
 $20 = $0;
 $21 = ($20|0)==(1);
 if ($21) {
  _emscripten_cancel_main_loop();
  _end_game();
  STACKTOP = sp;return;
 }
 $22 = HEAP32[(17140)>>2]|0;
 $23 = ($22|0)!=(0);
 $24 = HEAP32[(17144)>>2]|0;
 $25 = ($24|0)!=(0);
 $or$cond = $23 & $25;
 $26 = HEAP32[21801]|0;
 $27 = ($26|0)!=(0);
 $or$cond3 = $or$cond & $27;
 if ($or$cond3) {
  $28 = HEAP32[21801]|0;
  $29 = (($28) + -1)|0;
  HEAP32[21801] = $29;
 }
 $30 = HEAP32[21800]|0;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[21800]|0;
 $33 = (($32) + -1)|0;
 HEAP32[21800] = $33;
 STACKTOP = sp;return;
}
function _game_score() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = HEAP32[26877]|0;
 $2 = (($1) + 1)|0;
 $3 = (($2|0) % 100)&-1;
 HEAP32[26877] = $3;
 $4 = HEAP32[(17128)>>2]|0;
 $5 = (($4) + 9)|0;
 $6 = (($5|0) / 10)&-1;
 $7 = HEAP32[(17132)>>2]|0;
 $8 = HEAP32[(17136)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $7;
 $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $8;
 (_sprintf($0,12257,$vararg_buffer)|0);
 $9 = HEAP32[(17140)>>2]|0;
 $10 = ($9|0)>(0);
 $11 = HEAP32[(17144)>>2]|0;
 $12 = ($11|0)>(0);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = ((($0)) + 13|0);
  (_strncpy($13,12298,13)|0);
  _x11_score_print($0);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[(17140)>>2]|0;
 $15 = ($14|0)<(0);
 $16 = HEAP32[(17144)>>2]|0;
 $17 = ($16|0)<(0);
 $or$cond3 = $15 | $17;
 if ($or$cond3) {
  $18 = HEAP32[26877]|0;
  $19 = ($18|0)<(50);
  if (!($19)) {
   _x11_score_print($0);
   STACKTOP = sp;return;
  }
  $20 = ((($0)) + 13|0);
  (_strncpy($20,12312,13)|0);
  _x11_score_print($0);
  STACKTOP = sp;return;
 } else {
  $21 = HEAP32[(17132)>>2]|0;
  $22 = ($21|0)==(0);
  if (!($22)) {
   _x11_score_print($0);
   STACKTOP = sp;return;
  }
  $23 = ((($0)) + 13|0);
  (_strncpy($23,12326,13)|0);
  _x11_score_print($0);
  STACKTOP = sp;return;
 }
}
function _menu() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _menu_keyboard_read();
 _menu_names_read();
 HEAP32[21797] = 0;
 HEAP32[21798] = 0;
 $0 = HEAP32[26908]|0;
 HEAP32[4230] = $0;
 _file_cave_refresh();
 HEAP32[21797] = 0;
 HEAP32[21796] = 11;
 ;HEAP8[156130>>0]=0|0;HEAP8[156130+1>>0]=0|0;HEAP8[156130+2>>0]=0|0;HEAP8[156130+3>>0]=0|0;HEAP8[156130+4>>0]=0|0;HEAP8[156130+5>>0]=0|0;
 _emscripten_cancel_main_loop();
 _emscripten_set_main_loop((128|0),0,0);
 return;
}
function _menu_keyboard_read() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $3 = $0;
  $4 = ($3|0)<(2);
  if (!($4)) {
   break;
  }
  $5 = $0;
  _file_token_read(107596,$5,107536,6);
  $1 = 0;
  while(1) {
   $6 = $1;
   $7 = ($6|0)<(6);
   if (!($7)) {
    break;
   }
   $8 = $1;
   $9 = (107536 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_keyboard_to_keycode($10)|0);
   $2 = $11;
   $12 = $2;
   $13 = ($12|0)!=(-1);
   if ($13) {
    $14 = $2;
    $15 = $0;
    $16 = (16860 + (($15*24)|0)|0);
    $17 = $1;
    $18 = (($16) + ($17<<2)|0);
    HEAP32[$18>>2] = $14;
   }
   $19 = $1;
   $20 = (($19) + 1)|0;
   $1 = $20;
  }
  $21 = $0;
  $22 = (($21) + 1)|0;
  $0 = $22;
 }
 STACKTOP = sp;return;
}
function _menu_names_read() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)<(10);
  if (!($2)) {
   break;
  }
  $3 = $0;
  _file_token_read(107608,$3,107516,5);
  $4 = HEAP32[26879]|0;
  $5 = (_atoi($4)|0);
  $6 = $0;
  $7 = (16924 + (($6*20)|0)|0);
  HEAP32[$7>>2] = $5;
  $8 = HEAP32[(107520)>>2]|0;
  $9 = (_atoi($8)|0);
  $10 = $0;
  $11 = (16924 + (($10*20)|0)|0);
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $9;
  $13 = HEAP32[(107524)>>2]|0;
  $14 = (_atoi($13)|0);
  $15 = $0;
  $16 = (16924 + (($15*20)|0)|0);
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[(107528)>>2]|0;
  $19 = (_atoi($18)|0);
  $20 = $0;
  $21 = (16924 + (($20*20)|0)|0);
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = $19;
  $23 = HEAP32[(107532)>>2]|0;
  $24 = (_atoi($23)|0);
  $25 = $0;
  $26 = (16924 + (($25*20)|0)|0);
  $27 = ((($26)) + 16|0);
  HEAP32[$27>>2] = $24;
  $28 = $0;
  $29 = (($28) + 1)|0;
  $0 = $29;
 }
 STACKTOP = sp;return;
}
function _file_token_read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _memset((160277|0),0,4096)|0;
 $10 = $5;
 $11 = ($10|0)>=(0);
 if ($11) {
  $12 = $5;
  $13 = $4;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if ($16) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   (_strncpy(160277,$21,4095)|0);
  }
 }
 $8 = 160277;
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $7;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  while(1) {
   $25 = $8;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $8;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)==(32);
    $54 = $32;
   } else {
    $54 = 0;
   }
   $33 = $8;
   if (!($54)) {
    break;
   }
   $34 = ((($33)) + 1|0);
   $8 = $34;
  }
  $35 = $6;
  $36 = $9;
  $37 = (($35) + ($36<<2)|0);
  HEAP32[$37>>2] = $33;
  while(1) {
   $38 = $8;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $8;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)!=(32);
    $55 = $45;
   } else {
    $55 = 0;
   }
   $46 = $8;
   if (!($55)) {
    break;
   }
   $47 = ((($46)) + 1|0);
   $8 = $47;
  }
  $48 = HEAP8[$46>>0]|0;
  $49 = ($48<<24>>24)!=(0);
  if ($49) {
   $50 = $8;
   $51 = ((($50)) + 1|0);
   $8 = $51;
   HEAP8[$50>>0] = 0;
  }
  $52 = $9;
  $53 = (($52) + 1)|0;
  $9 = $53;
 }
 STACKTOP = sp;return;
}
function _file_open() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 HEAP32[26913] = 164373;
 $4 = (_tmpfile()|0);
 HEAP32[26914] = $4;
 $5 = HEAP32[26914]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  (_strcpy(164374,16850)|0);
  (_mktemp(164374)|0);
  $7 = (_fopen(164374,12775)|0);
  HEAP32[26914] = $7;
  $8 = HEAP32[26914]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   HEAP32[26915] = 1;
  }
 }
 $10 = HEAP32[26914]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[490]|0;
  $13 = HEAP32[426]|0;
  $14 = HEAP32[427]|0;
  $15 = (___errno_location()|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strerror($16)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 12794;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $17;
  (_fprintf($12,12779,$vararg_buffer)|0);
  $0 = 1;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 _unzip_init(107664);
 $1 = 12831;
 $18 = $1;
 $19 = (_strlen($18)|0);
 $2 = $19;
 $20 = HEAP32[26917]|0;
 $21 = $2;
 $22 = (($20) + ($21))|0;
 $23 = (($22) + 1)|0;
 $24 = (_malloc($23)|0);
 HEAP32[26918] = $24;
 $25 = HEAP32[26918]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = HEAP32[26918]|0;
  $28 = HEAP32[26913]|0;
  $29 = $1;
  HEAP32[$vararg_buffer4>>2] = $28;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $29;
  (_sprintf($27,12838,$vararg_buffer4)|0);
 }
 _file_config_read();
 $30 = HEAP32[(107564)>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $1 = 12843;
  $32 = $1;
  $33 = (_strlen($32)|0);
  $2 = $33;
  $34 = HEAP32[26917]|0;
  $35 = $2;
  $36 = (($34) + ($35))|0;
  $37 = ($36|0)<(4096);
  if ($37) {
   $38 = HEAP32[26913]|0;
   $39 = $1;
   HEAP32[$vararg_buffer8>>2] = $38;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $39;
   (_sprintf(160277,12838,$vararg_buffer8)|0);
   _hash_add(107560,160277);
  }
 }
 $40 = HEAP32[(107576)>>2]|0;
 $41 = ($40|0)==(0);
 L16: do {
  if ($41) {
   $3 = 0;
   while(1) {
    $42 = $3;
    $43 = ($42|0)<(3);
    if (!($43)) {
     break L16;
    }
    $44 = $3;
    $45 = (1712 + ($44<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    _hash_add(107572,$46);
    $47 = $3;
    $48 = (($47) + 1)|0;
    $3 = $48;
   }
  }
 } while(0);
 $49 = HEAP32[(107588)>>2]|0;
 $50 = ($49|0)==(0);
 L22: do {
  if ($50) {
   $3 = 0;
   while(1) {
    $51 = $3;
    $52 = ($51|0)<(4);
    if (!($52)) {
     break L22;
    }
    $53 = $3;
    $54 = (1724 + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    _hash_add(107584,$55);
    $56 = $3;
    $57 = (($56) + 1)|0;
    $3 = $57;
   }
  }
 } while(0);
 $58 = HEAP32[(107600)>>2]|0;
 $3 = $58;
 while(1) {
  $59 = $3;
  $60 = ($59|0)<(2);
  if (!($60)) {
   break;
  }
  _hash_add(107596,164373);
  $61 = $3;
  $62 = (($61) + 1)|0;
  $3 = $62;
 }
 $63 = HEAP32[(107612)>>2]|0;
 $3 = $63;
 while(1) {
  $64 = $3;
  $65 = ($64|0)<(10);
  if (!($65)) {
   break;
  }
  _hash_add(107608,12848);
  $66 = $3;
  $67 = (($66) + 1)|0;
  $3 = $67;
 }
 $0 = 0;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _file_config_read() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $0 = 0;
 $3 = HEAP32[26918]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[26918]|0;
  $6 = (_fopen($5,12931)|0);
  $0 = $6;
  $7 = $0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (___errno_location()|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(2);
   if ($11) {
    $12 = HEAP32[490]|0;
    $13 = HEAP32[426]|0;
    $14 = HEAP32[427]|0;
    $15 = HEAP32[26918]|0;
    $16 = (___errno_location()|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strerror($17)|0);
    HEAP32[$vararg_buffer>>2] = $13;
    $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr2>>2] = $14;
    $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr3>>2] = $15;
    $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr4>>2] = 12952;
    $vararg_ptr5 = ((($vararg_buffer)) + 16|0);
    HEAP32[$vararg_ptr5>>2] = $18;
    (_fprintf($12,12933,$vararg_buffer)|0);
   }
  }
 }
 $19 = $0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $21 = $0;
  $22 = (_fgets(160277,4096,$21)|0);
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = (_strtok(160277,12979)|0);
  $1 = $24;
  $25 = (_strtok(0,12983)|0);
  $2 = $25;
  $26 = $1;
  $27 = ($26|0)==(0|0);
  $28 = $2;
  $29 = ($28|0)==(0|0);
  $or$cond = $27 | $29;
  if ($or$cond) {
   continue;
  }
  $30 = $1;
  $31 = (_strcmp($30,12843)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = $2;
   _hash_add(107560,$33);
  }
  $34 = $1;
  $35 = (_strcmp($34,12986)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   $37 = $2;
   _hash_add(107572,$37);
  }
  $38 = $1;
  $39 = (_strcmp($38,12992)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = $2;
   _hash_add(107584,$41);
  }
  $42 = $1;
  $43 = (_strcmp($42,13001)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = $2;
   _hash_add(107596,$45);
  }
  $46 = $1;
  $47 = (_strcmp($46,13010)|0);
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $2;
   _hash_add(107608,$49);
  }
  $50 = $1;
  $51 = (_strcmp($50,13015)|0);
  $52 = ($51|0)==(0);
  if (!($52)) {
   continue;
  }
  $53 = $2;
  $54 = (_atoi($53)|0);
  HEAP32[26908] = $54;
 }
 $55 = $0;
 (_fclose($55)|0);
 STACKTOP = sp;return;
}
function _hash_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>=($11|0);
 do {
  if ($12) {
   $13 = $2;
   $14 = HEAP32[$13>>2]|0;
   $4 = $14;
   $5 = 10;
   while(1) {
    $15 = $2;
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $5;
    $19 = ($17|0)>=($18|0);
    if (!($19)) {
     break;
    }
    $20 = $5;
    $21 = $20<<3;
    $22 = (($21|0) / 5)&-1;
    $5 = $22;
   }
   $23 = $4;
   $24 = $5;
   $25 = $24<<2;
   $26 = (_realloc($23,$25)|0);
   $4 = $26;
   $27 = $4;
   $28 = ($27|0)==(0|0);
   if ($28) {
    STACKTOP = sp;return;
   } else {
    $29 = $4;
    $30 = $2;
    HEAP32[$30>>2] = $29;
    $31 = $5;
    $32 = $2;
    $33 = ((($32)) + 8|0);
    HEAP32[$33>>2] = $31;
    break;
   }
  }
 } while(0);
 $34 = $3;
 $35 = (___strdup($34)|0);
 $3 = $35;
 $36 = $3;
 $37 = ($36|0)==(0|0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = $3;
 $39 = $2;
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[$42>>2] = $44;
 $45 = (($40) + ($43<<2)|0);
 HEAP32[$45>>2] = $38;
 STACKTOP = sp;return;
}
function _file_close() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[435] = -1;
 HEAP32[436] = -1;
 _file_config_write();
 _hash_free(107620);
 _hash_free(107560);
 _hash_free(107572);
 _hash_free(107584);
 _hash_free(107596);
 _hash_free(107608);
 $0 = HEAP32[26918]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[26918]|0;
  _free($2);
  HEAP32[26918] = 0;
 }
 _unzip_free(107664);
 $3 = HEAP32[26914]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[26914]|0;
  (_fclose($5)|0);
  HEAP32[26914] = 0;
 }
 $6 = HEAP32[26915]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  (_remove(164374)|0);
  HEAP32[26915] = 0;
 }
 $8 = HEAP32[26917]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  return 0;
 }
 $10 = HEAP32[26913]|0;
 _free($10);
 HEAP32[26917] = 0;
 return 0;
}
function _file_config_write() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer30 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = 0;
 $2 = HEAP32[26918]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[26918]|0;
  $5 = (_fopen($4,13027)|0);
  $0 = $5;
  $6 = $0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = HEAP32[490]|0;
   $9 = HEAP32[426]|0;
   $10 = HEAP32[427]|0;
   $11 = HEAP32[26918]|0;
   $12 = (___errno_location()|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_strerror($13)|0);
   HEAP32[$vararg_buffer>>2] = $9;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $11;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 13029;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $14;
   (_fprintf($8,12933,$vararg_buffer)|0);
  }
 }
 $15 = $0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $1 = 0;
 while(1) {
  $17 = $1;
  $18 = HEAP32[(107564)>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $0;
  $21 = HEAP32[26890]|0;
  $22 = $1;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $24;
  (_fprintf($20,13058,$vararg_buffer5)|0);
  $25 = $1;
  $26 = (($25) + 1)|0;
  $1 = $26;
 }
 $1 = 0;
 while(1) {
  $27 = $1;
  $28 = HEAP32[(107576)>>2]|0;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $0;
  $31 = HEAP32[26893]|0;
  $32 = $1;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $34;
  (_fprintf($30,13067,$vararg_buffer8)|0);
  $35 = $1;
  $36 = (($35) + 1)|0;
  $1 = $36;
 }
 $1 = 0;
 while(1) {
  $37 = $1;
  $38 = HEAP32[(107588)>>2]|0;
  $39 = ($37|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $0;
  $41 = HEAP32[26896]|0;
  $42 = $1;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $44;
  (_fprintf($40,13077,$vararg_buffer11)|0);
  $45 = $1;
  $46 = (($45) + 1)|0;
  $1 = $46;
 }
 $1 = 0;
 while(1) {
  $47 = $1;
  $48 = HEAP32[(107600)>>2]|0;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $0;
  $51 = HEAP32[26899]|0;
  $52 = $1;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $54;
  (_fprintf($50,13090,$vararg_buffer14)|0);
  $55 = $1;
  $56 = (($55) + 1)|0;
  $1 = $56;
 }
 $1 = 0;
 while(1) {
  $57 = $1;
  $58 = HEAP32[(107612)>>2]|0;
  $59 = ($57|0)<($58|0);
  $60 = $0;
  if (!($59)) {
   break;
  }
  $61 = HEAP32[26902]|0;
  $62 = $1;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $64;
  (_fprintf($60,13103,$vararg_buffer17)|0);
  $65 = $1;
  $66 = (($65) + 1)|0;
  $1 = $66;
 }
 $67 = HEAP32[26908]|0;
 HEAP32[$vararg_buffer20>>2] = $67;
 (_fprintf($60,13112,$vararg_buffer20)|0);
 $68 = $0;
 $69 = (_ferror($68)|0);
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = HEAP32[490]|0;
  $72 = HEAP32[426]|0;
  $73 = HEAP32[427]|0;
  $74 = HEAP32[26918]|0;
  $75 = (___errno_location()|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (_strerror($76)|0);
  HEAP32[$vararg_buffer23>>2] = $72;
  $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
  HEAP32[$vararg_ptr26>>2] = $73;
  $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
  HEAP32[$vararg_ptr27>>2] = $74;
  $vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
  HEAP32[$vararg_ptr28>>2] = 13123;
  $vararg_ptr29 = ((($vararg_buffer23)) + 16|0);
  HEAP32[$vararg_ptr29>>2] = $77;
  (_fprintf($71,12933,$vararg_buffer23)|0);
 }
 $78 = $0;
 $79 = (_fclose($78)|0);
 $80 = ($79|0)!=(0);
 if (!($80)) {
  STACKTOP = sp;return;
 }
 $81 = HEAP32[490]|0;
 $82 = HEAP32[426]|0;
 $83 = HEAP32[427]|0;
 $84 = HEAP32[26918]|0;
 $85 = (___errno_location()|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (_strerror($86)|0);
 HEAP32[$vararg_buffer30>>2] = $82;
 $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
 HEAP32[$vararg_ptr33>>2] = $83;
 $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
 HEAP32[$vararg_ptr34>>2] = $84;
 $vararg_ptr35 = ((($vararg_buffer30)) + 12|0);
 HEAP32[$vararg_ptr35>>2] = 13151;
 $vararg_ptr36 = ((($vararg_buffer30)) + 16|0);
 HEAP32[$vararg_ptr36>>2] = $87;
 (_fprintf($81,12933,$vararg_buffer30)|0);
 STACKTOP = sp;return;
}
function _hash_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  while(1) {
   $6 = $1;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0);
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   if (!($9)) {
    break;
   }
   $12 = $1;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + -1)|0;
   HEAP32[$13>>2] = $15;
   $16 = (($11) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $2 = $17;
   $18 = $2;
   _free($18);
  }
  _free($11);
 }
 $19 = $1;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 STACKTOP = sp;return;
}
function _file_cave_refresh() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $10 = sp + 36|0;
 _hash_free(107620);
 $0 = 0;
 while(1) {
  $11 = $0;
  $12 = HEAP32[(107564)>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[(107624)>>2]|0;
  $1 = $14;
  $15 = HEAP32[26890]|0;
  $16 = $0;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
  $3 = 13179;
  $4 = 13181;
  $19 = $2;
  $20 = (_strlen($19)|0);
  $5 = $20;
  $21 = $3;
  $22 = (_strlen($21)|0);
  $6 = $22;
  $23 = $4;
  $24 = (_strlen($23)|0);
  $7 = $24;
  $25 = $5;
  $26 = $6;
  $27 = ($25|0)<($26|0);
  if ($27) {
   label = 5;
  } else {
   $28 = $2;
   $29 = $5;
   $30 = (($28) + ($29)|0);
   $31 = $6;
   $32 = (0 - ($31))|0;
   $33 = (($30) + ($32)|0);
   $34 = $3;
   $35 = (_strcmp($33,$34)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $37 = $3;
   $38 = ((($37)) + 1|0);
   $3 = $38;
   $39 = $6;
   $40 = (($39) + -1)|0;
   $6 = $40;
  }
  $41 = $2;
  $42 = (_opendir($41)|0);
  $8 = $42;
  $43 = $8;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   while(1) {
    $45 = $8;
    $46 = (_readdir($45)|0);
    $9 = $46;
    $47 = $9;
    $48 = ($47|0)!=(0|0);
    if (!($48)) {
     break;
    }
    $49 = $9;
    $50 = ((($49)) + 11|0);
    $4 = $50;
    $51 = $4;
    $52 = (_strlen($51)|0);
    $7 = $52;
    $53 = $5;
    $54 = $6;
    $55 = (($53) + ($54))|0;
    $56 = $7;
    $57 = (($55) + ($56))|0;
    $58 = ($57|0)<(4096);
    if (!($58)) {
     continue;
    }
    $59 = $2;
    $60 = $3;
    $61 = $4;
    HEAP32[$vararg_buffer>>2] = $59;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $60;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $61;
    (_sprintf(160277,13185,$vararg_buffer)|0);
    $62 = (_stat(160277,$10)|0);
    $63 = ($62|0)==(0);
    if (!($63)) {
     continue;
    }
    $64 = ((($10)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65 & 61440;
    $67 = ($66|0)==(32768);
    if (!($67)) {
     continue;
    }
    _hash_add(107620,160277);
   }
   $68 = $8;
   (_closedir($68)|0);
  } else {
   $69 = HEAP32[490]|0;
   $70 = HEAP32[426]|0;
   $71 = HEAP32[427]|0;
   $72 = $2;
   $73 = (___errno_location()|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (_strerror($74)|0);
   HEAP32[$vararg_buffer3>>2] = $70;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $71;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $72;
   $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
   HEAP32[$vararg_ptr8>>2] = 13192;
   $vararg_ptr9 = ((($vararg_buffer3)) + 16|0);
   HEAP32[$vararg_ptr9>>2] = $75;
   (_fprintf($69,12933,$vararg_buffer3)|0);
  }
  $76 = $1;
  $77 = HEAP32[(107624)>>2]|0;
  $78 = ($76|0)<($77|0);
  if ($78) {
   $79 = HEAP32[26905]|0;
   $80 = $1;
   $81 = (($79) + ($80<<2)|0);
   $82 = HEAP32[(107624)>>2]|0;
   $83 = $1;
   $84 = (($82) - ($83))|0;
   _qsort($81,$84,4,130);
  }
  $85 = $0;
  $86 = (($85) + 1)|0;
  $0 = $86;
 }
 HEAP32[435] = -1;
 HEAP32[436] = -1;
 STACKTOP = sp;return;
}
function _cmp_cave($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $4;
 $11 = $5;
 $12 = (_strcmp($10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _file_select_cave_level($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old = 0, $$old8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer21 = 0, $vararg_buffer28 = 0, $vararg_buffer35 = 0, $vararg_buffer42 = 0, $vararg_buffer49 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0;
 var $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer42 = sp + 120|0;
 $vararg_buffer35 = sp + 96|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 192|0;
 $9 = sp + 184|0;
 $2 = $0;
 $3 = $1;
 $5 = 13181;
 $15 = $2;
 $16 = ($15|0)>=(0);
 if ($16) {
  $17 = $2;
  $18 = HEAP32[(107624)>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $20 = HEAP32[26905]|0;
   $21 = $2;
   $22 = (($20) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $5 = $23;
  }
 }
 $24 = $2;
 $25 = HEAP32[435]|0;
 $26 = ($24|0)==($25|0);
 do {
  if (!($26)) {
   HEAP32[26919] = 0;
   HEAP32[435] = -1;
   HEAP32[436] = -1;
   $27 = $2;
   $28 = ($27|0)>=(0);
   if ($28) {
    $29 = $2;
    $30 = HEAP32[(107624)>>2]|0;
    $31 = ($29|0)<($30|0);
    if ($31) {
     _unzip_init(107664);
     $32 = $5;
     $33 = (_fopen($32,13222)|0);
     $4 = $33;
     $34 = $4;
     $35 = ($34|0)==(0|0);
     if ($35) {
      $36 = HEAP32[490]|0;
      $37 = HEAP32[426]|0;
      $38 = HEAP32[427]|0;
      $39 = $5;
      $40 = (___errno_location()|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (_strerror($41)|0);
      HEAP32[$vararg_buffer>>2] = $37;
      $vararg_ptr10 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $38;
      $vararg_ptr11 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = $39;
      $vararg_ptr12 = ((($vararg_buffer)) + 12|0);
      HEAP32[$vararg_ptr12>>2] = 13225;
      $vararg_ptr13 = ((($vararg_buffer)) + 16|0);
      HEAP32[$vararg_ptr13>>2] = $42;
      (_fprintf($36,12933,$vararg_buffer)|0);
      break;
     }
     $43 = HEAP32[26914]|0;
     _rewind($43);
     $6 = (164373);
     $44 = $6;
     HEAP32[$7>>2] = $44;
     $8 = (160277);
     HEAP32[$9>>2] = 156181;
     $10 = 0;
     $$old = HEAP32[26919]|0;
     $$old8 = ($$old|0)<(250000);
     L12: do {
      if ($$old8) {
       L13: while(1) {
        $45 = HEAP32[$7>>2]|0;
        $46 = $6;
        $47 = ($45|0)==($46|0);
        $48 = HEAP32[$7>>2]|0;
        $49 = ($48|0)!=(0|0);
        $or$cond = $47 & $49;
        if ($or$cond) {
         $50 = HEAP32[$7>>2]|0;
         $51 = $50;
         $52 = (($51) - (160277))|0;
         $53 = $4;
         $54 = (_fread(160277,1,$52,$53)|0);
         $11 = $54;
         HEAP32[$7>>2] = 160277;
         $55 = $11;
         $56 = (160277 + ($55)|0);
         $6 = $56;
         $57 = $4;
         $58 = (_ferror($57)|0);
         $59 = ($58|0)!=(0);
         if ($59) {
          label = 12;
          break;
         }
        }
        $67 = HEAP32[$7>>2]|0;
        $68 = $6;
        $69 = ($67|0)==($68|0);
        if ($69) {
         HEAP32[$7>>2] = 0;
         $6 = 0;
        }
        $70 = $10;
        $71 = ($70|0)==(0);
        $72 = $10;
        $73 = ($72|0)==(2);
        $or$cond3 = $71 | $73;
        do {
         if ($or$cond3) {
          $74 = HEAP32[26916]|0;
          $75 = $6;
          $76 = $8;
          $77 = (_unzip($74,$7,$9,$75,$76)|0);
          $12 = $77;
          $78 = $10;
          $79 = ($78|0)==(0);
          $80 = $12;
          $81 = ($80|0)!=(0|0);
          if (!($79)) {
           if ($81) {
            label = 21;
            break L13;
           } else {
            break;
           }
          }
          if ($81) {
           HEAP32[$7>>2] = 160277;
           break;
          } else {
           $10 = 2;
           break;
          }
         }
        } while(0);
        $87 = $10;
        $88 = ($87|0)==(0);
        $89 = $10;
        $90 = ($89|0)==(1);
        $or$cond5 = $88 | $90;
        if ($or$cond5) {
         $91 = HEAP32[$7>>2]|0;
         $92 = ($91|0)!=(0|0);
         if ($92) {
          $93 = $6;
          $94 = HEAP32[$7>>2]|0;
          $95 = $93;
          $96 = $94;
          $97 = (($95) - ($96))|0;
          $13 = $97;
          $98 = $13;
          $99 = $8;
          $100 = HEAP32[$9>>2]|0;
          $101 = $99;
          $102 = $100;
          $103 = (($101) - ($102))|0;
          $104 = ($98|0)>($103|0);
          if ($104) {
           $105 = $8;
           $106 = HEAP32[$9>>2]|0;
           $107 = $105;
           $108 = $106;
           $109 = (($107) - ($108))|0;
           $13 = $109;
          }
          $110 = HEAP32[$9>>2]|0;
          $111 = HEAP32[$7>>2]|0;
          $112 = $13;
          _memcpy(($110|0),($111|0),($112|0))|0;
          $113 = $13;
          $114 = HEAP32[$7>>2]|0;
          $115 = (($114) + ($113)|0);
          HEAP32[$7>>2] = $115;
          $116 = $13;
          $117 = HEAP32[$9>>2]|0;
          $118 = (($117) + ($116)|0);
          HEAP32[$9>>2] = $118;
         }
         $10 = 1;
        }
        $119 = HEAP32[$9>>2]|0;
        $120 = $8;
        $121 = ($119|0)==($120|0);
        $122 = HEAP32[$7>>2]|0;
        $123 = ($122|0)==(0|0);
        $or$cond7 = $121 | $123;
        if ($or$cond7) {
         $124 = HEAP32[$9>>2]|0;
         $125 = $124;
         $126 = (($125) - (156181))|0;
         $127 = HEAP32[26914]|0;
         $128 = (_fwrite(156181,1,$126,$127)|0);
         $14 = $128;
         HEAP32[$9>>2] = 156181;
         $129 = $14;
         $130 = (156181 + ($129)|0);
         $8 = $130;
         $131 = HEAP32[26914]|0;
         $132 = (_ferror($131)|0);
         $133 = ($132|0)!=(0);
         if ($133) {
          label = 30;
          break;
         }
         $141 = $14;
         $142 = HEAP32[26919]|0;
         $143 = (($142) + ($141))|0;
         HEAP32[26919] = $143;
        }
        $144 = HEAP32[$9>>2]|0;
        $145 = $8;
        $146 = ($144|0)!=($145|0);
        $147 = HEAP32[26919]|0;
        $148 = ($147|0)<(250000);
        $or$cond9 = $146 & $148;
        if (!($or$cond9)) {
         break L12;
        }
       }
       if ((label|0) == 12) {
        $60 = HEAP32[490]|0;
        $61 = HEAP32[426]|0;
        $62 = HEAP32[427]|0;
        $63 = $5;
        $64 = (___errno_location()|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (_strerror($65)|0);
        HEAP32[$vararg_buffer14>>2] = $61;
        $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
        HEAP32[$vararg_ptr17>>2] = $62;
        $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
        HEAP32[$vararg_ptr18>>2] = $63;
        $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
        HEAP32[$vararg_ptr19>>2] = 13245;
        $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
        HEAP32[$vararg_ptr20>>2] = $66;
        (_fprintf($60,12933,$vararg_buffer14)|0);
        break;
       }
       else if ((label|0) == 21) {
        $82 = HEAP32[490]|0;
        $83 = HEAP32[426]|0;
        $84 = HEAP32[427]|0;
        $85 = $5;
        $86 = $12;
        HEAP32[$vararg_buffer21>>2] = $83;
        $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
        HEAP32[$vararg_ptr24>>2] = $84;
        $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
        HEAP32[$vararg_ptr25>>2] = $85;
        $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
        HEAP32[$vararg_ptr26>>2] = 13265;
        $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
        HEAP32[$vararg_ptr27>>2] = $86;
        (_fprintf($82,12933,$vararg_buffer21)|0);
        break;
       }
       else if ((label|0) == 30) {
        $134 = HEAP32[490]|0;
        $135 = HEAP32[426]|0;
        $136 = HEAP32[427]|0;
        $137 = $5;
        $138 = (___errno_location()|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (_strerror($139)|0);
        HEAP32[$vararg_buffer28>>2] = $135;
        $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
        HEAP32[$vararg_ptr31>>2] = $136;
        $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
        HEAP32[$vararg_ptr32>>2] = $137;
        $vararg_ptr33 = ((($vararg_buffer28)) + 12|0);
        HEAP32[$vararg_ptr33>>2] = 13291;
        $vararg_ptr34 = ((($vararg_buffer28)) + 16|0);
        HEAP32[$vararg_ptr34>>2] = $140;
        (_fprintf($134,12933,$vararg_buffer28)|0);
        break;
       }
      }
     } while(0);
     $149 = $4;
     $150 = (_fclose($149)|0);
     $151 = ($150|0)!=(0);
     if ($151) {
      $152 = HEAP32[490]|0;
      $153 = HEAP32[426]|0;
      $154 = HEAP32[427]|0;
      $155 = $5;
      $156 = (___errno_location()|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (_strerror($157)|0);
      HEAP32[$vararg_buffer35>>2] = $153;
      $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
      HEAP32[$vararg_ptr38>>2] = $154;
      $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
      HEAP32[$vararg_ptr39>>2] = $155;
      $vararg_ptr40 = ((($vararg_buffer35)) + 12|0);
      HEAP32[$vararg_ptr40>>2] = 13327;
      $vararg_ptr41 = ((($vararg_buffer35)) + 16|0);
      HEAP32[$vararg_ptr41>>2] = $158;
      (_fprintf($152,12933,$vararg_buffer35)|0);
     }
     $159 = $2;
     HEAP32[435] = $159;
    }
   }
  }
 } while(0);
 $160 = $3;
 $161 = HEAP32[436]|0;
 $162 = ($160|0)==($161|0);
 if ($162) {
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 }
 _memset((156181|0),0,2172)|0;
 HEAP32[436] = -1;
 $163 = $3;
 $164 = ($163|0)>=(0);
 if (!($164)) {
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 }
 $165 = $3;
 $166 = HEAP32[26919]|0;
 $167 = (($166|0) / 2172)&-1;
 $168 = ($165|0)<($167|0);
 if (!($168)) {
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 }
 $169 = HEAP32[26914]|0;
 $170 = $3;
 $171 = ($170*2172)|0;
 $172 = (_fseek($169,$171,0)|0);
 $173 = ($172|0)!=(0);
 if ($173) {
  $174 = HEAP32[490]|0;
  $175 = HEAP32[426]|0;
  $176 = HEAP32[427]|0;
  $177 = $5;
  $178 = (___errno_location()|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (_strerror($179)|0);
  HEAP32[$vararg_buffer42>>2] = $175;
  $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
  HEAP32[$vararg_ptr45>>2] = $176;
  $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
  HEAP32[$vararg_ptr46>>2] = $177;
  $vararg_ptr47 = ((($vararg_buffer42)) + 12|0);
  HEAP32[$vararg_ptr47>>2] = 13348;
  $vararg_ptr48 = ((($vararg_buffer42)) + 16|0);
  HEAP32[$vararg_ptr48>>2] = $180;
  (_fprintf($174,12933,$vararg_buffer42)|0);
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 }
 $181 = HEAP32[26914]|0;
 (_fread(156181,2172,1,$181)|0);
 $182 = HEAP32[26914]|0;
 $183 = (_ferror($182)|0);
 $184 = ($183|0)!=(0);
 if ($184) {
  $185 = HEAP32[490]|0;
  $186 = HEAP32[426]|0;
  $187 = HEAP32[427]|0;
  $188 = $5;
  $189 = (___errno_location()|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (_strerror($190)|0);
  HEAP32[$vararg_buffer49>>2] = $186;
  $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
  HEAP32[$vararg_ptr52>>2] = $187;
  $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
  HEAP32[$vararg_ptr53>>2] = $188;
  $vararg_ptr54 = ((($vararg_buffer49)) + 12|0);
  HEAP32[$vararg_ptr54>>2] = 13369;
  $vararg_ptr55 = ((($vararg_buffer49)) + 16|0);
  HEAP32[$vararg_ptr55>>2] = $191;
  (_fprintf($185,12933,$vararg_buffer49)|0);
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 } else {
  $192 = $3;
  HEAP32[436] = $192;
  $193 = HEAP32[435]|0;
  $194 = ($193|0)==(-1);
  $195 = HEAP32[436]|0;
  $196 = ($195|0)==(-1);
  $197 = $194 ? 1 : $196;
  $198 = $197&1;
  STACKTOP = sp;return ($198|0);
 }
 return (0)|0;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $5 = 32;
 $6 = HEAP32[583]|0;
 (_fputs(13390,$6)|0);
 $7 = HEAP32[583]|0;
 (_fputs(13427,$7)|0);
 L1: while(1) {
  $8 = $3;
  $9 = $4;
  $10 = (_getopt($8,$9,13456)|0);
  switch ($10|0) {
  case -1:  {
   label = 16;
   break L1;
   break;
  }
  case 100:  {
   $5 = 100;
   $20 = HEAP32[38388]|0;
   HEAP32[26909] = $20;
   continue L1;
   break;
  }
  case 103:  {
   $5 = 103;
   $21 = HEAP32[38388]|0;
   HEAP32[26910] = $21;
   continue L1;
   break;
  }
  case 105:  {
   $5 = 105;
   HEAP32[26911] = 1;
   continue L1;
   break;
  }
  case 102:  {
   $5 = 102;
   HEAP32[26912] = 1;
   continue L1;
   break;
  }
  case 99:  {
   $5 = 99;
   break;
  }
  case 97:  {
   $5 = 97;
   break;
  }
  case 106:  {
   $5 = 106;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   break L1;
  }
  }
  $22 = $5;
  switch ($22|0) {
  case 99:  {
   $23 = HEAP32[38388]|0;
   _hash_add(107560,$23);
   continue L1;
   break;
  }
  case 97:  {
   $24 = HEAP32[38388]|0;
   _hash_add(107572,$24);
   continue L1;
   break;
  }
  case 106:  {
   $25 = HEAP32[38388]|0;
   _hash_add(107584,$25);
   continue L1;
   break;
  }
  default: {
   label = 15;
   break L1;
  }
  }
 }
 do {
  if ((label|0) == 15) {
   $26 = HEAP32[490]|0;
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = $5;
   HEAP32[$vararg_buffer>>2] = $28;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $29;
   (_fprintf($26,13741,$vararg_buffer)|0);
  }
  else if ((label|0) == 16) {
   $30 = HEAP32[437]|0;
   $31 = $3;
   $32 = ($30|0)<($31|0);
   if ($32) {
    $33 = HEAP32[490]|0;
    $34 = $4;
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$vararg_buffer2>>2] = $35;
    (_fprintf($33,13781,$vararg_buffer2)|0);
    break;
   }
   $36 = HEAP32[437]|0;
   $37 = $3;
   $38 = (($37) - ($36))|0;
   $3 = $38;
   $39 = HEAP32[437]|0;
   $40 = $4;
   $41 = (($40) + ($39<<2)|0);
   $4 = $41;
   $42 = (_time((0|0))|0);
   $43 = HEAP32[425]|0;
   $44 = (($43) + ($42))|0;
   HEAP32[425] = $44;
   $45 = HEAP32[583]|0;
   $46 = HEAP32[425]|0;
   HEAP32[$vararg_buffer5>>2] = $46;
   (_fprintf($45,13805,$vararg_buffer5)|0);
   (_atexit((131|0))|0);
   $47 = HEAP32[583]|0;
   (_fputs(13815,$47)|0);
   $48 = (_file_open()|0);
   $49 = ($48|0)!=(0);
   if (!($49)) {
    $50 = HEAP32[583]|0;
    (_fputs(13829,$50)|0);
   }
   $51 = (_display_open()|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    $53 = HEAP32[583]|0;
    (_fputs(13846,$53)|0);
   }
   (_keyboard_open()|0);
   $54 = HEAP32[583]|0;
   (_fputs(13864,$54)|0);
   (_joystick_open()|0);
   $55 = HEAP32[583]|0;
   (_fputs(13882,$55)|0);
   (_audio_open()|0);
   $56 = HEAP32[583]|0;
   (_fputs(13897,$56)|0);
   $57 = (_screen_open()|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    _menu();
   }
   $2 = 0;
   $59 = $2;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $11 = HEAP32[490]|0;
 (_fputs(13470,$11)|0);
 $12 = HEAP32[490]|0;
 (_fputs(13497,$12)|0);
 $13 = HEAP32[490]|0;
 (_fputs(13519,$13)|0);
 $14 = HEAP32[490]|0;
 (_fputs(13542,$14)|0);
 $15 = HEAP32[490]|0;
 (_fputs(13574,$15)|0);
 $16 = HEAP32[490]|0;
 (_fputs(13600,$16)|0);
 $17 = HEAP32[490]|0;
 (_fputs(13640,$17)|0);
 $18 = HEAP32[490]|0;
 (_fputs(13668,$18)|0);
 $19 = HEAP32[490]|0;
 (_fputs(13699,$19)|0);
 $2 = 1;
 $59 = $2;
 STACKTOP = sp;return ($59|0);
}
function _quit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_screen_close()|0);
 (_audio_close()|0);
 (_joystick_close()|0);
 (_keyboard_close()|0);
 (_display_close()|0);
 (_file_close()|0);
 return;
}
function _unzip($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink11 = 0, $$sink12 = 0, $$sink2 = 0, $$sink6 = 0, $$sink7 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0;
 var $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0;
 var $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0;
 var $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0;
 var $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0;
 var $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0;
 var $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0;
 var $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0;
 var $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0;
 var $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0;
 var $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0;
 var $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0;
 var $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $12 = $16;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $5 = 13913;
  $1514 = $5;
  STACKTOP = sp;return ($1514|0);
 }
 $19 = $6;
 $20 = HEAP32[$19>>2]|0;
 switch ($20|0) {
 case 13:  {
  label = 7;
  break;
 }
 case 14:  {
  label = 19;
  break;
 }
 case 15:  {
  label = 26;
  break;
 }
 case 16:  {
  label = 34;
  break;
 }
 case 17:  {
  label = 45;
  break;
 }
 case 18:  {
  label = 56;
  break;
 }
 case 1:  {
  label = 64;
  break;
 }
 case 2:  {
  label = 73;
  break;
 }
 case 3:  {
  label = 86;
  break;
 }
 case 4:  {
  label = 125;
  break;
 }
 case 5:  {
  label = 134;
  break;
 }
 case 6:  {
  label = 147;
  break;
 }
 case 7:  {
  label = 158;
  break;
 }
 case 8:  {
  label = 171;
  break;
 }
 case 9:  {
  label = 182;
  break;
 }
 case 10:  {
  label = 185;
  break;
 }
 case 11:  {
  label = 192;
  break;
 }
 case 12:  {
  label = 201;
  break;
 }
 default: {
  $21 = $11;
  $22 = $9;
  $23 = ($21|0)==($22|0);
  if ($23) {
   label = 208;
  } else {
   $24 = $6;
   $25 = ((($24)) + 4|0);
   $26 = $6;
   $27 = ((($26)) + 33636|0);
   HEAP32[$27>>2] = $25;
   $28 = $6;
   $29 = ((($28)) + 33644|0);
   HEAP32[$29>>2] = 0;
   $30 = $6;
   $31 = ((($30)) + 44256|0);
   HEAP32[$31>>2] = 0;
   $32 = $6;
   $33 = ((($32)) + 33636|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $6;
   $36 = ((($35)) + 44260|0);
   HEAP32[$36>>2] = $34;
   $37 = $6;
   $38 = ((($37)) + 44276|0);
   HEAP32[$38>>2] = 0;
   label = 6;
  }
 }
 }
 L8: while(1) {
  switch (label|0) {
   case 6: {
    label = 0;
    $39 = $6;
    $40 = ((($39)) + 44276|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41>>>0)<(10);
    if ($42) {
     label = 7;
     continue L8;
    }
    $62 = $6;
    $63 = ((($62)) + 44264|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = ($65|0)!=(31);
    if ($66) {
     label = 15;
     break L8;
    }
    $67 = $6;
    $68 = ((($67)) + 44264|0);
    $69 = ((($68)) + 1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($71|0)!=(139);
    if ($72) {
     label = 15;
     break L8;
    }
    $73 = $6;
    $74 = ((($73)) + 44264|0);
    $75 = ((($74)) + 2|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = ($77|0)!=(8);
    if ($78) {
     label = 15;
     break L8;
    }
    $79 = $6;
    $80 = ((($79)) + 44264|0);
    $81 = ((($80)) + 3|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 & 4;
    $85 = ($84|0)!=(0);
    if ($85) {
     $86 = $6;
     $87 = ((($86)) + 44276|0);
     HEAP32[$87>>2] = 0;
     label = 18;
    } else {
     label = 31;
    }
    break;
   }
   case 7: {
    label = 0;
    $43 = $11;
    $44 = $9;
    $45 = ($43|0)==($44|0);
    if ($45) {
     label = 8;
     break L8;
    }
    $49 = $11;
    $50 = ((($49)) + 1|0);
    $11 = $50;
    $51 = HEAP8[$49>>0]|0;
    $52 = $6;
    $53 = ((($52)) + 44264|0);
    $54 = $6;
    $55 = ((($54)) + 44276|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($53) + ($56)|0);
    HEAP8[$57>>0] = $51;
    $58 = $6;
    $59 = ((($58)) + 44276|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$59>>2] = $61;
    label = 6;
    continue L8;
    break;
   }
   case 19: {
    label = 0;
    $92 = $11;
    $93 = $9;
    $94 = ($92|0)==($93|0);
    if ($94) {
     label = 20;
     break L8;
    }
    $98 = $11;
    $99 = ((($98)) + 1|0);
    $11 = $99;
    $100 = HEAP8[$98>>0]|0;
    $101 = $6;
    $102 = ((($101)) + 44264|0);
    $103 = $6;
    $104 = ((($103)) + 44276|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($102) + ($105)|0);
    HEAP8[$106>>0] = $100;
    $107 = $6;
    $108 = ((($107)) + 44276|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + 1)|0;
    HEAP32[$108>>2] = $110;
    label = 18;
    break;
   }
   case 26: {
    label = 0;
    $128 = $11;
    $129 = $9;
    $130 = ($128|0)==($129|0);
    if ($130) {
     label = 27;
     break L8;
    }
    $134 = $11;
    $135 = ((($134)) + 1|0);
    $11 = $135;
    $136 = HEAP8[$134>>0]|0;
    $137 = $6;
    $138 = ((($137)) + 44264|0);
    HEAP8[$138>>0] = $136;
    $139 = $6;
    $140 = ((($139)) + 44276|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + -1)|0;
    HEAP32[$140>>2] = $142;
    label = 25;
    break;
   }
   case 34: {
    label = 0;
    $156 = $11;
    $157 = $9;
    $158 = ($156|0)==($157|0);
    if ($158) {
     label = 35;
     break L8;
    }
    $162 = $11;
    $163 = ((($162)) + 1|0);
    $11 = $163;
    $164 = HEAP8[$162>>0]|0;
    $165 = $6;
    $166 = ((($165)) + 44264|0);
    HEAP8[$166>>0] = $164;
    $167 = $6;
    $168 = ((($167)) + 44264|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = ($170|0)==(0);
    if ($171) {
     label = 40;
    } else {
     $172 = $6;
     $173 = ((($172)) + 44276|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + -1)|0;
     HEAP32[$173>>2] = $175;
     label = 33;
    }
    break;
   }
   case 45: {
    label = 0;
    $193 = $11;
    $194 = $9;
    $195 = ($193|0)==($194|0);
    if ($195) {
     label = 46;
     break L8;
    }
    $199 = $11;
    $200 = ((($199)) + 1|0);
    $11 = $200;
    $201 = HEAP8[$199>>0]|0;
    $202 = $6;
    $203 = ((($202)) + 44264|0);
    HEAP8[$203>>0] = $201;
    $204 = $6;
    $205 = ((($204)) + 44264|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206&255;
    $208 = ($207|0)==(0);
    if ($208) {
     label = 51;
    } else {
     $209 = $6;
     $210 = ((($209)) + 44276|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + -1)|0;
     HEAP32[$210>>2] = $212;
     label = 44;
    }
    break;
   }
   case 56: {
    label = 0;
    $230 = $11;
    $231 = $9;
    $232 = ($230|0)==($231|0);
    if ($232) {
     label = 57;
     break L8;
    }
    $236 = $11;
    $237 = ((($236)) + 1|0);
    $11 = $237;
    $238 = HEAP8[$236>>0]|0;
    $239 = $6;
    $240 = ((($239)) + 44264|0);
    $241 = $6;
    $242 = ((($241)) + 44276|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($240) + ($243)|0);
    HEAP8[$244>>0] = $238;
    $245 = $6;
    $246 = ((($245)) + 44276|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + 1)|0;
    HEAP32[$246>>2] = $248;
    label = 55;
    break;
   }
   case 64: {
    label = 0;
    $264 = $11;
    $265 = $9;
    $266 = ($264|0)==($265|0);
    if ($266) {
     label = 65;
     break L8;
    }
    $270 = $11;
    $271 = ((($270)) + 1|0);
    $11 = $271;
    $272 = HEAP8[$270>>0]|0;
    $273 = $272&255;
    $274 = $6;
    $275 = ((($274)) + 44236|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $273 << $276;
    $278 = $6;
    $279 = ((($278)) + 44232|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + ($277))|0;
    HEAP32[$279>>2] = $281;
    $282 = $6;
    $283 = ((($282)) + 44236|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + 8)|0;
    HEAP32[$283>>2] = $285;
    label = 63;
    break;
   }
   case 73: {
    label = 0;
    $365 = $11;
    $366 = $9;
    $367 = ($365|0)==($366|0);
    if ($367) {
     label = 74;
     break L8;
    }
    $371 = $11;
    $372 = ((($371)) + 1|0);
    $11 = $372;
    $373 = HEAP8[$371>>0]|0;
    $374 = $373&255;
    $375 = $6;
    $376 = ((($375)) + 44236|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = $374 << $377;
    $379 = $6;
    $380 = ((($379)) + 44232|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = (($381) + ($378))|0;
    HEAP32[$380>>2] = $382;
    $383 = $6;
    $384 = ((($383)) + 44236|0);
    $385 = HEAP32[$384>>2]|0;
    $386 = (($385) + 8)|0;
    HEAP32[$384>>2] = $386;
    label = 72;
    break;
   }
   case 86: {
    label = 0;
    $449 = $11;
    $450 = $9;
    $451 = ($449|0)==($450|0);
    if ($451) {
     label = 87;
     break L8;
    }
    $455 = $11;
    $456 = ((($455)) + 1|0);
    $11 = $456;
    $457 = HEAP8[$455>>0]|0;
    $458 = $457&255;
    $459 = $6;
    $460 = ((($459)) + 44236|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $458 << $461;
    $463 = $6;
    $464 = ((($463)) + 44232|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = (($465) + ($462))|0;
    HEAP32[$464>>2] = $466;
    $467 = $6;
    $468 = ((($467)) + 44236|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = (($469) + 8)|0;
    HEAP32[$468>>2] = $470;
    label = 85;
    break;
   }
   case 125: {
    label = 0;
    $742 = $11;
    $743 = $9;
    $744 = ($742|0)==($743|0);
    if ($744) {
     label = 126;
     break L8;
    }
    $748 = $11;
    $749 = ((($748)) + 1|0);
    $11 = $749;
    $750 = HEAP8[$748>>0]|0;
    $751 = $750&255;
    $752 = $6;
    $753 = ((($752)) + 44236|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = $751 << $754;
    $756 = $6;
    $757 = ((($756)) + 44232|0);
    $758 = HEAP32[$757>>2]|0;
    $759 = (($758) + ($755))|0;
    HEAP32[$757>>2] = $759;
    $760 = $6;
    $761 = ((($760)) + 44236|0);
    $762 = HEAP32[$761>>2]|0;
    $763 = (($762) + 8)|0;
    HEAP32[$761>>2] = $763;
    label = 124;
    break;
   }
   case 134: {
    label = 0;
    $806 = $11;
    $807 = $9;
    $808 = ($806|0)==($807|0);
    if ($808) {
     label = 135;
     break L8;
    }
    $812 = $11;
    $813 = ((($812)) + 1|0);
    $11 = $813;
    $814 = HEAP8[$812>>0]|0;
    $815 = $814&255;
    $816 = $6;
    $817 = ((($816)) + 44236|0);
    $818 = HEAP32[$817>>2]|0;
    $819 = $815 << $818;
    $820 = $6;
    $821 = ((($820)) + 44232|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = (($822) + ($819))|0;
    HEAP32[$821>>2] = $823;
    $824 = $6;
    $825 = ((($824)) + 44236|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = (($826) + 8)|0;
    HEAP32[$825>>2] = $827;
    label = 133;
    break;
   }
   case 147: {
    label = 0;
    $944 = $11;
    $945 = $9;
    $946 = ($944|0)==($945|0);
    if ($946) {
     label = 148;
     break L8;
    }
    $950 = $11;
    $951 = ((($950)) + 1|0);
    $11 = $951;
    $952 = HEAP8[$950>>0]|0;
    $953 = $952&255;
    $954 = $6;
    $955 = ((($954)) + 44236|0);
    $956 = HEAP32[$955>>2]|0;
    $957 = $953 << $956;
    $958 = $6;
    $959 = ((($958)) + 44232|0);
    $960 = HEAP32[$959>>2]|0;
    $961 = (($960) + ($957))|0;
    HEAP32[$959>>2] = $961;
    $962 = $6;
    $963 = ((($962)) + 44236|0);
    $964 = HEAP32[$963>>2]|0;
    $965 = (($964) + 8)|0;
    HEAP32[$963>>2] = $965;
    label = 146;
    break;
   }
   case 158: {
    label = 0;
    $1025 = $11;
    $1026 = $9;
    $1027 = ($1025|0)==($1026|0);
    if ($1027) {
     label = 159;
     break L8;
    }
    $1031 = $11;
    $1032 = ((($1031)) + 1|0);
    $11 = $1032;
    $1033 = HEAP8[$1031>>0]|0;
    $1034 = $1033&255;
    $1035 = $6;
    $1036 = ((($1035)) + 44236|0);
    $1037 = HEAP32[$1036>>2]|0;
    $1038 = $1034 << $1037;
    $1039 = $6;
    $1040 = ((($1039)) + 44232|0);
    $1041 = HEAP32[$1040>>2]|0;
    $1042 = (($1041) + ($1038))|0;
    HEAP32[$1040>>2] = $1042;
    $1043 = $6;
    $1044 = ((($1043)) + 44236|0);
    $$sink6 = 8;$$sink7 = $1044;
    label = 157;
    break;
   }
   case 171: {
    label = 0;
    $1176 = $11;
    $1177 = $9;
    $1178 = ($1176|0)==($1177|0);
    if ($1178) {
     label = 172;
     break L8;
    }
    $1182 = $11;
    $1183 = ((($1182)) + 1|0);
    $11 = $1183;
    $1184 = HEAP8[$1182>>0]|0;
    $1185 = $1184&255;
    $1186 = $6;
    $1187 = ((($1186)) + 44236|0);
    $1188 = HEAP32[$1187>>2]|0;
    $1189 = $1185 << $1188;
    $1190 = $6;
    $1191 = ((($1190)) + 44232|0);
    $1192 = HEAP32[$1191>>2]|0;
    $1193 = (($1192) + ($1189))|0;
    HEAP32[$1191>>2] = $1193;
    $1194 = $6;
    $1195 = ((($1194)) + 44236|0);
    $1196 = HEAP32[$1195>>2]|0;
    $1197 = (($1196) + 8)|0;
    HEAP32[$1195>>2] = $1197;
    label = 170;
    break;
   }
   case 182: {
    label = 0;
    $1287 = $12;
    $1288 = $10;
    $1289 = ($1287|0)==($1288|0);
    $1290 = $6;
    if ($1289) {
     $$sink = 9;$$sink2 = $1290;
     break L8;
    }
    $1291 = ((($1290)) + 33640|0);
    $1292 = HEAP32[$1291>>2]|0;
    $1293 = ((($1292)) + 1|0);
    HEAP32[$1291>>2] = $1293;
    $1294 = HEAP8[$1292>>0]|0;
    $1295 = $1294&255;
    $1296 = $6;
    $1297 = ((($1296)) + 44240|0);
    HEAP32[$1297>>2] = $1295;
    $1298 = $6;
    $1299 = ((($1298)) + 44240|0);
    $1300 = HEAP32[$1299>>2]|0;
    $1301 = $1300&255;
    $1302 = $6;
    $1303 = ((($1302)) + 33636|0);
    $1304 = HEAP32[$1303>>2]|0;
    $1305 = ((($1304)) + 1|0);
    HEAP32[$1303>>2] = $1305;
    HEAP8[$1304>>0] = $1301;
    $1306 = $6;
    $1307 = ((($1306)) + 44240|0);
    $1308 = HEAP32[$1307>>2]|0;
    $1309 = $1308&255;
    $1310 = $12;
    $1311 = ((($1310)) + 1|0);
    $12 = $1311;
    HEAP8[$1310>>0] = $1309;
    $1312 = $6;
    $1313 = ((($1312)) + 44244|0);
    $$sink11 = -1;$$sink12 = $1313;
    label = 181;
    break;
   }
   case 185: {
    label = 0;
    $1315 = $12;
    $1316 = $10;
    $1317 = ($1315|0)==($1316|0);
    $1318 = $6;
    if ($1317) {
     $$sink = 10;$$sink2 = $1318;
     break L8;
    }
    $1319 = ((($1318)) + 44240|0);
    $1320 = HEAP32[$1319>>2]|0;
    $1321 = $1320&255;
    $1322 = $6;
    $1323 = ((($1322)) + 33636|0);
    $1324 = HEAP32[$1323>>2]|0;
    $1325 = ((($1324)) + 1|0);
    HEAP32[$1323>>2] = $1325;
    HEAP8[$1324>>0] = $1321;
    $1326 = $6;
    $1327 = ((($1326)) + 44240|0);
    $1328 = HEAP32[$1327>>2]|0;
    $1329 = $1328&255;
    $1330 = $12;
    $1331 = ((($1330)) + 1|0);
    $12 = $1331;
    HEAP8[$1330>>0] = $1329;
    $1332 = $6;
    $1333 = ((($1332)) + 33644|0);
    $1334 = HEAP32[$1333>>2]|0;
    $1335 = (($1334) + 1)|0;
    HEAP32[$1333>>2] = $1335;
    label = 188;
    break;
   }
   case 192: {
    label = 0;
    $1402 = $11;
    $1403 = $9;
    $1404 = ($1402|0)==($1403|0);
    if ($1404) {
     label = 193;
     break L8;
    }
    $1408 = $11;
    $1409 = ((($1408)) + 1|0);
    $11 = $1409;
    $1410 = HEAP8[$1408>>0]|0;
    $1411 = $1410&255;
    $1412 = $6;
    $1413 = ((($1412)) + 44236|0);
    $1414 = HEAP32[$1413>>2]|0;
    $1415 = $1411 << $1414;
    $1416 = $6;
    $1417 = ((($1416)) + 44232|0);
    $1418 = HEAP32[$1417>>2]|0;
    $1419 = (($1418) + ($1415))|0;
    HEAP32[$1417>>2] = $1419;
    $1420 = $6;
    $1421 = ((($1420)) + 44236|0);
    $1422 = HEAP32[$1421>>2]|0;
    $1423 = (($1422) + 8)|0;
    HEAP32[$1421>>2] = $1423;
    label = 191;
    break;
   }
   case 201: {
    label = 0;
    $1451 = $11;
    $1452 = $9;
    $1453 = ($1451|0)==($1452|0);
    if ($1453) {
     label = 202;
     break L8;
    }
    $1457 = $11;
    $1458 = ((($1457)) + 1|0);
    $11 = $1458;
    $1459 = HEAP8[$1457>>0]|0;
    $1460 = $6;
    $1461 = ((($1460)) + 44264|0);
    $1462 = $6;
    $1463 = ((($1462)) + 44276|0);
    $1464 = HEAP32[$1463>>2]|0;
    $1465 = (($1461) + ($1464)|0);
    HEAP8[$1465>>0] = $1459;
    $1466 = $6;
    $1467 = ((($1466)) + 44276|0);
    $1468 = HEAP32[$1467>>2]|0;
    $1469 = (($1468) + 1)|0;
    HEAP32[$1467>>2] = $1469;
    label = 200;
    break;
   }
   case 208: {
    label = 0;
    $1509 = $6;
    $$sink = 0;$$sink2 = $1509;
    break L8;
    break;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $88 = $6;
   $89 = ((($88)) + 44276|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90>>>0)<(2);
   if ($91) {
    label = 19;
    continue;
   }
   $111 = $6;
   $112 = ((($111)) + 44264|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = $6;
   $116 = ((($115)) + 44264|0);
   $117 = ((($116)) + 1|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 << 8;
   $121 = $114 | $120;
   $122 = $6;
   $123 = ((($122)) + 44276|0);
   HEAP32[$123>>2] = $121;
   label = 25;
  }
  if ((label|0) == 25) {
   label = 0;
   $124 = $6;
   $125 = ((($124)) + 44276|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126>>>0)>(0);
   if ($127) {
    label = 26;
    continue;
   } else {
    label = 31;
   }
  }
  if ((label|0) == 31) {
   label = 0;
   $143 = $6;
   $144 = ((($143)) + 44264|0);
   $145 = ((($144)) + 3|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = $147 & 8;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $6;
    $151 = ((($150)) + 44276|0);
    HEAP32[$151>>2] = 4095;
    label = 33;
   } else {
    label = 42;
   }
  }
  if ((label|0) == 33) {
   label = 0;
   $152 = $6;
   $153 = ((($152)) + 44276|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154>>>0)>(0);
   if ($155) {
    label = 34;
    continue;
   } else {
    label = 40;
   }
  }
  if ((label|0) == 40) {
   label = 0;
   $176 = $6;
   $177 = ((($176)) + 44276|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(0);
   if ($179) {
    label = 41;
    break;
   } else {
    label = 42;
   }
  }
  if ((label|0) == 42) {
   label = 0;
   $180 = $6;
   $181 = ((($180)) + 44264|0);
   $182 = ((($181)) + 3|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $184 & 16;
   $186 = ($185|0)!=(0);
   if ($186) {
    $187 = $6;
    $188 = ((($187)) + 44276|0);
    HEAP32[$188>>2] = 65535;
    label = 44;
   } else {
    label = 53;
   }
  }
  if ((label|0) == 44) {
   label = 0;
   $189 = $6;
   $190 = ((($189)) + 44276|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($191>>>0)>(0);
   if ($192) {
    label = 45;
    continue;
   } else {
    label = 51;
   }
  }
  if ((label|0) == 51) {
   label = 0;
   $213 = $6;
   $214 = ((($213)) + 44276|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ($215|0)==(0);
   if ($216) {
    label = 52;
    break;
   } else {
    label = 53;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $217 = $6;
   $218 = ((($217)) + 44264|0);
   $219 = ((($218)) + 3|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = $221 & 2;
   $223 = ($222|0)!=(0);
   if ($223) {
    $224 = $6;
    $225 = ((($224)) + 44276|0);
    HEAP32[$225>>2] = 0;
    label = 55;
   } else {
    label = 61;
   }
  }
  if ((label|0) == 55) {
   label = 0;
   $226 = $6;
   $227 = ((($226)) + 44276|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ($228>>>0)<(2);
   if ($229) {
    label = 56;
    continue;
   } else {
    label = 61;
   }
  }
  if ((label|0) == 61) {
   label = 0;
   $249 = $6;
   $250 = ((($249)) + 44232|0);
   HEAP32[$250>>2] = 0;
   $251 = $6;
   $252 = ((($251)) + 44236|0);
   HEAP32[$252>>2] = 0;
   $253 = $6;
   $254 = ((($253)) + 33652|0);
   HEAP32[$254>>2] = 0;
   label = 62;
  }
  L81: while(1) {
   L82:    switch (label|0) {
    case 62: {
     label = 0;
     $255 = $6;
     $256 = ((($255)) + 33652|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $257 & 1;
     $259 = ($258|0)==(0);
     if ($259) {
      label = 63;
      continue L81;
     }
     $1378 = $6;
     $1379 = ((($1378)) + 44236|0);
     $1380 = HEAP32[$1379>>2]|0;
     $1381 = $1380 & 7;
     $1382 = $6;
     $1383 = ((($1382)) + 44252|0);
     HEAP32[$1383>>2] = $1381;
     $1384 = $6;
     $1385 = ((($1384)) + 44252|0);
     $1386 = HEAP32[$1385>>2]|0;
     $1387 = $6;
     $1388 = ((($1387)) + 44232|0);
     $1389 = HEAP32[$1388>>2]|0;
     $1390 = $1389 >>> $1386;
     HEAP32[$1388>>2] = $1390;
     $1391 = $6;
     $1392 = ((($1391)) + 44252|0);
     $1393 = HEAP32[$1392>>2]|0;
     $1394 = $6;
     $1395 = ((($1394)) + 44236|0);
     $1396 = HEAP32[$1395>>2]|0;
     $1397 = (($1396) - ($1393))|0;
     HEAP32[$1395>>2] = $1397;
     label = 191;
     continue L81;
     break;
    }
    case 63: {
     label = 0;
     $260 = $6;
     $261 = ((($260)) + 44236|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ($262>>>0)<=(24);
     if ($263) {
      label = 64;
      continue L8;
     }
     $286 = $6;
     $287 = ((($286)) + 44232|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $288 & 7;
     $290 = $6;
     $291 = ((($290)) + 33652|0);
     HEAP32[$291>>2] = $289;
     $292 = $6;
     $293 = ((($292)) + 44232|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $294 >>> 3;
     HEAP32[$293>>2] = $295;
     $296 = $6;
     $297 = ((($296)) + 44236|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = (($298) - 3)|0;
     HEAP32[$297>>2] = $299;
     $300 = $6;
     $301 = ((($300)) + 33652|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $302 & 6;
     $304 = ($303|0)==(4);
     $305 = $6;
     if ($304) {
      $306 = ((($305)) + 44232|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = $307 & 31;
      $309 = (($308) + 257)|0;
      $310 = $6;
      $311 = ((($310)) + 44216|0);
      HEAP32[$311>>2] = $309;
      $312 = $6;
      $313 = ((($312)) + 44232|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $314 >>> 5;
      HEAP32[$313>>2] = $315;
      $316 = $6;
      $317 = ((($316)) + 44236|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = (($318) - 5)|0;
      HEAP32[$317>>2] = $319;
      $320 = $6;
      $321 = ((($320)) + 44232|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = $322 & 31;
      $324 = (($323) + 1)|0;
      $325 = $6;
      $326 = ((($325)) + 44220|0);
      HEAP32[$326>>2] = $324;
      $327 = $6;
      $328 = ((($327)) + 44232|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = $329 >>> 5;
      HEAP32[$328>>2] = $330;
      $331 = $6;
      $332 = ((($331)) + 44236|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = (($333) - 5)|0;
      HEAP32[$332>>2] = $334;
      $335 = $6;
      $336 = ((($335)) + 44232|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $337 & 15;
      $339 = (($338) + 4)|0;
      $340 = $6;
      $341 = ((($340)) + 44224|0);
      HEAP32[$341>>2] = $339;
      $342 = $6;
      $343 = ((($342)) + 44232|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = $344 >>> 4;
      HEAP32[$343>>2] = $345;
      $346 = $6;
      $347 = ((($346)) + 44236|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = (($348) - 4)|0;
      HEAP32[$347>>2] = $349;
      $350 = $6;
      $351 = ((($350)) + 43896|0);
      ;HEAP32[$351>>2]=538976288|0;HEAP32[$351+4>>2]=538976288|0;HEAP32[$351+8>>2]=538976288|0;HEAP32[$351+12>>2]=538976288|0;HEAP16[$351+16>>1]=8224|0;HEAP8[$351+18>>0]=32|0;
      $352 = $6;
      $353 = ((($352)) + 44244|0);
      HEAP32[$353>>2] = 0;
      label = 71;
      break;
     }
     $643 = ((($305)) + 33652|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = $644 & 6;
     $646 = ($645|0)==(2);
     $647 = $6;
     if ($646) {
      $648 = ((($647)) + 43896|0);
      _memset(($648|0),8,144)|0;
      $649 = $6;
      $650 = ((($649)) + 43896|0);
      $651 = ((($650)) + 144|0);
      dest=$651; stop=dest+112|0; do { HEAP8[dest>>0]=9|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $652 = $6;
      $653 = ((($652)) + 43896|0);
      $654 = ((($653)) + 256|0);
      dest=$654; stop=dest+24|0; do { HEAP8[dest>>0]=7|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $655 = $6;
      $656 = ((($655)) + 43896|0);
      $657 = ((($656)) + 280|0);
      ;HEAP8[$657>>0]=8|0;HEAP8[$657+1>>0]=8|0;HEAP8[$657+2>>0]=8|0;HEAP8[$657+3>>0]=8|0;HEAP8[$657+4>>0]=8|0;HEAP8[$657+5>>0]=8|0;HEAP8[$657+6>>0]=8|0;HEAP8[$657+7>>0]=8|0;
      $658 = $6;
      $659 = ((($658)) + 43896|0);
      $660 = ((($659)) + 288|0);
      dest=$660; stop=dest+32|0; do { HEAP8[dest>>0]=5|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $661 = $6;
      $662 = ((($661)) + 33656|0);
      $663 = $6;
      $664 = ((($663)) + 43896|0);
      $665 = (_table($662,2048,$664,288,10,1)|0);
      $666 = ($665|0)!=(0|0);
      if ($666) {
       label = 113;
       break L8;
      }
      $667 = $6;
      $668 = ((($667)) + 41848|0);
      $669 = $6;
      $670 = ((($669)) + 43896|0);
      $671 = ((($670)) + 288|0);
      $672 = (_table($668,512,$671,32,8,1)|0);
      $673 = ($672|0)!=(0|0);
      if ($673) {
       label = 115;
       break L8;
      }
      $674 = $6;
      $675 = ((($674)) + 33648|0);
      HEAP32[$675>>2] = -1;
      break;
     }
     $676 = ((($647)) + 33652|0);
     $677 = HEAP32[$676>>2]|0;
     $678 = $677 & 6;
     $679 = ($678|0)==(0);
     if (!($679)) {
      label = 131;
      break L8;
     }
     $680 = $6;
     $681 = ((($680)) + 44236|0);
     $682 = HEAP32[$681>>2]|0;
     $683 = $682 & 7;
     $684 = $6;
     $685 = ((($684)) + 44252|0);
     HEAP32[$685>>2] = $683;
     $686 = $6;
     $687 = ((($686)) + 44252|0);
     $688 = HEAP32[$687>>2]|0;
     $689 = $6;
     $690 = ((($689)) + 44232|0);
     $691 = HEAP32[$690>>2]|0;
     $692 = $691 >>> $688;
     HEAP32[$690>>2] = $692;
     $693 = $6;
     $694 = ((($693)) + 44252|0);
     $695 = HEAP32[$694>>2]|0;
     $696 = $6;
     $697 = ((($696)) + 44236|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = (($698) - ($695))|0;
     HEAP32[$697>>2] = $699;
     $700 = $6;
     $701 = ((($700)) + 44244|0);
     HEAP32[$701>>2] = 0;
     while(1) {
      $702 = $6;
      $703 = ((($702)) + 44244|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = ($704>>>0)<(256);
      if (!($705)) {
       label = 124;
       continue L81;
      }
      $706 = $6;
      $707 = ((($706)) + 44244|0);
      $708 = HEAP32[$707>>2]|0;
      $709 = $708 << 8;
      $710 = (($709) + 8)|0;
      $711 = $6;
      $712 = ((($711)) + 44240|0);
      HEAP32[$712>>2] = $710;
      $713 = $6;
      $714 = ((($713)) + 44244|0);
      $715 = HEAP32[$714>>2]|0;
      $716 = $6;
      $717 = ((($716)) + 44248|0);
      HEAP32[$717>>2] = $715;
      while(1) {
       $718 = $6;
       $719 = ((($718)) + 44248|0);
       $720 = HEAP32[$719>>2]|0;
       $721 = ($720>>>0)<(1024);
       $722 = $6;
       if (!($721)) {
        break;
       }
       $723 = ((($722)) + 44240|0);
       $724 = HEAP32[$723>>2]|0;
       $725 = $6;
       $726 = ((($725)) + 33656|0);
       $727 = $6;
       $728 = ((($727)) + 44248|0);
       $729 = HEAP32[$728>>2]|0;
       $730 = (($726) + ($729<<2)|0);
       HEAP32[$730>>2] = $724;
       $731 = $6;
       $732 = ((($731)) + 44248|0);
       $733 = HEAP32[$732>>2]|0;
       $734 = (($733) + 256)|0;
       HEAP32[$732>>2] = $734;
      }
      $735 = ((($722)) + 44244|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = (($736) + 1)|0;
      HEAP32[$735>>2] = $737;
     }
     break;
    }
    case 72: {
     label = 0;
     $361 = $6;
     $362 = ((($361)) + 44236|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ($363>>>0)<=(24);
     if ($364) {
      label = 73;
      continue L8;
     }
     $387 = $6;
     $388 = ((($387)) + 44232|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = $389 & 7;
     $391 = $6;
     $392 = ((($391)) + 44228|0);
     HEAP32[$392>>2] = $390;
     $393 = $6;
     $394 = ((($393)) + 44232|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = $395 >>> 3;
     HEAP32[$394>>2] = $396;
     $397 = $6;
     $398 = ((($397)) + 44236|0);
     $399 = HEAP32[$398>>2]|0;
     $400 = (($399) - 3)|0;
     HEAP32[$398>>2] = $400;
     $401 = $6;
     $402 = ((($401)) + 44228|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ($403|0)!=(0);
     if ($404) {
      $405 = $6;
      $406 = ((($405)) + 44228|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = $407&255;
      $409 = $6;
      $410 = ((($409)) + 43896|0);
      $411 = $6;
      $412 = ((($411)) + 44244|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = (14006 + ($413)|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415&255;
      $417 = (($410) + ($416)|0);
      HEAP8[$417>>0] = $408;
     }
     $418 = $6;
     $419 = ((($418)) + 44244|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = (($420) + 1)|0;
     HEAP32[$419>>2] = $421;
     label = 71;
     break;
    }
    case 85: {
     label = 0;
     $445 = $6;
     $446 = ((($445)) + 44236|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($447>>>0)<=(24);
     if ($448) {
      label = 86;
      continue L8;
     }
     $471 = $6;
     $472 = ((($471)) + 33656|0);
     $473 = $6;
     $474 = ((($473)) + 44232|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = $475 & 127;
     $477 = (($472) + ($476<<2)|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = $6;
     $480 = ((($479)) + 44240|0);
     HEAP32[$480>>2] = $478;
     $481 = $6;
     $482 = ((($481)) + 44240|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = $483 & 255;
     $485 = $6;
     $486 = ((($485)) + 44252|0);
     HEAP32[$486>>2] = $484;
     $487 = $6;
     $488 = ((($487)) + 44252|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = $6;
     $491 = ((($490)) + 44232|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = $492 >>> $489;
     HEAP32[$491>>2] = $493;
     $494 = $6;
     $495 = ((($494)) + 44252|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = $6;
     $498 = ((($497)) + 44236|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = (($499) - ($496))|0;
     HEAP32[$498>>2] = $500;
     $501 = $6;
     $502 = ((($501)) + 44240|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = $503 >>> 8;
     HEAP32[$502>>2] = $504;
     $505 = $6;
     $506 = ((($505)) + 44240|0);
     $507 = HEAP32[$506>>2]|0;
     switch ($507|0) {
     case 18:  {
      $508 = $6;
      $509 = ((($508)) + 44232|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = $510 & 127;
      $512 = (($511) + 11)|0;
      $513 = $6;
      $514 = ((($513)) + 44248|0);
      HEAP32[$514>>2] = $512;
      $515 = $6;
      $516 = ((($515)) + 44232|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = $517 >>> 7;
      HEAP32[$516>>2] = $518;
      $519 = $6;
      $520 = ((($519)) + 44236|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = (($521) - 7)|0;
      HEAP32[$520>>2] = $522;
      $523 = $6;
      $524 = ((($523)) + 44228|0);
      HEAP32[$524>>2] = 0;
      break;
     }
     case 17:  {
      $525 = $6;
      $526 = ((($525)) + 44232|0);
      $527 = HEAP32[$526>>2]|0;
      $528 = $527 & 7;
      $529 = (($528) + 3)|0;
      $530 = $6;
      $531 = ((($530)) + 44248|0);
      HEAP32[$531>>2] = $529;
      $532 = $6;
      $533 = ((($532)) + 44232|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = $534 >>> 3;
      HEAP32[$533>>2] = $535;
      $536 = $6;
      $537 = ((($536)) + 44236|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = (($538) - 3)|0;
      HEAP32[$537>>2] = $539;
      $540 = $6;
      $541 = ((($540)) + 44228|0);
      HEAP32[$541>>2] = 0;
      break;
     }
     case 16:  {
      $542 = $6;
      $543 = ((($542)) + 44232|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = $544 & 3;
      $546 = (($545) + 3)|0;
      $547 = $6;
      $548 = ((($547)) + 44248|0);
      HEAP32[$548>>2] = $546;
      $549 = $6;
      $550 = ((($549)) + 44232|0);
      $551 = HEAP32[$550>>2]|0;
      $552 = $551 >>> 2;
      HEAP32[$550>>2] = $552;
      $553 = $6;
      $554 = ((($553)) + 44236|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = (($555) - 2)|0;
      HEAP32[$554>>2] = $556;
      break;
     }
     default: {
      $557 = $6;
      $558 = ((($557)) + 44248|0);
      HEAP32[$558>>2] = 1;
      $559 = $6;
      $560 = ((($559)) + 44240|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = $6;
      $563 = ((($562)) + 44228|0);
      HEAP32[$563>>2] = $561;
     }
     }
     $564 = $6;
     $565 = ((($564)) + 44228|0);
     $566 = HEAP32[$565>>2]|0;
     $567 = ($566>>>0)>(15);
     if ($567) {
      label = 97;
      break L8;
     }
     $568 = $6;
     $569 = ((($568)) + 44244|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = $6;
     $572 = ((($571)) + 44248|0);
     $573 = HEAP32[$572>>2]|0;
     $574 = (($570) + ($573))|0;
     $575 = $6;
     $576 = ((($575)) + 44216|0);
     $577 = HEAP32[$576>>2]|0;
     $578 = $6;
     $579 = ((($578)) + 44220|0);
     $580 = HEAP32[$579>>2]|0;
     $581 = (($577) + ($580))|0;
     $582 = ($574>>>0)>($581>>>0);
     if ($582) {
      label = 99;
      break L8;
     }
     while(1) {
      $583 = $6;
      $584 = ((($583)) + 44248|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = ($585>>>0)>(0);
      if (!($586)) {
       label = 84;
       break L82;
      }
      $587 = $6;
      $588 = ((($587)) + 44228|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ($589|0)!=(0);
      if ($590) {
       $591 = $6;
       $592 = ((($591)) + 44228|0);
       $593 = HEAP32[$592>>2]|0;
       $594 = $593&255;
       $595 = $6;
       $596 = ((($595)) + 43896|0);
       $597 = $6;
       $598 = ((($597)) + 44244|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = (($596) + ($599)|0);
       HEAP8[$600>>0] = $594;
      }
      $601 = $6;
      $602 = ((($601)) + 44244|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = (($603) + 1)|0;
      HEAP32[$602>>2] = $604;
      $605 = $6;
      $606 = ((($605)) + 44248|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = (($607) + -1)|0;
      HEAP32[$606>>2] = $608;
     }
     break;
    }
    case 124: {
     label = 0;
     $738 = $6;
     $739 = ((($738)) + 44236|0);
     $740 = HEAP32[$739>>2]|0;
     $741 = ($740>>>0)<=(24);
     if ($741) {
      label = 125;
      continue L8;
     }
     $764 = $6;
     $765 = ((($764)) + 44232|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = $766 & 65535;
     $768 = $6;
     $769 = ((($768)) + 44240|0);
     HEAP32[$769>>2] = $767;
     $770 = $6;
     $771 = ((($770)) + 44232|0);
     $772 = HEAP32[$771>>2]|0;
     $773 = $772 >>> 16;
     HEAP32[$771>>2] = $773;
     $774 = $6;
     $775 = ((($774)) + 44236|0);
     $776 = HEAP32[$775>>2]|0;
     $777 = (($776) - 16)|0;
     HEAP32[$775>>2] = $777;
     $778 = $6;
     $779 = ((($778)) + 44232|0);
     $780 = HEAP32[$779>>2]|0;
     $781 = $780 >>> 16;
     HEAP32[$779>>2] = $781;
     $782 = $6;
     $783 = ((($782)) + 44236|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = (($784) - 16)|0;
     HEAP32[$783>>2] = $785;
     $786 = $6;
     $787 = ((($786)) + 33644|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = $6;
     $790 = ((($789)) + 44240|0);
     $791 = HEAP32[$790>>2]|0;
     $792 = (($788) + ($791))|0;
     $793 = $6;
     $794 = ((($793)) + 33648|0);
     HEAP32[$794>>2] = $792;
     break;
    }
    case 133: {
     label = 0;
     $802 = $6;
     $803 = ((($802)) + 44236|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = ($804>>>0)<=(24);
     if ($805) {
      label = 134;
      continue L8;
     }
     $828 = $6;
     $829 = ((($828)) + 33656|0);
     $830 = $6;
     $831 = ((($830)) + 44232|0);
     $832 = HEAP32[$831>>2]|0;
     $833 = $832 & 1023;
     $834 = (($829) + ($833<<2)|0);
     $835 = HEAP32[$834>>2]|0;
     $836 = $6;
     $837 = ((($836)) + 44240|0);
     HEAP32[$837>>2] = $835;
     $838 = $6;
     $839 = ((($838)) + 44240|0);
     $840 = HEAP32[$839>>2]|0;
     $841 = ($840>>>0)>=(2147483648);
     if ($841) {
      $842 = $6;
      $843 = ((($842)) + 33656|0);
      $844 = $6;
      $845 = ((($844)) + 44240|0);
      $846 = HEAP32[$845>>2]|0;
      $847 = $6;
      $848 = ((($847)) + 44232|0);
      $849 = HEAP32[$848>>2]|0;
      $850 = $849 >>> 10;
      $851 = $850 & 3;
      $852 = (($846) + ($851))|0;
      $853 = (($852) - -2147483648)|0;
      $854 = (($843) + ($853<<2)|0);
      $855 = HEAP32[$854>>2]|0;
      $856 = $6;
      $857 = ((($856)) + 44240|0);
      HEAP32[$857>>2] = $855;
      $858 = $6;
      $859 = ((($858)) + 44240|0);
      $860 = HEAP32[$859>>2]|0;
      $861 = ($860>>>0)>=(2147483648);
      if ($861) {
       $862 = $6;
       $863 = ((($862)) + 33656|0);
       $864 = $6;
       $865 = ((($864)) + 44240|0);
       $866 = HEAP32[$865>>2]|0;
       $867 = $6;
       $868 = ((($867)) + 44232|0);
       $869 = HEAP32[$868>>2]|0;
       $870 = $869 >>> 12;
       $871 = $870 & 3;
       $872 = (($866) + ($871))|0;
       $873 = (($872) - -2147483648)|0;
       $874 = (($863) + ($873<<2)|0);
       $875 = HEAP32[$874>>2]|0;
       $876 = $6;
       $877 = ((($876)) + 44240|0);
       HEAP32[$877>>2] = $875;
       $878 = $6;
       $879 = ((($878)) + 44240|0);
       $880 = HEAP32[$879>>2]|0;
       $881 = ($880>>>0)>=(2147483648);
       if ($881) {
        $882 = $6;
        $883 = ((($882)) + 33656|0);
        $884 = $6;
        $885 = ((($884)) + 44240|0);
        $886 = HEAP32[$885>>2]|0;
        $887 = $6;
        $888 = ((($887)) + 44232|0);
        $889 = HEAP32[$888>>2]|0;
        $890 = $889 >>> 14;
        $891 = $890 & 3;
        $892 = (($886) + ($891))|0;
        $893 = (($892) - -2147483648)|0;
        $894 = (($883) + ($893<<2)|0);
        $895 = HEAP32[$894>>2]|0;
        $896 = $6;
        $897 = ((($896)) + 44240|0);
        HEAP32[$897>>2] = $895;
       }
      }
     }
     $898 = $6;
     $899 = ((($898)) + 44240|0);
     $900 = HEAP32[$899>>2]|0;
     $901 = $900 & 255;
     $902 = $6;
     $903 = ((($902)) + 44252|0);
     HEAP32[$903>>2] = $901;
     $904 = $6;
     $905 = ((($904)) + 44252|0);
     $906 = HEAP32[$905>>2]|0;
     $907 = $6;
     $908 = ((($907)) + 44232|0);
     $909 = HEAP32[$908>>2]|0;
     $910 = $909 >>> $906;
     HEAP32[$908>>2] = $910;
     $911 = $6;
     $912 = ((($911)) + 44252|0);
     $913 = HEAP32[$912>>2]|0;
     $914 = $6;
     $915 = ((($914)) + 44236|0);
     $916 = HEAP32[$915>>2]|0;
     $917 = (($916) - ($913))|0;
     HEAP32[$915>>2] = $917;
     $918 = $6;
     $919 = ((($918)) + 44240|0);
     $920 = HEAP32[$919>>2]|0;
     $921 = $920 >>> 8;
     HEAP32[$919>>2] = $921;
     $922 = $6;
     $923 = ((($922)) + 44240|0);
     $924 = HEAP32[$923>>2]|0;
     $925 = ($924>>>0)>(256);
     $926 = $6;
     $927 = ((($926)) + 44240|0);
     $928 = HEAP32[$927>>2]|0;
     if (!($925)) {
      $1314 = ($928>>>0)<(256);
      if ($1314) {
       label = 185;
       continue L8;
      }
      $1336 = $6;
      $1337 = ((($1336)) + 33644|0);
      $1338 = HEAP32[$1337>>2]|0;
      $1339 = $6;
      $1340 = ((($1339)) + 33648|0);
      HEAP32[$1340>>2] = $1338;
      label = 188;
      continue L81;
     }
     $929 = (($928) - 257)|0;
     $930 = $6;
     $931 = ((($930)) + 44244|0);
     HEAP32[$931>>2] = $929;
     $932 = $6;
     $933 = ((($932)) + 44244|0);
     $934 = HEAP32[$933>>2]|0;
     $935 = ($934>>>0)>=(8);
     if ($935) {
      $936 = $6;
      $937 = ((($936)) + 44244|0);
      $938 = HEAP32[$937>>2]|0;
      $939 = ($938>>>0)<(28);
      if ($939) {
       label = 146;
       continue L81;
      }
      $1011 = $6;
      $1012 = ((($1011)) + 44244|0);
      $1013 = HEAP32[$1012>>2]|0;
      $1014 = ($1013|0)==(28);
      if (!($1014)) {
       label = 155;
       break L8;
      }
      $1015 = $6;
      $1016 = ((($1015)) + 44244|0);
      HEAP32[$1016>>2] = 255;
      label = 156;
     } else {
      label = 156;
     }
     break;
    }
    case 146: {
     label = 0;
     $940 = $6;
     $941 = ((($940)) + 44236|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = ($942>>>0)<=(24);
     if ($943) {
      label = 147;
      continue L8;
     }
     $966 = $6;
     $967 = ((($966)) + 44244|0);
     $968 = HEAP32[$967>>2]|0;
     $969 = $968 >>> 2;
     $970 = (($969) - 1)|0;
     $971 = $6;
     $972 = ((($971)) + 44252|0);
     HEAP32[$972>>2] = $970;
     $973 = $6;
     $974 = ((($973)) + 44244|0);
     $975 = HEAP32[$974>>2]|0;
     $976 = $975 & 3;
     $977 = (4 + ($976))|0;
     $978 = $6;
     $979 = ((($978)) + 44252|0);
     $980 = HEAP32[$979>>2]|0;
     $981 = $977 << $980;
     $982 = $6;
     $983 = ((($982)) + 44244|0);
     HEAP32[$983>>2] = $981;
     $984 = $6;
     $985 = ((($984)) + 44232|0);
     $986 = HEAP32[$985>>2]|0;
     $987 = $6;
     $988 = ((($987)) + 44252|0);
     $989 = HEAP32[$988>>2]|0;
     $990 = 1 << $989;
     $991 = (($990) - 1)|0;
     $992 = $986 & $991;
     $993 = $6;
     $994 = ((($993)) + 44244|0);
     $995 = HEAP32[$994>>2]|0;
     $996 = (($995) + ($992))|0;
     HEAP32[$994>>2] = $996;
     $997 = $6;
     $998 = ((($997)) + 44252|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = $6;
     $1001 = ((($1000)) + 44232|0);
     $1002 = HEAP32[$1001>>2]|0;
     $1003 = $1002 >>> $999;
     HEAP32[$1001>>2] = $1003;
     $1004 = $6;
     $1005 = ((($1004)) + 44252|0);
     $1006 = HEAP32[$1005>>2]|0;
     $1007 = $6;
     $1008 = ((($1007)) + 44236|0);
     $1009 = HEAP32[$1008>>2]|0;
     $1010 = (($1009) - ($1006))|0;
     HEAP32[$1008>>2] = $1010;
     label = 156;
     break;
    }
    case 157: {
     label = 0;
     $1019 = HEAP32[$$sink7>>2]|0;
     $1020 = (($1019) + ($$sink6))|0;
     HEAP32[$$sink7>>2] = $1020;
     $1021 = $6;
     $1022 = ((($1021)) + 44236|0);
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = ($1023>>>0)<=(24);
     if ($1024) {
      label = 158;
      continue L8;
     }
     $1045 = $6;
     $1046 = ((($1045)) + 41848|0);
     $1047 = $6;
     $1048 = ((($1047)) + 44232|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = $1049 & 255;
     $1051 = (($1046) + ($1050<<2)|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = $6;
     $1054 = ((($1053)) + 44240|0);
     HEAP32[$1054>>2] = $1052;
     $1055 = $6;
     $1056 = ((($1055)) + 44240|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = ($1057>>>0)>=(2147483648);
     if ($1058) {
      $1059 = $6;
      $1060 = ((($1059)) + 41848|0);
      $1061 = $6;
      $1062 = ((($1061)) + 44240|0);
      $1063 = HEAP32[$1062>>2]|0;
      $1064 = $6;
      $1065 = ((($1064)) + 44232|0);
      $1066 = HEAP32[$1065>>2]|0;
      $1067 = $1066 >>> 8;
      $1068 = $1067 & 3;
      $1069 = (($1063) + ($1068))|0;
      $1070 = (($1069) - -2147483648)|0;
      $1071 = (($1060) + ($1070<<2)|0);
      $1072 = HEAP32[$1071>>2]|0;
      $1073 = $6;
      $1074 = ((($1073)) + 44240|0);
      HEAP32[$1074>>2] = $1072;
      $1075 = $6;
      $1076 = ((($1075)) + 44240|0);
      $1077 = HEAP32[$1076>>2]|0;
      $1078 = ($1077>>>0)>=(2147483648);
      if ($1078) {
       $1079 = $6;
       $1080 = ((($1079)) + 41848|0);
       $1081 = $6;
       $1082 = ((($1081)) + 44240|0);
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = $6;
       $1085 = ((($1084)) + 44232|0);
       $1086 = HEAP32[$1085>>2]|0;
       $1087 = $1086 >>> 10;
       $1088 = $1087 & 3;
       $1089 = (($1083) + ($1088))|0;
       $1090 = (($1089) - -2147483648)|0;
       $1091 = (($1080) + ($1090<<2)|0);
       $1092 = HEAP32[$1091>>2]|0;
       $1093 = $6;
       $1094 = ((($1093)) + 44240|0);
       HEAP32[$1094>>2] = $1092;
       $1095 = $6;
       $1096 = ((($1095)) + 44240|0);
       $1097 = HEAP32[$1096>>2]|0;
       $1098 = ($1097>>>0)>=(2147483648);
       if ($1098) {
        $1099 = $6;
        $1100 = ((($1099)) + 41848|0);
        $1101 = $6;
        $1102 = ((($1101)) + 44240|0);
        $1103 = HEAP32[$1102>>2]|0;
        $1104 = $6;
        $1105 = ((($1104)) + 44232|0);
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = $1106 >>> 12;
        $1108 = $1107 & 3;
        $1109 = (($1103) + ($1108))|0;
        $1110 = (($1109) - -2147483648)|0;
        $1111 = (($1100) + ($1110<<2)|0);
        $1112 = HEAP32[$1111>>2]|0;
        $1113 = $6;
        $1114 = ((($1113)) + 44240|0);
        HEAP32[$1114>>2] = $1112;
        $1115 = $6;
        $1116 = ((($1115)) + 44240|0);
        $1117 = HEAP32[$1116>>2]|0;
        $1118 = ($1117>>>0)>=(2147483648);
        if ($1118) {
         $1119 = $6;
         $1120 = ((($1119)) + 41848|0);
         $1121 = $6;
         $1122 = ((($1121)) + 44240|0);
         $1123 = HEAP32[$1122>>2]|0;
         $1124 = $6;
         $1125 = ((($1124)) + 44232|0);
         $1126 = HEAP32[$1125>>2]|0;
         $1127 = $1126 >>> 14;
         $1128 = $1127 & 3;
         $1129 = (($1123) + ($1128))|0;
         $1130 = (($1129) - -2147483648)|0;
         $1131 = (($1120) + ($1130<<2)|0);
         $1132 = HEAP32[$1131>>2]|0;
         $1133 = $6;
         $1134 = ((($1133)) + 44240|0);
         HEAP32[$1134>>2] = $1132;
        }
       }
      }
     }
     $1135 = $6;
     $1136 = ((($1135)) + 44240|0);
     $1137 = HEAP32[$1136>>2]|0;
     $1138 = $1137 & 255;
     $1139 = $6;
     $1140 = ((($1139)) + 44252|0);
     HEAP32[$1140>>2] = $1138;
     $1141 = $6;
     $1142 = ((($1141)) + 44252|0);
     $1143 = HEAP32[$1142>>2]|0;
     $1144 = $6;
     $1145 = ((($1144)) + 44232|0);
     $1146 = HEAP32[$1145>>2]|0;
     $1147 = $1146 >>> $1143;
     HEAP32[$1145>>2] = $1147;
     $1148 = $6;
     $1149 = ((($1148)) + 44252|0);
     $1150 = HEAP32[$1149>>2]|0;
     $1151 = $6;
     $1152 = ((($1151)) + 44236|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = (($1153) - ($1150))|0;
     HEAP32[$1152>>2] = $1154;
     $1155 = $6;
     $1156 = ((($1155)) + 44240|0);
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = $1157 >>> 8;
     HEAP32[$1156>>2] = $1158;
     $1159 = $6;
     $1160 = ((($1159)) + 44240|0);
     $1161 = HEAP32[$1160>>2]|0;
     $1162 = $6;
     $1163 = ((($1162)) + 44248|0);
     HEAP32[$1163>>2] = $1161;
     $1164 = $6;
     $1165 = ((($1164)) + 44248|0);
     $1166 = HEAP32[$1165>>2]|0;
     $1167 = ($1166>>>0)>=(4);
     if ($1167) {
      $1168 = $6;
      $1169 = ((($1168)) + 44248|0);
      $1170 = HEAP32[$1169>>2]|0;
      $1171 = ($1170>>>0)<(30);
      if ($1171) {
       label = 170;
       continue L81;
      } else {
       label = 177;
       break L8;
      }
     } else {
      label = 178;
     }
     break;
    }
    case 170: {
     label = 0;
     $1172 = $6;
     $1173 = ((($1172)) + 44236|0);
     $1174 = HEAP32[$1173>>2]|0;
     $1175 = ($1174>>>0)<=(24);
     if ($1175) {
      label = 171;
      continue L8;
     }
     $1198 = $6;
     $1199 = ((($1198)) + 44248|0);
     $1200 = HEAP32[$1199>>2]|0;
     $1201 = $1200 >>> 1;
     $1202 = (($1201) - 1)|0;
     $1203 = $6;
     $1204 = ((($1203)) + 44252|0);
     HEAP32[$1204>>2] = $1202;
     $1205 = $6;
     $1206 = ((($1205)) + 44248|0);
     $1207 = HEAP32[$1206>>2]|0;
     $1208 = $1207 & 1;
     $1209 = (2 + ($1208))|0;
     $1210 = $6;
     $1211 = ((($1210)) + 44252|0);
     $1212 = HEAP32[$1211>>2]|0;
     $1213 = $1209 << $1212;
     $1214 = $6;
     $1215 = ((($1214)) + 44248|0);
     HEAP32[$1215>>2] = $1213;
     $1216 = $6;
     $1217 = ((($1216)) + 44232|0);
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = $6;
     $1220 = ((($1219)) + 44252|0);
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = 1 << $1221;
     $1223 = (($1222) - 1)|0;
     $1224 = $1218 & $1223;
     $1225 = $6;
     $1226 = ((($1225)) + 44248|0);
     $1227 = HEAP32[$1226>>2]|0;
     $1228 = (($1227) + ($1224))|0;
     HEAP32[$1226>>2] = $1228;
     $1229 = $6;
     $1230 = ((($1229)) + 44252|0);
     $1231 = HEAP32[$1230>>2]|0;
     $1232 = $6;
     $1233 = ((($1232)) + 44232|0);
     $1234 = HEAP32[$1233>>2]|0;
     $1235 = $1234 >>> $1231;
     HEAP32[$1233>>2] = $1235;
     $1236 = $6;
     $1237 = ((($1236)) + 44252|0);
     $1238 = HEAP32[$1237>>2]|0;
     $1239 = $6;
     $1240 = ((($1239)) + 44236|0);
     $1241 = HEAP32[$1240>>2]|0;
     $1242 = (($1241) - ($1238))|0;
     HEAP32[$1240>>2] = $1242;
     label = 178;
     break;
    }
    case 181: {
     label = 0;
     $1281 = HEAP32[$$sink12>>2]|0;
     $1282 = (($1281) + ($$sink11))|0;
     HEAP32[$$sink12>>2] = $1282;
     $1283 = $6;
     $1284 = ((($1283)) + 44244|0);
     $1285 = HEAP32[$1284>>2]|0;
     $1286 = ($1285>>>0)>(0);
     if ($1286) {
      label = 182;
      continue L8;
     } else {
      label = 188;
      continue L81;
     }
     break;
    }
    case 188: {
     label = 0;
     $1341 = $6;
     $1342 = ((($1341)) + 33636|0);
     $1343 = HEAP32[$1342>>2]|0;
     $1344 = $6;
     $1345 = ((($1344)) + 4|0);
     $1346 = ((($1345)) + 32768|0);
     $1347 = ((($1346)) + 576|0);
     $1348 = ($1343>>>0)>=($1347>>>0);
     if ($1348) {
      $1349 = $6;
      $1350 = ((($1349)) + 44256|0);
      $1351 = $6;
      $1352 = ((($1351)) + 44260|0);
      $1353 = HEAP32[$1352>>2]|0;
      $1354 = $6;
      $1355 = ((($1354)) + 4|0);
      $1356 = ((($1355)) + 32768|0);
      $1357 = ((($1356)) + 288|0);
      $1358 = $6;
      $1359 = ((($1358)) + 44260|0);
      $1360 = HEAP32[$1359>>2]|0;
      $1361 = $1357;
      $1362 = $1360;
      $1363 = (($1361) - ($1362))|0;
      _crc_calc($1350,$1353,$1363);
      $1364 = $6;
      $1365 = ((($1364)) + 4|0);
      $1366 = $6;
      $1367 = ((($1366)) + 44260|0);
      HEAP32[$1367>>2] = $1365;
      $1368 = $6;
      $1369 = ((($1368)) + 4|0);
      $1370 = $6;
      $1371 = ((($1370)) + 4|0);
      $1372 = ((($1371)) + 32768|0);
      $1373 = ((($1372)) + 288|0);
      _memcpy(($1369|0),($1373|0),576)|0;
      $1374 = $6;
      $1375 = ((($1374)) + 33636|0);
      $1376 = HEAP32[$1375>>2]|0;
      $1377 = ((($1376)) + -33056|0);
      HEAP32[$1375>>2] = $1377;
     }
     break;
    }
    case 191: {
     label = 0;
     $1398 = $6;
     $1399 = ((($1398)) + 44236|0);
     $1400 = HEAP32[$1399>>2]|0;
     $1401 = ($1400>>>0)<=(24);
     if ($1401) {
      label = 192;
      continue L8;
     }
     $1424 = $6;
     $1425 = ((($1424)) + 44256|0);
     $1426 = $6;
     $1427 = ((($1426)) + 44260|0);
     $1428 = HEAP32[$1427>>2]|0;
     $1429 = $6;
     $1430 = ((($1429)) + 33636|0);
     $1431 = HEAP32[$1430>>2]|0;
     $1432 = $6;
     $1433 = ((($1432)) + 44260|0);
     $1434 = HEAP32[$1433>>2]|0;
     $1435 = $1431;
     $1436 = $1434;
     $1437 = (($1435) - ($1436))|0;
     _crc_calc($1425,$1428,$1437);
     $1438 = $6;
     $1439 = ((($1438)) + 44232|0);
     $1440 = HEAP32[$1439>>2]|0;
     $1441 = $6;
     $1442 = ((($1441)) + 44256|0);
     $1443 = HEAP32[$1442>>2]|0;
     $1444 = ($1440|0)!=($1443|0);
     if ($1444) {
      label = 198;
      break L8;
     }
     $1445 = $6;
     $1446 = ((($1445)) + 44276|0);
     HEAP32[$1446>>2] = 0;
     label = 200;
     continue L81;
     break;
    }
    case 200: {
     label = 0;
     $1447 = $6;
     $1448 = ((($1447)) + 44276|0);
     $1449 = HEAP32[$1448>>2]|0;
     $1450 = ($1449>>>0)<(4);
     if ($1450) {
      label = 201;
      continue L8;
     } else {
      break L81;
     }
     break;
    }
   }
   if ((label|0) == 71) {
    label = 0;
    $354 = $6;
    $355 = ((($354)) + 44244|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = $6;
    $358 = ((($357)) + 44224|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($356>>>0)<($359>>>0);
    if ($360) {
     label = 72;
     continue;
    }
    $422 = $6;
    $423 = ((($422)) + 33656|0);
    $424 = $6;
    $425 = ((($424)) + 43896|0);
    $426 = (_table($423,2048,$425,19,7,1)|0);
    $427 = ($426|0)!=(0|0);
    if ($427) {
     label = 82;
     break L8;
    }
    $428 = $6;
    $429 = ((($428)) + 43896|0);
    _memset(($429|0),32,320)|0;
    $430 = $6;
    $431 = ((($430)) + 44228|0);
    HEAP32[$431>>2] = 32;
    $432 = $6;
    $433 = ((($432)) + 44244|0);
    HEAP32[$433>>2] = 0;
    label = 84;
   }
   else if ((label|0) == 156) {
    label = 0;
    $1017 = $6;
    $1018 = ((($1017)) + 44244|0);
    $$sink6 = 3;$$sink7 = $1018;
    label = 157;
    continue;
   }
   else if ((label|0) == 178) {
    label = 0;
    $1243 = $6;
    $1244 = ((($1243)) + 44248|0);
    $1245 = HEAP32[$1244>>2]|0;
    $1246 = (($1245) + 1)|0;
    HEAP32[$1244>>2] = $1246;
    $1247 = $6;
    $1248 = ((($1247)) + 44248|0);
    $1249 = HEAP32[$1248>>2]|0;
    $1250 = $6;
    $1251 = ((($1250)) + 33644|0);
    $1252 = HEAP32[$1251>>2]|0;
    $1253 = ($1249>>>0)>($1252>>>0);
    if ($1253) {
     label = 179;
     break L8;
    }
    $1254 = $6;
    $1255 = ((($1254)) + 33636|0);
    $1256 = HEAP32[$1255>>2]|0;
    $1257 = $6;
    $1258 = ((($1257)) + 44248|0);
    $1259 = HEAP32[$1258>>2]|0;
    $1260 = (0 - ($1259))|0;
    $1261 = (($1256) + ($1260)|0);
    $1262 = $6;
    $1263 = ((($1262)) + 33636|0);
    $1264 = HEAP32[$1263>>2]|0;
    $1265 = $6;
    $1266 = ((($1265)) + 4|0);
    $1267 = $6;
    $1268 = ((($1267)) + 44248|0);
    $1269 = HEAP32[$1268>>2]|0;
    $1270 = (($1266) + ($1269)|0);
    $1271 = ($1264>>>0)<($1270>>>0);
    $1272 = $1271 ? 33056 : 0;
    $1273 = (($1261) + ($1272)|0);
    $1274 = $6;
    $1275 = ((($1274)) + 33640|0);
    HEAP32[$1275>>2] = $1273;
    $1276 = $6;
    $1277 = ((($1276)) + 44244|0);
    $1278 = HEAP32[$1277>>2]|0;
    $1279 = $6;
    $1280 = ((($1279)) + 33644|0);
    $$sink11 = $1278;$$sink12 = $1280;
    label = 181;
    continue;
   }
   if ((label|0) == 84) {
    label = 0;
    $434 = $6;
    $435 = ((($434)) + 44244|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = $6;
    $438 = ((($437)) + 44216|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $6;
    $441 = ((($440)) + 44220|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = (($439) + ($442))|0;
    $444 = ($436>>>0)<($443>>>0);
    if ($444) {
     label = 85;
     continue;
    }
    $609 = $6;
    $610 = ((($609)) + 44220|0);
    $611 = HEAP32[$610>>2]|0;
    $612 = ($611|0)==(1);
    if ($612) {
     $613 = $6;
     $614 = ((($613)) + 43896|0);
     $615 = $6;
     $616 = ((($615)) + 44216|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = (($614) + ($617)|0);
     HEAP8[$618>>0] = 0;
    }
    $619 = $6;
    $620 = ((($619)) + 33656|0);
    $621 = $6;
    $622 = ((($621)) + 43896|0);
    $623 = $6;
    $624 = ((($623)) + 44216|0);
    $625 = HEAP32[$624>>2]|0;
    $626 = (_table($620,2048,$622,$625,10,1)|0);
    $627 = ($626|0)!=(0|0);
    if ($627) {
     label = 107;
     break L8;
    }
    $628 = $6;
    $629 = ((($628)) + 41848|0);
    $630 = $6;
    $631 = ((($630)) + 43896|0);
    $632 = $6;
    $633 = ((($632)) + 44216|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = (($631) + ($634)|0);
    $636 = $6;
    $637 = ((($636)) + 44220|0);
    $638 = HEAP32[$637>>2]|0;
    $639 = (_table($629,512,$635,$638,8,1)|0);
    $640 = ($639|0)!=(0|0);
    if ($640) {
     label = 109;
     break L8;
    }
    $641 = $6;
    $642 = ((($641)) + 33648|0);
    HEAP32[$642>>2] = -1;
   }
   $795 = $6;
   $796 = ((($795)) + 33644|0);
   $797 = HEAP32[$796>>2]|0;
   $798 = $6;
   $799 = ((($798)) + 33648|0);
   $800 = HEAP32[$799>>2]|0;
   $801 = ($797>>>0)<($800>>>0);
   if ($801) {
    label = 133;
   } else {
    label = 62;
   }
  }
  $1470 = $6;
  $1471 = ((($1470)) + 44264|0);
  $1472 = HEAP8[$1471>>0]|0;
  $1473 = $1472&255;
  $1474 = $6;
  $1475 = ((($1474)) + 44264|0);
  $1476 = ((($1475)) + 1|0);
  $1477 = HEAP8[$1476>>0]|0;
  $1478 = $1477&255;
  $1479 = $1478 << 8;
  $1480 = $1473 | $1479;
  $1481 = $6;
  $1482 = ((($1481)) + 44264|0);
  $1483 = ((($1482)) + 2|0);
  $1484 = HEAP8[$1483>>0]|0;
  $1485 = $1484&255;
  $1486 = $1485 << 16;
  $1487 = $1480 | $1486;
  $1488 = $6;
  $1489 = ((($1488)) + 44264|0);
  $1490 = ((($1489)) + 3|0);
  $1491 = HEAP8[$1490>>0]|0;
  $1492 = $1491&255;
  $1493 = $1492 << 24;
  $1494 = $1487 | $1493;
  $1495 = $6;
  $1496 = ((($1495)) + 44232|0);
  HEAP32[$1496>>2] = $1494;
  $1497 = $6;
  $1498 = ((($1497)) + 33644|0);
  $1499 = HEAP32[$1498>>2]|0;
  $1500 = $6;
  $1501 = ((($1500)) + 44256|0);
  HEAP32[$1501>>2] = $1499;
  $1502 = $6;
  $1503 = ((($1502)) + 44232|0);
  $1504 = HEAP32[$1503>>2]|0;
  $1505 = $6;
  $1506 = ((($1505)) + 44256|0);
  $1507 = HEAP32[$1506>>2]|0;
  $1508 = ($1504|0)!=($1507|0);
  if ($1508) {
   label = 207;
   break;
  } else {
   label = 208;
  }
 }
 switch (label|0) {
  case 8: {
   $46 = $9;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = $6;
    $$sink = 13;$$sink2 = $48;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 15: {
   $5 = 13950;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 20: {
   $95 = $9;
   $96 = ($95|0)!=(0|0);
   if ($96) {
    $97 = $6;
    $$sink = 14;$$sink2 = $97;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 27: {
   $131 = $9;
   $132 = ($131|0)!=(0|0);
   if ($132) {
    $133 = $6;
    $$sink = 15;$$sink2 = $133;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 35: {
   $159 = $9;
   $160 = ($159|0)!=(0|0);
   if ($160) {
    $161 = $6;
    $$sink = 16;$$sink2 = $161;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 41: {
   $5 = 13975;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 46: {
   $196 = $9;
   $197 = ($196|0)!=(0|0);
   if ($197) {
    $198 = $6;
    $$sink = 17;$$sink2 = $198;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 52: {
   $5 = 13989;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 57: {
   $233 = $9;
   $234 = ($233|0)!=(0|0);
   if ($234) {
    $235 = $6;
    $$sink = 18;$$sink2 = $235;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 65: {
   $267 = $9;
   $268 = ($267|0)!=(0|0);
   if ($268) {
    $269 = $6;
    $$sink = 1;$$sink2 = $269;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 74: {
   $368 = $9;
   $369 = ($368|0)!=(0|0);
   if ($369) {
    $370 = $6;
    $$sink = 2;$$sink2 = $370;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 82: {
   $5 = 14025;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 87: {
   $452 = $9;
   $453 = ($452|0)!=(0|0);
   if ($453) {
    $454 = $6;
    $$sink = 3;$$sink2 = $454;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 97: {
   $5 = 14041;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 99: {
   $5 = 14055;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 107: {
   $5 = 14071;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 109: {
   $5 = 14090;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 113: {
   $5 = 14106;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 115: {
   $5 = 14136;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 126: {
   $745 = $9;
   $746 = ($745|0)!=(0|0);
   if ($746) {
    $747 = $6;
    $$sink = 4;$$sink2 = $747;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 131: {
   $5 = 14163;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 135: {
   $809 = $9;
   $810 = ($809|0)!=(0|0);
   if ($810) {
    $811 = $6;
    $$sink = 5;$$sink2 = $811;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 148: {
   $947 = $9;
   $948 = ($947|0)!=(0|0);
   if ($948) {
    $949 = $6;
    $$sink = 6;$$sink2 = $949;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 155: {
   $5 = 14178;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 159: {
   $1028 = $9;
   $1029 = ($1028|0)!=(0|0);
   if ($1029) {
    $1030 = $6;
    $$sink = 7;$$sink2 = $1030;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 172: {
   $1179 = $9;
   $1180 = ($1179|0)!=(0|0);
   if ($1180) {
    $1181 = $6;
    $$sink = 8;$$sink2 = $1181;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 177: {
   $5 = 14201;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 179: {
   $5 = 14225;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 193: {
   $1405 = $9;
   $1406 = ($1405|0)!=(0|0);
   if ($1406) {
    $1407 = $6;
    $$sink = 11;$$sink2 = $1407;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 198: {
   $5 = 14244;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 202: {
   $1454 = $9;
   $1455 = ($1454|0)!=(0|0);
   if ($1455) {
    $1456 = $6;
    $$sink = 12;$$sink2 = $1456;
    break;
   }
   $5 = 13938;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
  case 207: {
   $5 = 14257;
   $1514 = $5;
   STACKTOP = sp;return ($1514|0);
   break;
  }
 }
 HEAP32[$$sink2>>2] = $$sink;
 $1510 = $11;
 $1511 = $7;
 HEAP32[$1511>>2] = $1510;
 $1512 = $12;
 $1513 = $8;
 HEAP32[$1513>>2] = $1512;
 $5 = 0;
 $1514 = $5;
 STACKTOP = sp;return ($1514|0);
}
function _table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(800|0);
 $18 = sp + 36|0;
 $19 = sp + 216|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 1;
 $14 = 0;
 $29 = $11;
 $30 = 1 << $29;
 $15 = $30;
 _memset(($18|0),0,132)|0;
 $16 = 0;
 $17 = 0;
 while(1) {
  $31 = $17;
  $32 = $10;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $9;
  $35 = $17;
  $36 = (($34) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($18) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $17;
  $43 = (($42) + 1)|0;
  $17 = $43;
 }
 $17 = 0;
 while(1) {
  $44 = $17;
  $45 = ($44>>>0)<=(32);
  if (!($45)) {
   break;
  }
  $46 = $17;
  $47 = (($18) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $20 = $48;
  $49 = $16;
  $50 = $17;
  $51 = (($18) + ($50<<2)|0);
  HEAP32[$51>>2] = $49;
  $52 = $20;
  $53 = $16;
  $54 = (($53) + ($52))|0;
  $16 = $54;
  $55 = $17;
  $56 = (($55) + 1)|0;
  $17 = $56;
 }
 $17 = 0;
 while(1) {
  $57 = $17;
  $58 = $10;
  $59 = ($57>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
  $60 = $17;
  $61 = $60&65535;
  $62 = $9;
  $63 = $17;
  $64 = (($62) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = (($18) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$67>>2] = $69;
  $70 = (($19) + ($68<<1)|0);
  HEAP16[$70>>1] = $61;
  $71 = $17;
  $72 = (($71) + 1)|0;
  $17 = $72;
 }
 $16 = 0;
 $17 = 0;
 L13: while(1) {
  $73 = $17;
  $74 = ($73>>>0)<(32);
  if (!($74)) {
   label = 36;
   break;
  }
  while(1) {
   $75 = $16;
   $76 = $17;
   $77 = (($18) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($75>>>0)<($78>>>0);
   if (!($79)) {
    break;
   }
   $80 = $16;
   $81 = (($19) + ($80<<1)|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = $83 << 8;
   $85 = $17;
   $86 = (($84) + ($85))|0;
   $21 = $86;
   $22 = 0;
   $87 = $14;
   $23 = $87;
   $88 = $17;
   $24 = $88;
   $89 = $11;
   $25 = $89;
   while(1) {
    $90 = $24;
    $91 = $25;
    $92 = ($90>>>0)>($91>>>0);
    if (!($92)) {
     break;
    }
    $93 = $25;
    $94 = $24;
    $95 = (($94) - ($93))|0;
    $24 = $95;
    $96 = $12;
    $97 = ($96<<24>>24)!=(0);
    $98 = $23;
    $99 = $24;
    $100 = $98 >>> $99;
    if ($97) {
     $101 = (_rev($100)|0);
     $102 = $25;
     $103 = (16 - ($102))|0;
     $104 = $101 >>> $103;
     $105 = $22;
     $106 = (($105) + ($104))|0;
     $22 = $106;
    } else {
     $107 = $22;
     $108 = (($107) + ($100))|0;
     $22 = $108;
    }
    $109 = $24;
    $110 = 1 << $109;
    $111 = (($110) - 1)|0;
    $112 = $23;
    $113 = $112 & $111;
    $23 = $113;
    $25 = 2;
    $114 = $23;
    $115 = ($114|0)==(0);
    if ($115) {
     $116 = $15;
     $117 = (($116) + -2147483648)|0;
     $118 = $7;
     $119 = $22;
     $120 = (($118) + ($119<<2)|0);
     HEAP32[$120>>2] = $117;
     $121 = $25;
     $122 = 1 << $121;
     $123 = $15;
     $124 = (($123) + ($122))|0;
     $15 = $124;
     $125 = $15;
     $126 = $8;
     $127 = ($125>>>0)>($126>>>0);
     if ($127) {
      label = 20;
      break L13;
     }
    }
    $128 = $7;
    $129 = $22;
    $130 = (($128) + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) - -2147483648)|0;
    $22 = $132;
   }
   $133 = $24;
   $134 = $25;
   $135 = (($134) - ($133))|0;
   $25 = $135;
   $136 = $12;
   $137 = ($136<<24>>24)!=(0);
   $138 = $23;
   if ($137) {
    $139 = (_rev($138)|0);
    $140 = $24;
    $141 = (16 - ($140))|0;
    $142 = $139 >>> $141;
    $143 = $22;
    $144 = (($143) + ($142))|0;
    $22 = $144;
   } else {
    $145 = $25;
    $146 = $138 << $145;
    $147 = $22;
    $148 = (($147) + ($146))|0;
    $22 = $148;
   }
   $149 = $12;
   $150 = ($149<<24>>24)!=(0);
   L33: do {
    if ($150) {
     $151 = $24;
     $152 = 1 << $151;
     $26 = $152;
     $153 = $25;
     $154 = 1 << $153;
     $27 = $154;
     while(1) {
      $155 = $27;
      $156 = ($155>>>0)>(0);
      if (!($156)) {
       break L33;
      }
      $157 = $21;
      $158 = $7;
      $159 = $22;
      $160 = (($158) + ($159<<2)|0);
      HEAP32[$160>>2] = $157;
      $161 = $26;
      $162 = $22;
      $163 = (($162) + ($161))|0;
      $22 = $163;
      $164 = $27;
      $165 = (($164) + -1)|0;
      $27 = $165;
     }
    } else {
     $166 = $25;
     $167 = 1 << $166;
     $28 = $167;
     while(1) {
      $168 = $28;
      $169 = ($168>>>0)>(0);
      if (!($169)) {
       break L33;
      }
      $170 = $21;
      $171 = $7;
      $172 = $22;
      $173 = (($172) + 1)|0;
      $22 = $173;
      $174 = (($171) + ($172<<2)|0);
      HEAP32[$174>>2] = $170;
      $175 = $28;
      $176 = (($175) + -1)|0;
      $28 = $176;
     }
    }
   } while(0);
   $177 = $13;
   $178 = ($177|0)==(0);
   if ($178) {
    label = 33;
    break L13;
   }
   $179 = $13;
   $180 = (($179) + -1)|0;
   $13 = $180;
   $181 = $14;
   $182 = (($181) + 1)|0;
   $14 = $182;
   $183 = $16;
   $184 = (($183) + 1)|0;
   $16 = $184;
  }
  $185 = $13;
  $186 = $185<<1;
  $13 = $186;
  $187 = $14;
  $188 = $187<<1;
  $14 = $188;
  $189 = $17;
  $190 = (($189) + 1)|0;
  $17 = $190;
 }
 if ((label|0) == 20) {
  $6 = 14273;
  $193 = $6;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 33) {
  $6 = 14296;
  $193 = $6;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 36) {
  $191 = $13;
  $192 = ($191|0)!=(0);
  if ($192) {
   $6 = 14318;
   $193 = $6;
   STACKTOP = sp;return ($193|0);
  } else {
   $6 = 0;
   $193 = $6;
   STACKTOP = sp;return ($193|0);
  }
 }
 return (0)|0;
}
function _crc_calc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 $9 = $6;
 $10 = $9 ^ -1;
 $6 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11>>>0)>(0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = ((($13)) + 1|0);
  $4 = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $17 = $6;
  $18 = $17 & 255;
  $19 = $16 ^ $18;
  $20 = (107680 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = $22 >>> 8;
  $24 = $21 ^ $23;
  $6 = $24;
  $25 = $5;
  $26 = (($25) + -1)|0;
  $5 = $26;
 }
 $27 = $6;
 $28 = $27 ^ -1;
 $6 = $28;
 $29 = $6;
 $30 = $3;
 HEAP32[$30>>2] = $29;
 STACKTOP = sp;return;
}
function _rev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = $3 << 8;
 $5 = $1;
 $6 = $5 >>> 8;
 $7 = $6 & 255;
 $8 = $4 | $7;
 $1 = $8;
 $9 = $1;
 $10 = $9 & 3855;
 $11 = $10 << 4;
 $12 = $1;
 $13 = $12 >>> 4;
 $14 = $13 & 3855;
 $15 = $11 | $14;
 $1 = $15;
 $16 = $1;
 $17 = $16 & 13107;
 $18 = $17 << 2;
 $19 = $1;
 $20 = $19 >>> 2;
 $21 = $20 & 13107;
 $22 = $18 | $21;
 $1 = $22;
 $23 = $1;
 $24 = $23 & 21845;
 $25 = $24 << 1;
 $26 = $1;
 $27 = $26 >>> 1;
 $28 = $27 & 21845;
 $29 = $25 | $28;
 $1 = $29;
 $30 = $1;
 STACKTOP = sp;return ($30|0);
}
function _unzip_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  HEAP32[$5>>2] = 108704;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  _crc_init();
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$10>>2] = 0;
 _crc_init();
 STACKTOP = sp;return;
}
function _crc_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP8[164390]|0;
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $0 = 0;
 while(1) {
  $5 = $0;
  $6 = ($5>>>0)<(256);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $2 = $7;
  $1 = 0;
  while(1) {
   $8 = $1;
   $9 = ($8>>>0)<(8);
   $10 = $2;
   if (!($9)) {
    break;
   }
   $11 = $10 & 1;
   $12 = ($11|0)==(0);
   $13 = $12 ? 0 : -306674912;
   $14 = $2;
   $15 = $14 >>> 1;
   $16 = $13 ^ $15;
   $2 = $16;
   $17 = $1;
   $18 = (($17) + 1)|0;
   $1 = $18;
  }
  $19 = $0;
  $20 = (107680 + ($19<<2)|0);
  HEAP32[$20>>2] = $10;
  $21 = $0;
  $22 = (($21) + 1)|0;
  $0 = $22;
 }
 HEAP8[164390] = 1;
 STACKTOP = sp;return;
}
function _unzip_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[38246]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (153024 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[38246] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(152992)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (153024 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[38246] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(153004)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (153024 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[38246] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(152992)>>2] = $76;
     HEAP32[(153004)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(152988)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (153288 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (153288 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(152988)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(153004)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (153024 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[38246] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(152992)>>2] = $$0173$lcssa$i;
       HEAP32[(153004)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(152988)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (153288 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (153288 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(152992)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (153288 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(152988)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (153024 + ($383<<2)|0);
          $385 = HEAP32[38246]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[38246] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (153288 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(152988)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(152992)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(153004)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(153004)>>2] = $462;
   HEAP32[(152992)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(152992)>>2] = 0;
   HEAP32[(153004)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(152996)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(152996)>>2] = $477;
  $478 = HEAP32[(153008)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(153008)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[38364]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(153464)>>2] = 4096;
  HEAP32[(153460)>>2] = 4096;
  HEAP32[(153468)>>2] = -1;
  HEAP32[(153472)>>2] = -1;
  HEAP32[(153476)>>2] = 0;
  HEAP32[(153428)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[38364] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(153464)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(153424)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(153416)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(153428)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(153008)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (153432);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(153460)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(153416)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(153424)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(153464)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(153428)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(153428)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(153416)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(153416)>>2] = $578;
  $579 = HEAP32[(153420)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(153420)>>2] = $578;
  }
  $581 = HEAP32[(153008)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(153000)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(153000)>>2] = $$748$i;
    }
    HEAP32[(153432)>>2] = $$748$i;
    HEAP32[(153436)>>2] = $$723947$i;
    HEAP32[(153444)>>2] = 0;
    $586 = HEAP32[38364]|0;
    HEAP32[(153020)>>2] = $586;
    HEAP32[(153016)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (153024 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(153008)>>2] = $600;
    HEAP32[(152996)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(153472)>>2]|0;
    HEAP32[(153012)>>2] = $606;
   } else {
    $$024370$i = (153432);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(152996)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(153008)>>2] = $630;
       HEAP32[(152996)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(153472)>>2]|0;
       HEAP32[(153012)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(153000)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(153000)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (153432);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(152996)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(152996)>>2] = $678;
        HEAP32[(153008)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(153004)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(152992)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(152992)>>2] = $684;
         HEAP32[(153004)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[38246]|0;
            $703 = $702 & $701;
            HEAP32[38246] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (153288 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(152988)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(152988)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (153024 + ($762<<2)|0);
         $764 = HEAP32[38246]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[38246] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (153288 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(152988)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(152988)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (153432);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(153008)>>2] = $865;
    HEAP32[(152996)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(153472)>>2]|0;
    HEAP32[(153012)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(153432)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(153432)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(153432)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(153432)+12>>2]|0;
    HEAP32[(153432)>>2] = $$748$i;
    HEAP32[(153436)>>2] = $$723947$i;
    HEAP32[(153444)>>2] = 0;
    HEAP32[(153440)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (153024 + ($887<<2)|0);
      $889 = HEAP32[38246]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[38246] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (153288 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(152988)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(152988)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(152996)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(152996)>>2] = $962;
   $963 = HEAP32[(153008)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(153008)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(153000)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(153004)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(152992)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[38246]|0;
     $29 = $28 & $27;
     HEAP32[38246] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (153288 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(152988)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(152988)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(153008)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(153004)>>2]|0;
  if ($95) {
   $97 = HEAP32[(152996)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(152996)>>2] = $98;
   HEAP32[(153008)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(153004)>>2] = 0;
   HEAP32[(152992)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(152992)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(152992)>>2] = $104;
   HEAP32[(153004)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[38246]|0;
     $120 = $119 & $118;
     HEAP32[38246] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (153288 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(152988)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(152988)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(153004)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(152992)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (153024 + ($180<<2)|0);
  $182 = HEAP32[38246]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[38246] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (153288 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(152988)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(152988)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(153016)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(153016)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (153440);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(153016)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(153464)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(153008)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(152996)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(153008)>>2] = $34;
  HEAP32[(152996)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(153004)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(152992)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(152992)>>2] = $storemerge1;
  HEAP32[(153004)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[38246]|0;
    $81 = $80 & $79;
    HEAP32[38246] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (153288 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(152988)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(152988)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(153004)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(152992)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[38246]|0;
     $25 = $24 & $23;
     HEAP32[38246] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (153288 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(152988)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(152988)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(153008)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(153004)>>2]|0;
  if ($87) {
   $89 = HEAP32[(152996)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(152996)>>2] = $90;
   HEAP32[(153008)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(153004)>>2] = 0;
   HEAP32[(152992)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(152992)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(152992)>>2] = $96;
   HEAP32[(153004)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[38246]|0;
     $112 = $111 & $110;
     HEAP32[38246] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (153288 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(152988)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(152988)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(153004)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(152992)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (153024 + ($172<<2)|0);
  $174 = HEAP32[38246]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[38246] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (153288 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(152988)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(152988)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (153480|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_570($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_103()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_103() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2088|0);
}
function _dummy_570($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 124;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 255]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 255]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=2464; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 255]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((14341 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 14805;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 14805;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 14805 : (14807);
     $$$ = $238 ? $$ : (14806);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 14805;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 14805;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 14815;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_684($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 14805;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (14805 + ($208)|0);
    $$289 = $or$cond283 ? 14805 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 14805;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_684($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_684($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_684($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_684($0,48,$$2261,$312,$314);
  _pad_684($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_684($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (14857 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_104()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_684($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_685($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 14822;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (14823) : (14828);
  $$$ = $16 ? $$ : (14825);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_685($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (14857 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_684($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_684($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_684($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_684($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_684($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_684($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,14873,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_684($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,14873,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_684($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_684($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 14841 : 14845;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 14849 : 14853;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_684($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_684($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_685($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_431()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_431() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_104() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (14875 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 14963;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 14963;
  } else {
   $$01214 = 14963;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 255]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 255]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_570($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $14 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   switch ($9|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($0)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($17) + ($14))|0;
  HEAP32[$1>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$43 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$43 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 255]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 255]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 255]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 255]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 255]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 255]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 255]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_737($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_737($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_737($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_130()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function ___pthread_self_130() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[490]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $not$ = ($3|0)!=($2|0);
 $4 = $not$ << 31 >> 31;
 return ($4|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_613()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___pthread_self_613() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 255]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_613()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$not = 0, $$pre = 0, $$pre52 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $brmerge = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[437]|0;
 $6 = ($5|0)==(0);
 $7 = HEAP32[38386]|0;
 $8 = ($7|0)!=(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  HEAP32[38386] = 0;
  HEAP32[38387] = 0;
  HEAP32[437] = 1;
  $10 = 1;
 } else {
  $10 = $5;
 }
 $9 = ($10|0)<($0|0);
 L4: do {
  if ($9) {
   $11 = (($1) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = -1;
   } else {
    $14 = HEAP8[$12>>0]|0;
    $15 = ($14<<24>>24)==(45);
    if (!($15)) {
     $16 = HEAP8[$2>>0]|0;
     $17 = ($16<<24>>24)==(45);
     if (!($17)) {
      $$0 = -1;
      break;
     }
     $18 = (($10) + 1)|0;
     HEAP32[437] = $18;
     HEAP32[38388] = $12;
     $$0 = 1;
     break;
    }
    $19 = ((($12)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    switch ($20<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $21 = ((($12)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $24 = (($10) + 1)|0;
      HEAP32[437] = $24;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $25 = HEAP32[38387]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[38387] = 1;
     $28 = 1;
    } else {
     $28 = $25;
    }
    $27 = (($12) + ($28)|0);
    $29 = (_mbtowc($3,$27,4)|0);
    $30 = ($29|0)<(0);
    if ($30) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;$36 = 65533;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $$050 = $29;$36 = $$pre;
    }
    $31 = HEAP32[437]|0;
    $32 = (($1) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[38387]|0;
    $35 = (($33) + ($34)|0);
    HEAP32[38389] = $36;
    $37 = (($34) + ($$050))|0;
    HEAP32[38387] = $37;
    $38 = (($33) + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = (($31) + 1)|0;
     HEAP32[437] = $41;
     HEAP32[38387] = 0;
    }
    $42 = HEAP8[$2>>0]|0;
    switch ($42<<24>>24) {
    case 43: case 45:  {
     $43 = ((($2)) + 1|0);
     $$049 = $43;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $44 = (($$049) + ($$051)|0);
     $45 = (_mbtowc($4,$44,4)|0);
     $46 = ($45|0)>(1);
     $$ = $46 ? $45 : 1;
     $$1 = (($$) + ($$051))|0;
     $47 = ($45|0)==(0);
     $48 = HEAP32[$3>>2]|0;
     $49 = HEAP32[$4>>2]|0;
     $50 = ($49|0)!=($48|0);
     $$not = $50 ^ 1;
     $brmerge = $47 | $$not;
     if ($brmerge) {
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ($50) {
     $51 = HEAP8[$$049>>0]|0;
     $52 = ($51<<24>>24)!=(58);
     $53 = HEAP32[438]|0;
     $54 = ($53|0)!=(0);
     $or$cond3 = $52 & $54;
     if (!($or$cond3)) {
      $$0 = 63;
      break;
     }
     $55 = HEAP32[$1>>2]|0;
     ___getopt_msg($55,16767,$35,$$050);
     $$0 = 63;
     break;
    }
    $56 = (($$049) + ($$1)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(58);
    if ($58) {
     $59 = (($$1) + 1)|0;
     $60 = (($$049) + ($59)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(58);
     do {
      if ($62) {
       HEAP32[38388] = 0;
       $$pre52 = HEAP8[$60>>0]|0;
       $71 = ($$pre52<<24>>24)!=(58);
       $72 = HEAP32[38387]|0;
       $73 = ($72|0)!=(0);
       $or$cond5 = $71 | $73;
       if ($or$cond5) {
        $79 = $72;
       } else {
        $$0 = $48;
        break L4;
       }
      } else {
       $63 = HEAP32[437]|0;
       $64 = ($63|0)<($0|0);
       if ($64) {
        $65 = HEAP32[38387]|0;
        $79 = $65;
        break;
       }
       $66 = HEAP8[$$049>>0]|0;
       $67 = ($66<<24>>24)==(58);
       if ($67) {
        $$0 = 58;
        break L4;
       }
       $68 = HEAP32[438]|0;
       $69 = ($68|0)==(0);
       if ($69) {
        $$0 = 63;
        break L4;
       }
       $70 = HEAP32[$1>>2]|0;
       ___getopt_msg($70,16791,$35,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $74 = HEAP32[437]|0;
     $75 = (($74) + 1)|0;
     HEAP32[437] = $75;
     $76 = (($1) + ($74<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($79)|0);
     HEAP32[38388] = $78;
     HEAP32[38387] = 0;
     $$0 = $48;
    } else {
     $$0 = $48;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_428()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $not$ = ($15|0)==(0|0);
     $16 = HEAP8[$1>>0]|0;
     if ($not$) {
      $17 = $16 << 24 >> 24;
      $18 = $17 & 57343;
      HEAP32[$$>>2] = $18;
      $$0 = 1;
      break L1;
     }
     $19 = $16&255;
     $20 = (($19) + -194)|0;
     $21 = ($20>>>0)>(50);
     if (!($21)) {
      $22 = ((($1)) + 1|0);
      $23 = (1756 + ($20<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($2>>>0)<(4);
      if ($25) {
       $26 = ($2*6)|0;
       $27 = (($26) + -6)|0;
       $28 = -2147483648 >>> $27;
       $29 = $24 & $28;
       $30 = ($29|0)==(0);
       if (!($30)) {
        break;
       }
      }
      $31 = HEAP8[$22>>0]|0;
      $32 = $31&255;
      $33 = $32 >>> 3;
      $34 = (($33) + -16)|0;
      $35 = $24 >> 26;
      $36 = (($33) + ($35))|0;
      $37 = $34 | $36;
      $38 = ($37>>>0)>(7);
      if (!($38)) {
       $39 = $24 << 6;
       $40 = (($32) + -128)|0;
       $41 = $40 | $39;
       $42 = ($41|0)<(0);
       if (!($42)) {
        HEAP32[$$>>2] = $41;
        $$0 = 2;
        break L1;
       }
       $43 = ((($1)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44&255;
       $46 = (($45) + -128)|0;
       $47 = ($46>>>0)>(63);
       if (!($47)) {
        $48 = $41 << 6;
        $49 = $46 | $48;
        $50 = ($49|0)<(0);
        if (!($50)) {
         HEAP32[$$>>2] = $49;
         $$0 = 3;
         break L1;
        }
        $51 = ((($1)) + 3|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52&255;
        $54 = (($53) + -128)|0;
        $55 = ($54>>>0)>(63);
        if (!($55)) {
         $56 = $49 << 6;
         $57 = $54 | $56;
         HEAP32[$$>>2] = $57;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $58 = (___errno_location()|0);
   HEAP32[$58>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_428() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(16823,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(16823,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 132;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 124;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 125;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 123;
   $38 = HEAP32[(153484)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((153560|0));
 return (153568|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((153560|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 127]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[615]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[615]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 255]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $17 = $6;
 } else {
  $17 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 $9 = ($7|0)!=(0);
 if ($8) {
  $10 = ((($2)) + 74|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) + 255)|0;
  $14 = $13 | $12;
  $15 = $14&255;
  HEAP8[$10>>0] = $15;
  $16 = ($17|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  if ($9) {
   $$0 = 0;
  } else {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  }
 } else {
  L11: do {
   if ($9) {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   } else {
    $$1 = $0;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($17|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 255]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 255]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 255]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function ___randname($0) {
 $0 = $0|0;
 var $$01112 = 0, $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (___clock_gettime(0,($1|0))|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*65537)|0;
 $5 = $1;
 $6 = $5 >>> 4;
 $7 = $0;
 $8 = (($6) + ($7))|0;
 $9 = $4 ^ $8;
 $$01112 = 0;$$013 = $9;
 while(1) {
  $10 = $$013 & 15;
  $11 = (($10) + 65)|0;
  $12 = $$013 << 1;
  $13 = $12 & 32;
  $14 = $11 | $13;
  $15 = $14&255;
  $16 = (($0) + ($$01112)|0);
  HEAP8[$16>>0] = $15;
  $17 = (($$01112) + 1)|0;
  $18 = $$013 >>> 5;
  $exitcond = ($17|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $17;$$013 = $18;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _tmpfile() {
 var $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 dest=$0; src=16827; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($0)) + 13|0);
 $2 = $0;
 $$014 = 0;
 while(1) {
  (___randname($1)|0);
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 32962;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 384;
  $5 = (___syscall5(5,($vararg_buffer|0))|0);
  $6 = (___syscall_ret($5)|0);
  $7 = ($6|0)>(-1);
  $4 = (($$014) + 1)|0;
  if ($7) {
   label = 4;
   break;
  }
  $3 = ($4|0)<(100);
  if ($3) {
   $$014 = $4;
  } else {
   $$012 = 0;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer3>>2] = $2;
  (___syscall10(10,($vararg_buffer3|0))|0);
  $8 = (___fdopen($6,16847)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   HEAP32[$vararg_buffer6>>2] = $6;
   (___syscall6(6,($vararg_buffer6|0))|0);
   $$012 = 0;
  } else {
   $$012 = $8;
  }
 }
 STACKTOP = sp;return ($$012|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[38393]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[38393] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[38393] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[38393] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[38393] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _mktemp($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp;
 $2 = (_strlen($0)|0);
 $3 = ($2>>>0)<(6);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = (($0) + ($2)|0);
   $5 = ((($4)) + -6|0);
   $6 = (_memcmp($5,16850,6)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 100;
    while(1) {
     (___randname($5)|0);
     $9 = (_stat($0,$1)|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      break;
     }
     $14 = (($$0) + -1)|0;
     $15 = ($14|0)==(0);
     if ($15) {
      label = 8;
      break;
     } else {
      $$0 = $14;
     }
    }
    if ((label|0) == 8) {
     HEAP8[$0>>0] = 0;
     $16 = (___errno_location()|0);
     HEAP32[$16>>2] = 17;
     break;
    }
    $11 = (___errno_location()|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(2);
    if (!($13)) {
     HEAP8[$0>>0] = 0;
    }
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 22;
  HEAP8[$0>>0] = 0;
 }
 STACKTOP = sp;return ($0|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b4() {
 ; nullFunc_v(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,___stdio_close,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b1,b1,b1,b1,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_cmp_cave,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viii = [b3,_Lchain,_Lboom_1,_Lboom_2,_Lacid_1,_Lacid_2,_Lacid_3,_Lacid_4,_Lacid_5,_Lacid_6,_Lacid_7,_Lacid_8,_Landroid,_Landroid_1_n,_Landroid_2_n,_Landroid_1_e,_Landroid_2_e,_Landroid_1_s,_Landroid_2_s,_Landroid_1_w,_Landroid_2_w,_Leater_n,_Leater_e,_Leater_s,_Leater_w,_Lalien,_Lalien_pause,_Lbug_1_n,_Lbug_2_n
,_Lbug_1_e,_Lbug_2_e,_Lbug_1_s,_Lbug_2_s,_Lbug_1_w,_Lbug_2_w,_Ltank_1_n,_Ltank_2_n,_Ltank_1_e,_Ltank_2_e,_Ltank_1_s,_Ltank_2_s,_Ltank_1_w,_Ltank_2_w,_Lemerald,_Lemerald_pause,_Lemerald_fall,_Ldiamond,_Ldiamond_pause,_Ldiamond_fall,_Lstone,_Lstone_pause,_Lstone_fall,_Lbomb,_Lbomb_pause,_Lbomb_fall,_Lnut,_Lnut_pause,_Lnut_fall,_Lspring
,_Lspring_pause,_Lspring_fall,_Lspring_e,_Lspring_w,_Lpush_emerald_e,_Lpush_emerald_w,_Lpush_diamond_e,_Lpush_diamond_w,_Lpush_stone_e,_Lpush_stone_w,_Lpush_bomb_e,_Lpush_bomb_w,_Lpush_nut_e,_Lpush_nut_w,_Lpush_spring_e,_Lpush_spring_w,_Ldynamite_1,_Ldynamite_2,_Ldynamite_3,_Ldynamite_4,_Lfake_door_1,_Lfake_door_2,_Lfake_door_3,_Lfake_door_4,_Lfake_door_5,_Lfake_door_6,_Lfake_door_7,_Lfake_door_8,_Lballoon,_Lball_1
,_Lball_2,_Ldrip,_Ldrip_1_sB,_Ldrip_2_sB,_Ldrip_1_s,_Ldrip_2_s,_Lwonderwall,_Lwheel,_Lswitch,_Lfake_space,_Lfake_grass,_Lfake_ameuba,_Lsand_stone,_Lsand_stone_1_sB,_Lsand_stone_2_sB,_Lsand_stone_3_sB,_Lsand_stone_4_sB,_Lsand_sand_1_s,_Lsand_sand_2_s,_Lsand_sand_3_s,_Lsand_sand_4_s,_Lsand_sand_1_sB,_Lsand_sand_2_sB,_Lsand_sand_3_sB,_Lsand_sand_4_sB,_Lsand_stone_1_s,_Lsand_stone_2_s,_Lslide_ns,_Lslide_ew,_Lexit
,_Lexit_1,_Lexit_2,_Lexit_3,_Lpause,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,_menu_main_js,_game_loop,b4,_quit,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, ___errno_location: ___errno_location, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___uremdi3: ___uremdi3, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_ii: dynCall_ii, stackSave: stackSave, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



